
lanterna_bueno.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082a0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f1c  080083b0  080083b0  000183b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2cc  0800a2cc  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800a2cc  0800a2cc  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a2cc  0800a2cc  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2cc  0800a2cc  0001a2cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2d0  0800a2d0  0001a2d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800a2d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e0  200001ec  0800a4c0  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007cc  0800a4c0  000207cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018e8d  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036b1  00000000  00000000  000390a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00016799  00000000  00000000  0003c753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb8  00000000  00000000  00052ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00004130  00000000  00000000  00053ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019ee2  00000000  00000000  00057cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f7fb  00000000  00000000  00071bba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091985  00000000  00000000  000913b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00122d3a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004158  00000000  00000000  00122d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	08008398 	.word	0x08008398

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	08008398 	.word	0x08008398

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <MX_ADC1_Init>:

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010d0:	2300      	movs	r3, #0
{
 80010d2:	b530      	push	{r4, r5, lr}
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010d4:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010d8:	f44f 7580 	mov.w	r5, #256	; 0x100
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010dc:	2401      	movs	r4, #1
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 2;
 80010de:	2202      	movs	r2, #2
  hadc1.Instance = ADC1;
 80010e0:	4817      	ldr	r0, [pc, #92]	; (8001140 <MX_ADC1_Init+0x70>)
{
 80010e2:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 80010e4:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80010e8:	9300      	str	r3, [sp, #0]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010ea:	7503      	strb	r3, [r0, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ec:	6043      	str	r3, [r0, #4]
  hadc1.Instance = ADC1;
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <MX_ADC1_Init+0x74>)
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010f0:	6085      	str	r5, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010f2:	7304      	strb	r4, [r0, #12]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010f4:	61c1      	str	r1, [r0, #28]
  hadc1.Init.NbrOfConversion = 2;
 80010f6:	6102      	str	r2, [r0, #16]
  hadc1.Instance = ADC1;
 80010f8:	6003      	str	r3, [r0, #0]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010fa:	f001 fa81 	bl	8002600 <HAL_ADC_Init>
 80010fe:	b9a8      	cbnz	r0, 800112c <MX_ADC1_Init+0x5c>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001100:	2400      	movs	r4, #0
 8001102:	2501      	movs	r5, #1
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001104:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001106:	4669      	mov	r1, sp
 8001108:	480d      	ldr	r0, [pc, #52]	; (8001140 <MX_ADC1_Init+0x70>)
  sConfig.Channel = ADC_CHANNEL_0;
 800110a:	e9cd 4500 	strd	r4, r5, [sp]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800110e:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001110:	f001 fc44 	bl	800299c <HAL_ADC_ConfigChannel>
 8001114:	b988      	cbnz	r0, 800113a <MX_ADC1_Init+0x6a>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001116:	2210      	movs	r2, #16
 8001118:	2302      	movs	r3, #2
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800111a:	4669      	mov	r1, sp
 800111c:	4808      	ldr	r0, [pc, #32]	; (8001140 <MX_ADC1_Init+0x70>)
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800111e:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001122:	f001 fc3b 	bl	800299c <HAL_ADC_ConfigChannel>
 8001126:	b920      	cbnz	r0, 8001132 <MX_ADC1_Init+0x62>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001128:	b005      	add	sp, #20
 800112a:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 800112c:	f000 fbca 	bl	80018c4 <Error_Handler>
 8001130:	e7e6      	b.n	8001100 <MX_ADC1_Init+0x30>
    Error_Handler();
 8001132:	f000 fbc7 	bl	80018c4 <Error_Handler>
}
 8001136:	b005      	add	sp, #20
 8001138:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 800113a:	f000 fbc3 	bl	80018c4 <Error_Handler>
 800113e:	e7ea      	b.n	8001116 <MX_ADC1_Init+0x46>
 8001140:	20000208 	.word	0x20000208
 8001144:	40012400 	.word	0x40012400

08001148 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	2300      	movs	r3, #0
{
 800114a:	b530      	push	{r4, r5, lr}
  if(adcHandle->Instance==ADC1)
 800114c:	4a15      	ldr	r2, [pc, #84]	; (80011a4 <HAL_ADC_MspInit+0x5c>)
 800114e:	6801      	ldr	r1, [r0, #0]
{
 8001150:	b087      	sub	sp, #28
  if(adcHandle->Instance==ADC1)
 8001152:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001158:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(adcHandle->Instance==ADC1)
 800115c:	d001      	beq.n	8001162 <HAL_ADC_MspInit+0x1a>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800115e:	b007      	add	sp, #28
 8001160:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = BAT_MON_Pin;
 8001162:	2401      	movs	r4, #1
 8001164:	2503      	movs	r5, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001166:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800116a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800116e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(BAT_MON_GPIO_Port, &GPIO_InitStruct);
 8001170:	480d      	ldr	r0, [pc, #52]	; (80011a8 <HAL_ADC_MspInit+0x60>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001176:	619a      	str	r2, [r3, #24]
 8001178:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(BAT_MON_GPIO_Port, &GPIO_InitStruct);
 800117a:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 800117c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001180:	9200      	str	r2, [sp, #0]
 8001182:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001184:	699a      	ldr	r2, [r3, #24]
 8001186:	f042 0204 	orr.w	r2, r2, #4
 800118a:	619a      	str	r2, [r3, #24]
 800118c:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = BAT_MON_Pin;
 800118e:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001192:	f003 0304 	and.w	r3, r3, #4
 8001196:	9301      	str	r3, [sp, #4]
 8001198:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(BAT_MON_GPIO_Port, &GPIO_InitStruct);
 800119a:	f001 ff15 	bl	8002fc8 <HAL_GPIO_Init>
}
 800119e:	b007      	add	sp, #28
 80011a0:	bd30      	pop	{r4, r5, pc}
 80011a2:	bf00      	nop
 80011a4:	40012400 	.word	0x40012400
 80011a8:	40010800 	.word	0x40010800

080011ac <MX_DMA_Init>:
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80011ac:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <MX_DMA_Init+0x30>)
{
 80011b0:	b500      	push	{lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011b2:	6959      	ldr	r1, [r3, #20]
{
 80011b4:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011b6:	f041 0101 	orr.w	r1, r1, #1
 80011ba:	6159      	str	r1, [r3, #20]
 80011bc:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80011be:	2010      	movs	r0, #16
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80011c6:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011c8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80011ca:	f001 fd3d 	bl	8002c48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80011ce:	2010      	movs	r0, #16

}
 80011d0:	b003      	add	sp, #12
 80011d2:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80011d6:	f001 bd75 	b.w	8002cc4 <HAL_NVIC_EnableIRQ>
 80011da:	bf00      	nop
 80011dc:	40021000 	.word	0x40021000

080011e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011e0:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e2:	2400      	movs	r4, #0
{
 80011e4:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e6:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80011ea:	e9cd 4404 	strd	r4, r4, [sp, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	4b1e      	ldr	r3, [pc, #120]	; (8001268 <MX_GPIO_Init+0x88>)
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_CMD_GPIO_Port, POWER_CMD_Pin, GPIO_PIN_RESET);
 80011f0:	4d1e      	ldr	r5, [pc, #120]	; (800126c <MX_GPIO_Init+0x8c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f2:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(POWER_CMD_GPIO_Port, POWER_CMD_Pin, GPIO_PIN_RESET);
 80011f4:	4628      	mov	r0, r5
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f6:	f042 0204 	orr.w	r2, r2, #4
 80011fa:	619a      	str	r2, [r3, #24]
 80011fc:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(POWER_CMD_GPIO_Port, POWER_CMD_Pin, GPIO_PIN_RESET);
 80011fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	f002 0204 	and.w	r2, r2, #4
 8001206:	9200      	str	r2, [sp, #0]
 8001208:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800120a:	699a      	ldr	r2, [r3, #24]
 800120c:	f042 0208 	orr.w	r2, r2, #8
 8001210:	619a      	str	r2, [r3, #24]
 8001212:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(POWER_CMD_GPIO_Port, POWER_CMD_Pin, GPIO_PIN_RESET);
 8001214:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001216:	f003 0308 	and.w	r3, r3, #8
 800121a:	9301      	str	r3, [sp, #4]
 800121c:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(POWER_CMD_GPIO_Port, POWER_CMD_Pin, GPIO_PIN_RESET);
 800121e:	f001 ffe7 	bl	80031f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BUT_MINUS_Pin|BUT_PLUS_Pin|BUT_MENU_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001222:	2101      	movs	r1, #1
  GPIO_InitStruct.Pin = BUT_MINUS_Pin|BUT_PLUS_Pin|BUT_MENU_Pin;
 8001224:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <MX_GPIO_Init+0x90>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122a:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800122c:	9104      	str	r1, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122e:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = BUT_MINUS_Pin|BUT_PLUS_Pin|BUT_MENU_Pin;
 8001230:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001234:	f001 fec8 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_CMD_Pin;
 8001238:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800123c:	2301      	movs	r3, #1
 800123e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001242:	2302      	movs	r3, #2
 8001244:	2200      	movs	r2, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(POWER_CMD_GPIO_Port, &GPIO_InitStruct);
 8001246:	4628      	mov	r0, r5
 8001248:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = POWER_CMD_Pin;
 800124a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(POWER_CMD_GPIO_Port, &GPIO_InitStruct);
 800124e:	f001 febb 	bl	8002fc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001252:	4622      	mov	r2, r4
 8001254:	4621      	mov	r1, r4
 8001256:	2028      	movs	r0, #40	; 0x28
 8001258:	f001 fcf6 	bl	8002c48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800125c:	2028      	movs	r0, #40	; 0x28
 800125e:	f001 fd31 	bl	8002cc4 <HAL_NVIC_EnableIRQ>

}
 8001262:	b007      	add	sp, #28
 8001264:	bd30      	pop	{r4, r5, pc}
 8001266:	bf00      	nop
 8001268:	40021000 	.word	0x40021000
 800126c:	40010c00 	.word	0x40010c00
 8001270:	10210000 	.word	0x10210000

08001274 <MX_I2C1_Init>:
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 400000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001274:	2300      	movs	r3, #0
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001276:	f44f 4280 	mov.w	r2, #16384	; 0x4000
{
 800127a:	b510      	push	{r4, lr}
  hi2c1.Instance = I2C1;
 800127c:	4809      	ldr	r0, [pc, #36]	; (80012a4 <MX_I2C1_Init+0x30>)
  hi2c1.Init.ClockSpeed = 400000;
 800127e:	4c0a      	ldr	r4, [pc, #40]	; (80012a8 <MX_I2C1_Init+0x34>)
 8001280:	490a      	ldr	r1, [pc, #40]	; (80012ac <MX_I2C1_Init+0x38>)
  hi2c1.Init.OwnAddress1 = 0;
 8001282:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.ClockSpeed = 400000;
 8001286:	e9c0 4100 	strd	r4, r1, [r0]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800128a:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800128e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001292:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001294:	f002 f8dc 	bl	8003450 <HAL_I2C_Init>
 8001298:	b900      	cbnz	r0, 800129c <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800129a:	bd10      	pop	{r4, pc}
 800129c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80012a0:	f000 bb10 	b.w	80018c4 <Error_Handler>
 80012a4:	2000027c 	.word	0x2000027c
 80012a8:	40005400 	.word	0x40005400
 80012ac:	00061a80 	.word	0x00061a80

080012b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012b0:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b2:	2400      	movs	r4, #0
  if(i2cHandle->Instance==I2C1)
 80012b4:	4b23      	ldr	r3, [pc, #140]	; (8001344 <HAL_I2C_MspInit+0x94>)
 80012b6:	6802      	ldr	r2, [r0, #0]
{
 80012b8:	b087      	sub	sp, #28
  if(i2cHandle->Instance==I2C1)
 80012ba:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80012c0:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(i2cHandle->Instance==I2C1)
 80012c4:	d001      	beq.n	80012ca <HAL_I2C_MspInit+0x1a>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012c6:	b007      	add	sp, #28
 80012c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ca:	4f1f      	ldr	r7, [pc, #124]	; (8001348 <HAL_I2C_MspInit+0x98>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012cc:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ce:	69bb      	ldr	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d0:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d2:	f043 0308 	orr.w	r3, r3, #8
 80012d6:	61bb      	str	r3, [r7, #24]
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	4605      	mov	r5, r0
 80012dc:	f003 0308 	and.w	r3, r3, #8
 80012e0:	9300      	str	r3, [sp, #0]
 80012e2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012e4:	2312      	movs	r3, #18
 80012e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012ea:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ec:	4817      	ldr	r0, [pc, #92]	; (800134c <HAL_I2C_MspInit+0x9c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012ee:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f0:	f001 fe6a 	bl	8002fc8 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012f4:	69fb      	ldr	r3, [r7, #28]
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80012f6:	4e16      	ldr	r6, [pc, #88]	; (8001350 <HAL_I2C_MspInit+0xa0>)
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012fc:	60b4      	str	r4, [r6, #8]
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012fe:	61fb      	str	r3, [r7, #28]
 8001300:	69fb      	ldr	r3, [r7, #28]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001302:	2210      	movs	r2, #16
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001308:	9301      	str	r3, [sp, #4]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800130a:	2380      	movs	r3, #128	; 0x80
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 800130c:	4911      	ldr	r1, [pc, #68]	; (8001354 <HAL_I2C_MspInit+0xa4>)
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800130e:	4630      	mov	r0, r6
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8001310:	6031      	str	r1, [r6, #0]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001312:	e9c6 4405 	strd	r4, r4, [r6, #20]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001316:	9901      	ldr	r1, [sp, #4]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001318:	6134      	str	r4, [r6, #16]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800131a:	61f4      	str	r4, [r6, #28]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800131c:	6072      	str	r2, [r6, #4]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800131e:	60f3      	str	r3, [r6, #12]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001320:	f001 fcf6 	bl	8002d10 <HAL_DMA_Init>
 8001324:	b958      	cbnz	r0, 800133e <HAL_I2C_MspInit+0x8e>
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	201f      	movs	r0, #31
 800132a:	4611      	mov	r1, r2
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800132c:	636e      	str	r6, [r5, #52]	; 0x34
 800132e:	6275      	str	r5, [r6, #36]	; 0x24
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001330:	f001 fc8a 	bl	8002c48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001334:	201f      	movs	r0, #31
 8001336:	f001 fcc5 	bl	8002cc4 <HAL_NVIC_EnableIRQ>
}
 800133a:	b007      	add	sp, #28
 800133c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 800133e:	f000 fac1 	bl	80018c4 <Error_Handler>
 8001342:	e7f0      	b.n	8001326 <HAL_I2C_MspInit+0x76>
 8001344:	40005400 	.word	0x40005400
 8001348:	40021000 	.word	0x40021000
 800134c:	40010c00 	.word	0x40010c00
 8001350:	20000238 	.word	0x20000238
 8001354:	4002006c 	.word	0x4002006c

08001358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001358:	b5d0      	push	{r4, r6, r7, lr}
 800135a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135c:	2224      	movs	r2, #36	; 0x24
 800135e:	2100      	movs	r1, #0
 8001360:	a80b      	add	r0, sp, #44	; 0x2c
 8001362:	f004 f937 	bl	80055d4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001366:	2402      	movs	r4, #2
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001368:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800136a:	2601      	movs	r6, #1
 800136c:	2710      	movs	r7, #16
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800136e:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001370:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001374:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8001378:	e9cd 3307 	strd	r3, r3, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800137c:	e9cd 3301 	strd	r3, r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001380:	9304      	str	r3, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001382:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001384:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001386:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001388:	f003 fa10 	bl	80047ac <HAL_RCC_OscConfig>
 800138c:	b108      	cbz	r0, 8001392 <SystemClock_Config+0x3a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800138e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001390:	e7fe      	b.n	8001390 <SystemClock_Config+0x38>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001392:	220f      	movs	r2, #15
 8001394:	2300      	movs	r3, #0
 8001396:	4601      	mov	r1, r0
 8001398:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800139c:	2300      	movs	r3, #0
 800139e:	2200      	movs	r2, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013a0:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013a6:	9108      	str	r1, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013a8:	f003 fbf0 	bl	8004b8c <HAL_RCC_ClockConfig>
 80013ac:	4603      	mov	r3, r0
 80013ae:	b108      	cbz	r0, 80013b4 <SystemClock_Config+0x5c>
 80013b0:	b672      	cpsid	i
  while (1)
 80013b2:	e7fe      	b.n	80013b2 <SystemClock_Config+0x5a>
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013b4:	4668      	mov	r0, sp
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013b6:	9400      	str	r4, [sp, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80013b8:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ba:	f003 fcd7 	bl	8004d6c <HAL_RCCEx_PeriphCLKConfig>
 80013be:	b108      	cbz	r0, 80013c4 <SystemClock_Config+0x6c>
 80013c0:	b672      	cpsid	i
  while (1)
 80013c2:	e7fe      	b.n	80013c2 <SystemClock_Config+0x6a>
}
 80013c4:	b014      	add	sp, #80	; 0x50
 80013c6:	bdd0      	pop	{r4, r6, r7, pc}

080013c8 <main>:
{
 80013c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013cc:	b083      	sub	sp, #12
  HAL_Init();
 80013ce:	f001 f8e1 	bl	8002594 <HAL_Init>
	ssd1306_WriteString("Bueno", Font_16x26);
 80013d2:	4c78      	ldr	r4, [pc, #480]	; (80015b4 <main+0x1ec>)
  SystemClock_Config();
 80013d4:	f7ff ffc0 	bl	8001358 <SystemClock_Config>
  MX_GPIO_Init();
 80013d8:	f7ff ff02 	bl	80011e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80013dc:	f7ff ff4a 	bl	8001274 <MX_I2C1_Init>
  MX_DMA_Init();
 80013e0:	f7ff fee4 	bl	80011ac <MX_DMA_Init>
  MX_TIM3_Init();
 80013e4:	f000 fff0 	bl	80023c8 <MX_TIM3_Init>
  MX_ADC1_Init();
 80013e8:	f7ff fe72 	bl	80010d0 <MX_ADC1_Init>
	ssd1306_Init();
 80013ec:	f000 fa72 	bl	80018d4 <ssd1306_Init>
  ssd1306_FlipScreenVertically();
 80013f0:	f000 fe48 	bl	8002084 <ssd1306_FlipScreenVertically>
  ssd1306_Clear();
 80013f4:	f000 fe70 	bl	80020d8 <ssd1306_Clear>
  ssd1306_SetColor(White);
 80013f8:	2001      	movs	r0, #1
 80013fa:	f000 fa65 	bl	80018c8 <ssd1306_SetColor>
	ssd1306_SetCursor(2,0);
 80013fe:	2100      	movs	r1, #0
 8001400:	2002      	movs	r0, #2
 8001402:	f000 fe39 	bl	8002078 <ssd1306_SetCursor>
	ssd1306_WriteString("Bueno", Font_16x26);
 8001406:	e894 0006 	ldmia.w	r4, {r1, r2}
 800140a:	486b      	ldr	r0, [pc, #428]	; (80015b8 <main+0x1f0>)
 800140c:	f000 fe1a 	bl	8002044 <ssd1306_WriteString>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8001410:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 80015bc <main+0x1f4>
	ssd1306_SetCursor(30,0);
 8001414:	2100      	movs	r1, #0
 8001416:	201e      	movs	r0, #30
 8001418:	f000 fe2e 	bl	8002078 <ssd1306_SetCursor>
	ssd1306_WriteString("Light", Font_16x26);
 800141c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001420:	4867      	ldr	r0, [pc, #412]	; (80015c0 <main+0x1f8>)
 8001422:	f000 fe0f 	bl	8002044 <ssd1306_WriteString>
	LIGHT_PWM_SUP(SUP_LIGHT_LEVEL);
 8001426:	4c67      	ldr	r4, [pc, #412]	; (80015c4 <main+0x1fc>)
	ssd1306_UpdateScreen();
 8001428:	f000 fcc0 	bl	8001dac <ssd1306_UpdateScreen>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 800142c:	2108      	movs	r1, #8
 800142e:	4648      	mov	r0, r9
 8001430:	f003 fe76 	bl	8005120 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 8001434:	210c      	movs	r1, #12
 8001436:	4648      	mov	r0, r9
 8001438:	f003 fe72 	bl	8005120 <HAL_TIM_PWM_Start>
	LIGHT_PWM_INF(INF_LIGHT_LEVEL);
 800143c:	4d62      	ldr	r5, [pc, #392]	; (80015c8 <main+0x200>)
	LIGHT_PWM_SUP(SUP_LIGHT_LEVEL);
 800143e:	f8d9 3000 	ldr.w	r3, [r9]
 8001442:	7822      	ldrb	r2, [r4, #0]
 8001444:	63da      	str	r2, [r3, #60]	; 0x3c
	LIGHT_PWM_INF(INF_LIGHT_LEVEL);
 8001446:	782a      	ldrb	r2, [r5, #0]
 8001448:	641a      	str	r2, [r3, #64]	; 0x40
  while(MENU_BUTTON.State < MEDIUM_CLICK);
 800144a:	4b60      	ldr	r3, [pc, #384]	; (80015cc <main+0x204>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d800      	bhi.n	8001454 <main+0x8c>
 8001452:	e7fe      	b.n	8001452 <main+0x8a>
  POWER_CMD(1);
 8001454:	2201      	movs	r2, #1
 8001456:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800145a:	485d      	ldr	r0, [pc, #372]	; (80015d0 <main+0x208>)
 800145c:	f001 fec8 	bl	80031f0 <HAL_GPIO_WritePin>
        ssd1306_SetCursor(2,0);
 8001460:	2700      	movs	r7, #0
 8001462:	4e5c      	ldr	r6, [pc, #368]	; (80015d4 <main+0x20c>)
 8001464:	f8df 8170 	ldr.w	r8, [pc, #368]	; 80015d8 <main+0x210>
 8001468:	f8df b170 	ldr.w	fp, [pc, #368]	; 80015dc <main+0x214>
 800146c:	f8df a170 	ldr.w	sl, [pc, #368]	; 80015e0 <main+0x218>
 8001470:	e04a      	b.n	8001508 <main+0x140>
    if(RefreshDisplayTimer > 100)
 8001472:	f8b8 3000 	ldrh.w	r3, [r8]
      MENU_MODE = CITY;
 8001476:	7037      	strb	r7, [r6, #0]
    if(RefreshDisplayTimer > 100)
 8001478:	2b64      	cmp	r3, #100	; 0x64
 800147a:	d92b      	bls.n	80014d4 <main+0x10c>
      RefreshDisplayTimer = 0;
 800147c:	f8a8 7000 	strh.w	r7, [r8]
        ssd1306_SetCursor(2,0);
 8001480:	2100      	movs	r1, #0
 8001482:	2002      	movs	r0, #2
 8001484:	f000 fdf8 	bl	8002078 <ssd1306_SetCursor>
				ssd1306_WriteString("CITY", Font_7x10);
 8001488:	4b56      	ldr	r3, [pc, #344]	; (80015e4 <main+0x21c>)
 800148a:	4857      	ldr	r0, [pc, #348]	; (80015e8 <main+0x220>)
 800148c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001490:	f000 fdd8 	bl	8002044 <ssd1306_WriteString>
      if(MENU_MODE == TRAIL)
 8001494:	7833      	ldrb	r3, [r6, #0]
 8001496:	2b01      	cmp	r3, #1
 8001498:	f040 8081 	bne.w	800159e <main+0x1d6>
        if(SUP_LIGHT_LEVEL == LV0) sprintf(Str_LCD, "Level 0");
 800149c:	7823      	ldrb	r3, [r4, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f000 8187 	beq.w	80017b2 <main+0x3ea>
        else if(SUP_LIGHT_LEVEL == LV1) sprintf(Str_LCD, "Level 1");
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	f000 81a6 	beq.w	80017f6 <main+0x42e>
        else if(SUP_LIGHT_LEVEL == LV2) sprintf(Str_LCD, "Level 2");
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	f000 81a9 	beq.w	8001802 <main+0x43a>
        else if(SUP_LIGHT_LEVEL == LV3) sprintf(Str_LCD, "Level 3");
 80014b0:	2b03      	cmp	r3, #3
 80014b2:	f000 81ac 	beq.w	800180e <main+0x446>
        else if(SUP_LIGHT_LEVEL == LV4) sprintf(Str_LCD, "Level 4");
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	f000 81af 	beq.w	800181a <main+0x452>
        ssd1306_SetCursor(2,64);
 80014bc:	2140      	movs	r1, #64	; 0x40
 80014be:	2002      	movs	r0, #2
 80014c0:	f000 fdda 	bl	8002078 <ssd1306_SetCursor>
				ssd1306_WriteString(Str_LCD, Font_7x10);
 80014c4:	4b47      	ldr	r3, [pc, #284]	; (80015e4 <main+0x21c>)
 80014c6:	4658      	mov	r0, fp
 80014c8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80014cc:	f000 fdba 	bl	8002044 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 80014d0:	f000 fc6c 	bl	8001dac <ssd1306_UpdateScreen>
    if(UptadeLightLevelTimer > 100)
 80014d4:	f8ba 3000 	ldrh.w	r3, [sl]
 80014d8:	2b64      	cmp	r3, #100	; 0x64
 80014da:	d90f      	bls.n	80014fc <main+0x134>
      if(SUP_LIGHT_LEVEL == LV0)
 80014dc:	7823      	ldrb	r3, [r4, #0]
      UptadeLightLevelTimer = 0;
 80014de:	f8aa 7000 	strh.w	r7, [sl]
      if(SUP_LIGHT_LEVEL == LV0)
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f040 8139 	bne.w	800175a <main+0x392>
        LIGHT_PWM_SUP(0);
 80014e8:	f8d9 2000 	ldr.w	r2, [r9]
 80014ec:	63d3      	str	r3, [r2, #60]	; 0x3c
      if(INF_LIGHT_LEVEL == LV0)
 80014ee:	782b      	ldrb	r3, [r5, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f040 8085 	bne.w	8001600 <main+0x238>
        LIGHT_PWM_INF(0);
 80014f6:	f8d9 2000 	ldr.w	r2, [r9]
 80014fa:	6413      	str	r3, [r2, #64]	; 0x40
		if(ADC_CONVERSION_TIMER > 2000)
 80014fc:	4b3b      	ldr	r3, [pc, #236]	; (80015ec <main+0x224>)
 80014fe:	881b      	ldrh	r3, [r3, #0]
 8001500:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001504:	f200 8092 	bhi.w	800162c <main+0x264>
		if(MENU_BUTTON.State == LONG_CLICK)
 8001508:	4b30      	ldr	r3, [pc, #192]	; (80015cc <main+0x204>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b03      	cmp	r3, #3
 800150e:	f000 811b 	beq.w	8001748 <main+0x380>
    else if(MENU_BUTTON.State == MEDIUM_CLICK)
 8001512:	2b02      	cmp	r3, #2
 8001514:	d02b      	beq.n	800156e <main+0x1a6>
    else if(MENU_BUTTON.State == SHORT_CLICK)
 8001516:	2b01      	cmp	r3, #1
      if(MENU_MODE == CITY)
 8001518:	7833      	ldrb	r3, [r6, #0]
    else if(MENU_BUTTON.State == SHORT_CLICK)
 800151a:	f000 812c 	beq.w	8001776 <main+0x3ae>
    if(SUP_LIGHT_LEVEL > LV4)
 800151e:	7821      	ldrb	r1, [r4, #0]
    else if(PLUS_BUTTON.State == SHORT_CLICK)
 8001520:	4a33      	ldr	r2, [pc, #204]	; (80015f0 <main+0x228>)
 8001522:	7812      	ldrb	r2, [r2, #0]
 8001524:	2a01      	cmp	r2, #1
 8001526:	d02b      	beq.n	8001580 <main+0x1b8>
    else if(MINUS_BUTTON.State == SHORT_CLICK)
 8001528:	4a32      	ldr	r2, [pc, #200]	; (80015f4 <main+0x22c>)
 800152a:	7810      	ldrb	r0, [r2, #0]
        INF_LIGHT_LEVEL--;
 800152c:	782a      	ldrb	r2, [r5, #0]
    else if(MINUS_BUTTON.State == SHORT_CLICK)
 800152e:	2801      	cmp	r0, #1
 8001530:	f000 812d 	beq.w	800178e <main+0x3c6>
    if(INF_LIGHT_LEVEL > LV4)
 8001534:	2a04      	cmp	r2, #4
 8001536:	d901      	bls.n	800153c <main+0x174>
      INF_LIGHT_LEVEL = LV4;
 8001538:	2204      	movs	r2, #4
 800153a:	702a      	strb	r2, [r5, #0]
    if(SUP_LIGHT_LEVEL > LV4)
 800153c:	2904      	cmp	r1, #4
      SUP_LIGHT_LEVEL = LV4;
 800153e:	bf84      	itt	hi
 8001540:	2204      	movhi	r2, #4
 8001542:	7022      	strbhi	r2, [r4, #0]
    if(MENU_MODE > MENU_TYPE_QTD-1)
 8001544:	2b01      	cmp	r3, #1
 8001546:	d894      	bhi.n	8001472 <main+0xaa>
    if(RefreshDisplayTimer > 100)
 8001548:	f8b8 2000 	ldrh.w	r2, [r8]
 800154c:	2a64      	cmp	r2, #100	; 0x64
 800154e:	d9c1      	bls.n	80014d4 <main+0x10c>
      RefreshDisplayTimer = 0;
 8001550:	f8a8 7000 	strh.w	r7, [r8]
      if(MENU_MODE == CITY)
 8001554:	2b00      	cmp	r3, #0
 8001556:	d093      	beq.n	8001480 <main+0xb8>
        ssd1306_SetCursor(2,0);
 8001558:	2100      	movs	r1, #0
 800155a:	2002      	movs	r0, #2
 800155c:	f000 fd8c 	bl	8002078 <ssd1306_SetCursor>
				ssd1306_WriteString("TRAIL", Font_7x10);
 8001560:	4b20      	ldr	r3, [pc, #128]	; (80015e4 <main+0x21c>)
 8001562:	4825      	ldr	r0, [pc, #148]	; (80015f8 <main+0x230>)
 8001564:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001568:	f000 fd6c 	bl	8002044 <ssd1306_WriteString>
 800156c:	e792      	b.n	8001494 <main+0xcc>
    else if(PLUS_BUTTON.State == SHORT_CLICK)
 800156e:	4a20      	ldr	r2, [pc, #128]	; (80015f0 <main+0x228>)
      MENU_MODE++;
 8001570:	7833      	ldrb	r3, [r6, #0]
    else if(PLUS_BUTTON.State == SHORT_CLICK)
 8001572:	7812      	ldrb	r2, [r2, #0]
      MENU_MODE++;
 8001574:	3301      	adds	r3, #1
 8001576:	b2db      	uxtb	r3, r3
    else if(PLUS_BUTTON.State == SHORT_CLICK)
 8001578:	2a01      	cmp	r2, #1
    if(SUP_LIGHT_LEVEL > LV4)
 800157a:	7821      	ldrb	r1, [r4, #0]
      MENU_MODE++;
 800157c:	7033      	strb	r3, [r6, #0]
    else if(PLUS_BUTTON.State == SHORT_CLICK)
 800157e:	d1d3      	bne.n	8001528 <main+0x160>
      if(MENU_MODE == TRAIL)
 8001580:	2b01      	cmp	r3, #1
        INF_LIGHT_LEVEL++;
 8001582:	782a      	ldrb	r2, [r5, #0]
      if(MENU_MODE == TRAIL)
 8001584:	d1d6      	bne.n	8001534 <main+0x16c>
    else if(MINUS_BUTTON.State == SHORT_CLICK)
 8001586:	481b      	ldr	r0, [pc, #108]	; (80015f4 <main+0x22c>)
        INF_LIGHT_LEVEL++;
 8001588:	3201      	adds	r2, #1
    else if(MINUS_BUTTON.State == SHORT_CLICK)
 800158a:	7800      	ldrb	r0, [r0, #0]
        INF_LIGHT_LEVEL++;
 800158c:	b2d2      	uxtb	r2, r2
    else if(MINUS_BUTTON.State == SHORT_CLICK)
 800158e:	2801      	cmp	r0, #1
        INF_LIGHT_LEVEL++;
 8001590:	702a      	strb	r2, [r5, #0]
    else if(MINUS_BUTTON.State == SHORT_CLICK)
 8001592:	d1cf      	bne.n	8001534 <main+0x16c>
        INF_LIGHT_LEVEL--;
 8001594:	3a01      	subs	r2, #1
 8001596:	b2d2      	uxtb	r2, r2
 8001598:	2301      	movs	r3, #1
 800159a:	702a      	strb	r2, [r5, #0]
 800159c:	e7ca      	b.n	8001534 <main+0x16c>
        ssd1306_SetCursor(2,64);
 800159e:	2140      	movs	r1, #64	; 0x40
 80015a0:	2002      	movs	r0, #2
 80015a2:	f000 fd69 	bl	8002078 <ssd1306_SetCursor>
				ssd1306_WriteString("       ", Font_7x10);
 80015a6:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <main+0x21c>)
 80015a8:	4814      	ldr	r0, [pc, #80]	; (80015fc <main+0x234>)
 80015aa:	e893 0006 	ldmia.w	r3, {r1, r2}
 80015ae:	f000 fd49 	bl	8002044 <ssd1306_WriteString>
 80015b2:	e78d      	b.n	80014d0 <main+0x108>
 80015b4:	20000000 	.word	0x20000000
 80015b8:	08009e68 	.word	0x08009e68
 80015bc:	20000770 	.word	0x20000770
 80015c0:	08009e70 	.word	0x08009e70
 80015c4:	200002f2 	.word	0x200002f2
 80015c8:	200002dc 	.word	0x200002dc
 80015cc:	200002e0 	.word	0x200002e0
 80015d0:	40010c00 	.word	0x40010c00
 80015d4:	200002e4 	.word	0x200002e4
 80015d8:	200002f0 	.word	0x200002f0
 80015dc:	200002f4 	.word	0x200002f4
 80015e0:	20000338 	.word	0x20000338
 80015e4:	20000008 	.word	0x20000008
 80015e8:	08009e78 	.word	0x08009e78
 80015ec:	200002d0 	.word	0x200002d0
 80015f0:	200002ec 	.word	0x200002ec
 80015f4:	200002e8 	.word	0x200002e8
 80015f8:	08009e80 	.word	0x08009e80
 80015fc:	08009eb0 	.word	0x08009eb0
      else if(INF_LIGHT_LEVEL == LV1)
 8001600:	2b01      	cmp	r3, #1
 8001602:	f000 80d1 	beq.w	80017a8 <main+0x3e0>
      else if(INF_LIGHT_LEVEL == LV2)
 8001606:	2b02      	cmp	r3, #2
 8001608:	f000 80de 	beq.w	80017c8 <main+0x400>
      else if(INF_LIGHT_LEVEL == LV3)
 800160c:	2b03      	cmp	r3, #3
 800160e:	f000 80ed 	beq.w	80017ec <main+0x424>
      else if(INF_LIGHT_LEVEL == LV4)
 8001612:	2b04      	cmp	r3, #4
 8001614:	f47f af72 	bne.w	80014fc <main+0x134>
        LIGHT_PWM_INF(80);
 8001618:	2250      	movs	r2, #80	; 0x50
 800161a:	f8d9 3000 	ldr.w	r3, [r9]
 800161e:	641a      	str	r2, [r3, #64]	; 0x40
		if(ADC_CONVERSION_TIMER > 2000)
 8001620:	4b93      	ldr	r3, [pc, #588]	; (8001870 <main+0x4a8>)
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001628:	f67f af6e 	bls.w	8001508 <main+0x140>
			ADC_CONVERSION_TIMER = 0;
 800162c:	4b90      	ldr	r3, [pc, #576]	; (8001870 <main+0x4a8>)
			HAL_ADC_Start(&hadc1);
 800162e:	4891      	ldr	r0, [pc, #580]	; (8001874 <main+0x4ac>)
			ADC_CONVERSION_TIMER = 0;
 8001630:	801f      	strh	r7, [r3, #0]
			HAL_ADC_Start(&hadc1);
 8001632:	f001 fa91 	bl	8002b58 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 1000);
 8001636:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800163a:	488e      	ldr	r0, [pc, #568]	; (8001874 <main+0x4ac>)
 800163c:	f001 f8dc 	bl	80027f8 <HAL_ADC_PollForConversion>
			ADC_VAL[0] = HAL_ADC_GetValue(&hadc1);
 8001640:	488c      	ldr	r0, [pc, #560]	; (8001874 <main+0x4ac>)
 8001642:	f001 f9a7 	bl	8002994 <HAL_ADC_GetValue>
 8001646:	4b8c      	ldr	r3, [pc, #560]	; (8001878 <main+0x4b0>)
 8001648:	8018      	strh	r0, [r3, #0]
			HAL_ADC_Stop(&hadc1);
 800164a:	488a      	ldr	r0, [pc, #552]	; (8001874 <main+0x4ac>)
 800164c:	f001 f896 	bl	800277c <HAL_ADC_Stop>
			HAL_ADC_PollForConversion(&hadc1, 1000);
 8001650:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001654:	4887      	ldr	r0, [pc, #540]	; (8001874 <main+0x4ac>)
 8001656:	f001 f8cf 	bl	80027f8 <HAL_ADC_PollForConversion>
			ADC_VAL[1] = HAL_ADC_GetValue(&hadc1);
 800165a:	4886      	ldr	r0, [pc, #536]	; (8001874 <main+0x4ac>)
 800165c:	f001 f99a 	bl	8002994 <HAL_ADC_GetValue>
 8001660:	4b85      	ldr	r3, [pc, #532]	; (8001878 <main+0x4b0>)
 8001662:	8058      	strh	r0, [r3, #2]
			HAL_ADC_Stop(&hadc1);
 8001664:	4883      	ldr	r0, [pc, #524]	; (8001874 <main+0x4ac>)
 8001666:	f001 f889 	bl	800277c <HAL_ADC_Stop>
			TEMP = ((3.3*ADC_VAL[1]/4095 - V25)/Avg_Slope)+25;
 800166a:	4b83      	ldr	r3, [pc, #524]	; (8001878 <main+0x4b0>)
 800166c:	8858      	ldrh	r0, [r3, #2]
 800166e:	f7fe fec9 	bl	8000404 <__aeabi_i2d>
 8001672:	a377      	add	r3, pc, #476	; (adr r3, 8001850 <main+0x488>)
 8001674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001678:	f7fe ff2e 	bl	80004d8 <__aeabi_dmul>
 800167c:	a376      	add	r3, pc, #472	; (adr r3, 8001858 <main+0x490>)
 800167e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001682:	f7ff f853 	bl	800072c <__aeabi_ddiv>
 8001686:	a376      	add	r3, pc, #472	; (adr r3, 8001860 <main+0x498>)
 8001688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168c:	f7fe fd6c 	bl	8000168 <__aeabi_dsub>
 8001690:	a375      	add	r3, pc, #468	; (adr r3, 8001868 <main+0x4a0>)
 8001692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001696:	f7ff f849 	bl	800072c <__aeabi_ddiv>
 800169a:	2200      	movs	r2, #0
 800169c:	4b77      	ldr	r3, [pc, #476]	; (800187c <main+0x4b4>)
 800169e:	f7fe fd65 	bl	800016c <__adddf3>
 80016a2:	f7ff f9f1 	bl	8000a88 <__aeabi_d2f>
 80016a6:	4a76      	ldr	r2, [pc, #472]	; (8001880 <main+0x4b8>)
			float BAT_VOLTAGE = 3.3*ADC_VAL[0]/4095;
 80016a8:	4b73      	ldr	r3, [pc, #460]	; (8001878 <main+0x4b0>)
			TEMP = ((3.3*ADC_VAL[1]/4095 - V25)/Avg_Slope)+25;
 80016aa:	6010      	str	r0, [r2, #0]
			float BAT_VOLTAGE = 3.3*ADC_VAL[0]/4095;
 80016ac:	8818      	ldrh	r0, [r3, #0]
 80016ae:	f7fe fea9 	bl	8000404 <__aeabi_i2d>
 80016b2:	a367      	add	r3, pc, #412	; (adr r3, 8001850 <main+0x488>)
 80016b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b8:	f7fe ff0e 	bl	80004d8 <__aeabi_dmul>
 80016bc:	a366      	add	r3, pc, #408	; (adr r3, 8001858 <main+0x490>)
 80016be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c2:	f7ff f833 	bl	800072c <__aeabi_ddiv>
 80016c6:	f7ff f9df 	bl	8000a88 <__aeabi_d2f>
	if(inVal<inMin)
 80016ca:	496e      	ldr	r1, [pc, #440]	; (8001884 <main+0x4bc>)
			float BAT_VOLTAGE = 3.3*ADC_VAL[0]/4095;
 80016cc:	9001      	str	r0, [sp, #4]
	if(inVal<inMin)
 80016ce:	f7ff fcd7 	bl	8001080 <__aeabi_fcmplt>
 80016d2:	2800      	cmp	r0, #0
 80016d4:	d17d      	bne.n	80017d2 <main+0x40a>
	if(inVal>inMax)
 80016d6:	9801      	ldr	r0, [sp, #4]
 80016d8:	496b      	ldr	r1, [pc, #428]	; (8001888 <main+0x4c0>)
 80016da:	f7ff fcef 	bl	80010bc <__aeabi_fcmpgt>
 80016de:	2800      	cmp	r0, #0
 80016e0:	f000 80a1 	beq.w	8001826 <main+0x45e>
 80016e4:	2000      	movs	r0, #0
 80016e6:	4b69      	ldr	r3, [pc, #420]	; (800188c <main+0x4c4>)
 80016e8:	4969      	ldr	r1, [pc, #420]	; (8001890 <main+0x4c8>)
			BAT_PCT = Map(BAT_VOLTAGE, 3.3, 4.1, 0, 100);
 80016ea:	4a6a      	ldr	r2, [pc, #424]	; (8001894 <main+0x4cc>)
 80016ec:	6013      	str	r3, [r2, #0]
			sprintf(Str_LCD, "%.0f%", BAT_PCT);
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4658      	mov	r0, fp
 80016f4:	4968      	ldr	r1, [pc, #416]	; (8001898 <main+0x4d0>)
 80016f6:	f004 fbd5 	bl	8005ea4 <siprintf>
			ssd1306_SetCursor (0,0); ssd1306_WriteString( Str_LCD, Font_7x10); ssd1306_UpdateScreen();
 80016fa:	2100      	movs	r1, #0
 80016fc:	4608      	mov	r0, r1
 80016fe:	f000 fcbb 	bl	8002078 <ssd1306_SetCursor>
 8001702:	4b66      	ldr	r3, [pc, #408]	; (800189c <main+0x4d4>)
 8001704:	4658      	mov	r0, fp
 8001706:	e893 0006 	ldmia.w	r3, {r1, r2}
 800170a:	f000 fc9b 	bl	8002044 <ssd1306_WriteString>
 800170e:	f000 fb4d 	bl	8001dac <ssd1306_UpdateScreen>
			sprintf(Str_LCD, "%.1fC", TEMP);
 8001712:	4a5b      	ldr	r2, [pc, #364]	; (8001880 <main+0x4b8>)
 8001714:	6810      	ldr	r0, [r2, #0]
 8001716:	f7fe fe87 	bl	8000428 <__aeabi_f2d>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4658      	mov	r0, fp
 8001720:	495f      	ldr	r1, [pc, #380]	; (80018a0 <main+0x4d8>)
 8001722:	f004 fbbf 	bl	8005ea4 <siprintf>
			ssd1306_SetCursor (0,0); ssd1306_WriteString( Str_LCD, Font_7x10); ssd1306_UpdateScreen();
 8001726:	2100      	movs	r1, #0
 8001728:	4608      	mov	r0, r1
 800172a:	f000 fca5 	bl	8002078 <ssd1306_SetCursor>
 800172e:	4b5b      	ldr	r3, [pc, #364]	; (800189c <main+0x4d4>)
 8001730:	4658      	mov	r0, fp
 8001732:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001736:	f000 fc85 	bl	8002044 <ssd1306_WriteString>
 800173a:	f000 fb37 	bl	8001dac <ssd1306_UpdateScreen>
		if(MENU_BUTTON.State == LONG_CLICK)
 800173e:	4b59      	ldr	r3, [pc, #356]	; (80018a4 <main+0x4dc>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b03      	cmp	r3, #3
 8001744:	f47f aee5 	bne.w	8001512 <main+0x14a>
      POWER_CMD(0);
 8001748:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800174c:	2200      	movs	r2, #0
 800174e:	4856      	ldr	r0, [pc, #344]	; (80018a8 <main+0x4e0>)
 8001750:	f001 fd4e 	bl	80031f0 <HAL_GPIO_WritePin>
      if(MENU_MODE == TRAIL)
 8001754:	7833      	ldrb	r3, [r6, #0]
    if(SUP_LIGHT_LEVEL > LV4)
 8001756:	7821      	ldrb	r1, [r4, #0]
 8001758:	e6e2      	b.n	8001520 <main+0x158>
      else if(SUP_LIGHT_LEVEL == LV1)
 800175a:	2b01      	cmp	r3, #1
 800175c:	d01f      	beq.n	800179e <main+0x3d6>
      else if(SUP_LIGHT_LEVEL == LV2)
 800175e:	2b02      	cmp	r3, #2
 8001760:	d02d      	beq.n	80017be <main+0x3f6>
      else if(SUP_LIGHT_LEVEL == LV3)
 8001762:	2b03      	cmp	r3, #3
 8001764:	d03d      	beq.n	80017e2 <main+0x41a>
      else if(SUP_LIGHT_LEVEL == LV4)
 8001766:	2b04      	cmp	r3, #4
 8001768:	f47f aec1 	bne.w	80014ee <main+0x126>
        LIGHT_PWM_SUP(80);
 800176c:	2250      	movs	r2, #80	; 0x50
 800176e:	f8d9 3000 	ldr.w	r3, [r9]
 8001772:	63da      	str	r2, [r3, #60]	; 0x3c
 8001774:	e6bb      	b.n	80014ee <main+0x126>
      if(MENU_MODE == CITY)
 8001776:	2b00      	cmp	r3, #0
 8001778:	f47f aed1 	bne.w	800151e <main+0x156>
        if(SUP_LIGHT_LEVEL != LV0)
 800177c:	7822      	ldrb	r2, [r4, #0]
 800177e:	b362      	cbz	r2, 80017da <main+0x412>
        INF_LIGHT_LEVEL--;
 8001780:	4619      	mov	r1, r3
 8001782:	782a      	ldrb	r2, [r5, #0]
          SUP_LIGHT_LEVEL = LV0;
 8001784:	7023      	strb	r3, [r4, #0]
    if(INF_LIGHT_LEVEL > LV4)
 8001786:	2a04      	cmp	r2, #4
 8001788:	f63f aed6 	bhi.w	8001538 <main+0x170>
 800178c:	e6dc      	b.n	8001548 <main+0x180>
      if(MENU_MODE == TRAIL)
 800178e:	2b01      	cmp	r3, #1
 8001790:	f47f aed0 	bne.w	8001534 <main+0x16c>
        INF_LIGHT_LEVEL--;
 8001794:	3a01      	subs	r2, #1
 8001796:	b2d2      	uxtb	r2, r2
 8001798:	2301      	movs	r3, #1
 800179a:	702a      	strb	r2, [r5, #0]
 800179c:	e6ca      	b.n	8001534 <main+0x16c>
        LIGHT_PWM_SUP(20);
 800179e:	2214      	movs	r2, #20
 80017a0:	f8d9 3000 	ldr.w	r3, [r9]
 80017a4:	63da      	str	r2, [r3, #60]	; 0x3c
 80017a6:	e6a2      	b.n	80014ee <main+0x126>
        LIGHT_PWM_INF(20);
 80017a8:	2214      	movs	r2, #20
 80017aa:	f8d9 3000 	ldr.w	r3, [r9]
 80017ae:	641a      	str	r2, [r3, #64]	; 0x40
 80017b0:	e6a4      	b.n	80014fc <main+0x134>
        if(SUP_LIGHT_LEVEL == LV0) sprintf(Str_LCD, "Level 0");
 80017b2:	4b3e      	ldr	r3, [pc, #248]	; (80018ac <main+0x4e4>)
 80017b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017b8:	e88b 0003 	stmia.w	fp, {r0, r1}
 80017bc:	e67e      	b.n	80014bc <main+0xf4>
        LIGHT_PWM_SUP(40);
 80017be:	2228      	movs	r2, #40	; 0x28
 80017c0:	f8d9 3000 	ldr.w	r3, [r9]
 80017c4:	63da      	str	r2, [r3, #60]	; 0x3c
 80017c6:	e692      	b.n	80014ee <main+0x126>
        LIGHT_PWM_INF(40);
 80017c8:	2228      	movs	r2, #40	; 0x28
 80017ca:	f8d9 3000 	ldr.w	r3, [r9]
 80017ce:	641a      	str	r2, [r3, #64]	; 0x40
 80017d0:	e694      	b.n	80014fc <main+0x134>
 80017d2:	2300      	movs	r3, #0
 80017d4:	2000      	movs	r0, #0
 80017d6:	2100      	movs	r1, #0
 80017d8:	e787      	b.n	80016ea <main+0x322>
          SUP_LIGHT_LEVEL = LV4;
 80017da:	2104      	movs	r1, #4
        INF_LIGHT_LEVEL--;
 80017dc:	782a      	ldrb	r2, [r5, #0]
          SUP_LIGHT_LEVEL = LV4;
 80017de:	7021      	strb	r1, [r4, #0]
    else if(MINUS_BUTTON.State == SHORT_CLICK)
 80017e0:	e7d1      	b.n	8001786 <main+0x3be>
        LIGHT_PWM_SUP(60);
 80017e2:	223c      	movs	r2, #60	; 0x3c
 80017e4:	f8d9 3000 	ldr.w	r3, [r9]
 80017e8:	63da      	str	r2, [r3, #60]	; 0x3c
 80017ea:	e680      	b.n	80014ee <main+0x126>
        LIGHT_PWM_INF(60);
 80017ec:	223c      	movs	r2, #60	; 0x3c
 80017ee:	f8d9 3000 	ldr.w	r3, [r9]
 80017f2:	641a      	str	r2, [r3, #64]	; 0x40
 80017f4:	e682      	b.n	80014fc <main+0x134>
        else if(SUP_LIGHT_LEVEL == LV1) sprintf(Str_LCD, "Level 1");
 80017f6:	4b2e      	ldr	r3, [pc, #184]	; (80018b0 <main+0x4e8>)
 80017f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017fc:	e88b 0003 	stmia.w	fp, {r0, r1}
 8001800:	e65c      	b.n	80014bc <main+0xf4>
        else if(SUP_LIGHT_LEVEL == LV2) sprintf(Str_LCD, "Level 2");
 8001802:	4b2c      	ldr	r3, [pc, #176]	; (80018b4 <main+0x4ec>)
 8001804:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001808:	e88b 0003 	stmia.w	fp, {r0, r1}
 800180c:	e656      	b.n	80014bc <main+0xf4>
        else if(SUP_LIGHT_LEVEL == LV3) sprintf(Str_LCD, "Level 3");
 800180e:	4b2a      	ldr	r3, [pc, #168]	; (80018b8 <main+0x4f0>)
 8001810:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001814:	e88b 0003 	stmia.w	fp, {r0, r1}
 8001818:	e650      	b.n	80014bc <main+0xf4>
        else if(SUP_LIGHT_LEVEL == LV4) sprintf(Str_LCD, "Level 4");
 800181a:	4b28      	ldr	r3, [pc, #160]	; (80018bc <main+0x4f4>)
 800181c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001820:	e88b 0003 	stmia.w	fp, {r0, r1}
 8001824:	e64a      	b.n	80014bc <main+0xf4>
	return ( (inVal - inMin)*(outMax - outMin)/(inMax - inMin) + outMin );
 8001826:	9801      	ldr	r0, [sp, #4]
 8001828:	4916      	ldr	r1, [pc, #88]	; (8001884 <main+0x4bc>)
 800182a:	f7ff f981 	bl	8000b30 <__aeabi_fsub>
 800182e:	4917      	ldr	r1, [pc, #92]	; (800188c <main+0x4c4>)
 8001830:	f7ff fa88 	bl	8000d44 <__aeabi_fmul>
 8001834:	4922      	ldr	r1, [pc, #136]	; (80018c0 <main+0x4f8>)
 8001836:	f7ff fb39 	bl	8000eac <__aeabi_fdiv>
 800183a:	2100      	movs	r1, #0
 800183c:	f7ff f97a 	bl	8000b34 <__addsf3>
 8001840:	9001      	str	r0, [sp, #4]
			sprintf(Str_LCD, "%.0f%", BAT_PCT);
 8001842:	f7fe fdf1 	bl	8000428 <__aeabi_f2d>
 8001846:	9b01      	ldr	r3, [sp, #4]
 8001848:	e74f      	b.n	80016ea <main+0x322>
 800184a:	bf00      	nop
 800184c:	f3af 8000 	nop.w
 8001850:	66666666 	.word	0x66666666
 8001854:	400a6666 	.word	0x400a6666
 8001858:	00000000 	.word	0x00000000
 800185c:	40affe00 	.word	0x40affe00
 8001860:	851eb852 	.word	0x851eb852
 8001864:	3fe851eb 	.word	0x3fe851eb
 8001868:	47ae147b 	.word	0x47ae147b
 800186c:	3f647ae1 	.word	0x3f647ae1
 8001870:	200002d0 	.word	0x200002d0
 8001874:	20000208 	.word	0x20000208
 8001878:	200002d4 	.word	0x200002d4
 800187c:	40390000 	.word	0x40390000
 8001880:	20000334 	.word	0x20000334
 8001884:	40533333 	.word	0x40533333
 8001888:	40833333 	.word	0x40833333
 800188c:	42c80000 	.word	0x42c80000
 8001890:	40590000 	.word	0x40590000
 8001894:	200002d8 	.word	0x200002d8
 8001898:	08009eb8 	.word	0x08009eb8
 800189c:	20000008 	.word	0x20000008
 80018a0:	08009ec0 	.word	0x08009ec0
 80018a4:	200002e0 	.word	0x200002e0
 80018a8:	40010c00 	.word	0x40010c00
 80018ac:	08009e88 	.word	0x08009e88
 80018b0:	08009e90 	.word	0x08009e90
 80018b4:	08009e98 	.word	0x08009e98
 80018b8:	08009ea0 	.word	0x08009ea0
 80018bc:	08009ea8 	.word	0x08009ea8
 80018c0:	3f4ccccc 	.word	0x3f4ccccc

080018c4 <Error_Handler>:
 80018c4:	b672      	cpsid	i
  while (1)
 80018c6:	e7fe      	b.n	80018c6 <Error_Handler+0x2>

080018c8 <ssd1306_SetColor>:
	return SSD1306.Color;
}

void ssd1306_SetColor(SSD1306_COLOR color)
{
	SSD1306.Color = color;
 80018c8:	4b01      	ldr	r3, [pc, #4]	; (80018d0 <ssd1306_SetColor+0x8>)
 80018ca:	7158      	strb	r0, [r3, #5]
}
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	2000033c 	.word	0x2000033c

080018d4 <ssd1306_Init>:

//	Initialize the oled screen
uint8_t ssd1306_Init(void)
{
 80018d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 5, 1000) != HAL_OK)
 80018d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 80018dc:	b085      	sub	sp, #20
	if (HAL_I2C_IsDeviceReady(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 5, 1000) != HAL_OK)
 80018de:	2205      	movs	r2, #5
 80018e0:	2178      	movs	r1, #120	; 0x78
 80018e2:	4805      	ldr	r0, [pc, #20]	; (80018f8 <ssd1306_Init+0x24>)
 80018e4:	f001 ff52 	bl	800378c <HAL_I2C_IsDeviceReady>
 80018e8:	b150      	cbz	r0, 8001900 <ssd1306_Init+0x2c>
	{
		SSD1306.Initialized = 0;
 80018ea:	2300      	movs	r3, #0
		/* Return false */
		return 0;
 80018ec:	4618      	mov	r0, r3
		SSD1306.Initialized = 0;
 80018ee:	4a03      	ldr	r2, [pc, #12]	; (80018fc <ssd1306_Init+0x28>)
 80018f0:	7193      	strb	r3, [r2, #6]

	SSD1306.Initialized = 1;

	/* Return OK */
	return 1;
}
 80018f2:	b005      	add	sp, #20
 80018f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018f8:	2000027c 	.word	0x2000027c
 80018fc:	2000033c 	.word	0x2000033c
	HAL_Delay(100);
 8001900:	2064      	movs	r0, #100	; 0x64
 8001902:	f000 fe6b 	bl	80025dc <HAL_Delay>
	ssd1306_WriteCommand(DISPLAYOFF);
 8001906:	23ae      	movs	r3, #174	; 0xae
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001908:	4cc2      	ldr	r4, [pc, #776]	; (8001c14 <ssd1306_Init+0x340>)
 800190a:	f88d 300f 	strb.w	r3, [sp, #15]
 800190e:	4620      	mov	r0, r4
 8001910:	f002 ff48 	bl	80047a4 <HAL_I2C_GetState>
 8001914:	2820      	cmp	r0, #32
 8001916:	d1fa      	bne.n	800190e <ssd1306_Init+0x3a>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001918:	2301      	movs	r3, #1
 800191a:	48be      	ldr	r0, [pc, #760]	; (8001c14 <ssd1306_Init+0x340>)
 800191c:	f10d 060f 	add.w	r6, sp, #15
 8001920:	9301      	str	r3, [sp, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	2178      	movs	r1, #120	; 0x78
 8001926:	9600      	str	r6, [sp, #0]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001928:	4604      	mov	r4, r0
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 800192a:	f001 fe59 	bl	80035e0 <HAL_I2C_Mem_Write_DMA>
	ssd1306_WriteCommand(SETDISPLAYCLOCKDIV);
 800192e:	23d5      	movs	r3, #213	; 0xd5
 8001930:	f88d 300f 	strb.w	r3, [sp, #15]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001934:	4620      	mov	r0, r4
 8001936:	f002 ff35 	bl	80047a4 <HAL_I2C_GetState>
 800193a:	2820      	cmp	r0, #32
 800193c:	d1fa      	bne.n	8001934 <ssd1306_Init+0x60>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 800193e:	2301      	movs	r3, #1
 8001940:	48b4      	ldr	r0, [pc, #720]	; (8001c14 <ssd1306_Init+0x340>)
 8001942:	9301      	str	r3, [sp, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	2178      	movs	r1, #120	; 0x78
 8001948:	9600      	str	r6, [sp, #0]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 800194a:	4604      	mov	r4, r0
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 800194c:	f001 fe48 	bl	80035e0 <HAL_I2C_Mem_Write_DMA>
	ssd1306_WriteCommand(0xF0); // Increase speed of the display max ~96Hz
 8001950:	23f0      	movs	r3, #240	; 0xf0
 8001952:	f88d 300f 	strb.w	r3, [sp, #15]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001956:	4620      	mov	r0, r4
 8001958:	f002 ff24 	bl	80047a4 <HAL_I2C_GetState>
 800195c:	2820      	cmp	r0, #32
 800195e:	d1fa      	bne.n	8001956 <ssd1306_Init+0x82>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001960:	2301      	movs	r3, #1
 8001962:	48ac      	ldr	r0, [pc, #688]	; (8001c14 <ssd1306_Init+0x340>)
 8001964:	9301      	str	r3, [sp, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	2178      	movs	r1, #120	; 0x78
 800196a:	9600      	str	r6, [sp, #0]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 800196c:	4604      	mov	r4, r0
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 800196e:	f001 fe37 	bl	80035e0 <HAL_I2C_Mem_Write_DMA>
	ssd1306_WriteCommand(SETMULTIPLEX);
 8001972:	23a8      	movs	r3, #168	; 0xa8
 8001974:	f88d 300f 	strb.w	r3, [sp, #15]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001978:	4620      	mov	r0, r4
 800197a:	f002 ff13 	bl	80047a4 <HAL_I2C_GetState>
 800197e:	2820      	cmp	r0, #32
 8001980:	d1fa      	bne.n	8001978 <ssd1306_Init+0xa4>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001982:	2301      	movs	r3, #1
 8001984:	48a3      	ldr	r0, [pc, #652]	; (8001c14 <ssd1306_Init+0x340>)
 8001986:	9301      	str	r3, [sp, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	2178      	movs	r1, #120	; 0x78
 800198c:	9600      	str	r6, [sp, #0]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 800198e:	4604      	mov	r4, r0
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001990:	f001 fe26 	bl	80035e0 <HAL_I2C_Mem_Write_DMA>
static const uint16_t height(void)  { return SSD1306_HEIGHT; };
 8001994:	233f      	movs	r3, #63	; 0x3f
 8001996:	f88d 300f 	strb.w	r3, [sp, #15]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 800199a:	4620      	mov	r0, r4
 800199c:	f002 ff02 	bl	80047a4 <HAL_I2C_GetState>
 80019a0:	2820      	cmp	r0, #32
 80019a2:	d1fa      	bne.n	800199a <ssd1306_Init+0xc6>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 80019a4:	2301      	movs	r3, #1
 80019a6:	489b      	ldr	r0, [pc, #620]	; (8001c14 <ssd1306_Init+0x340>)
 80019a8:	9301      	str	r3, [sp, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	2178      	movs	r1, #120	; 0x78
 80019ae:	9600      	str	r6, [sp, #0]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 80019b0:	4604      	mov	r4, r0
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 80019b2:	f001 fe15 	bl	80035e0 <HAL_I2C_Mem_Write_DMA>
	ssd1306_WriteCommand(SETDISPLAYOFFSET);
 80019b6:	23d3      	movs	r3, #211	; 0xd3
 80019b8:	f88d 300f 	strb.w	r3, [sp, #15]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 80019bc:	4620      	mov	r0, r4
 80019be:	f002 fef1 	bl	80047a4 <HAL_I2C_GetState>
 80019c2:	2820      	cmp	r0, #32
 80019c4:	d1fa      	bne.n	80019bc <ssd1306_Init+0xe8>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 80019c6:	2301      	movs	r3, #1
 80019c8:	4892      	ldr	r0, [pc, #584]	; (8001c14 <ssd1306_Init+0x340>)
 80019ca:	9301      	str	r3, [sp, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	2178      	movs	r1, #120	; 0x78
 80019d0:	9600      	str	r6, [sp, #0]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 80019d2:	4604      	mov	r4, r0
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 80019d4:	f001 fe04 	bl	80035e0 <HAL_I2C_Mem_Write_DMA>
	ssd1306_WriteCommand(0x00);
 80019d8:	2300      	movs	r3, #0
 80019da:	f88d 300f 	strb.w	r3, [sp, #15]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 80019de:	4620      	mov	r0, r4
 80019e0:	f002 fee0 	bl	80047a4 <HAL_I2C_GetState>
 80019e4:	2820      	cmp	r0, #32
 80019e6:	d1fa      	bne.n	80019de <ssd1306_Init+0x10a>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 80019e8:	2301      	movs	r3, #1
 80019ea:	488a      	ldr	r0, [pc, #552]	; (8001c14 <ssd1306_Init+0x340>)
 80019ec:	9301      	str	r3, [sp, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	2178      	movs	r1, #120	; 0x78
 80019f2:	9600      	str	r6, [sp, #0]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 80019f4:	4604      	mov	r4, r0
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 80019f6:	f001 fdf3 	bl	80035e0 <HAL_I2C_Mem_Write_DMA>
	ssd1306_WriteCommand(SETSTARTLINE);
 80019fa:	2340      	movs	r3, #64	; 0x40
 80019fc:	f88d 300f 	strb.w	r3, [sp, #15]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001a00:	4620      	mov	r0, r4
 8001a02:	f002 fecf 	bl	80047a4 <HAL_I2C_GetState>
 8001a06:	2820      	cmp	r0, #32
 8001a08:	d1fa      	bne.n	8001a00 <ssd1306_Init+0x12c>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	4881      	ldr	r0, [pc, #516]	; (8001c14 <ssd1306_Init+0x340>)
 8001a0e:	9301      	str	r3, [sp, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	2178      	movs	r1, #120	; 0x78
 8001a14:	9600      	str	r6, [sp, #0]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001a16:	4604      	mov	r4, r0
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001a18:	f001 fde2 	bl	80035e0 <HAL_I2C_Mem_Write_DMA>
	ssd1306_WriteCommand(CHARGEPUMP);
 8001a1c:	238d      	movs	r3, #141	; 0x8d
 8001a1e:	f88d 300f 	strb.w	r3, [sp, #15]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001a22:	4620      	mov	r0, r4
 8001a24:	f002 febe 	bl	80047a4 <HAL_I2C_GetState>
 8001a28:	2820      	cmp	r0, #32
 8001a2a:	d1fa      	bne.n	8001a22 <ssd1306_Init+0x14e>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	4879      	ldr	r0, [pc, #484]	; (8001c14 <ssd1306_Init+0x340>)
 8001a30:	9301      	str	r3, [sp, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	2178      	movs	r1, #120	; 0x78
 8001a36:	9600      	str	r6, [sp, #0]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001a38:	4605      	mov	r5, r0
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001a3a:	f001 fdd1 	bl	80035e0 <HAL_I2C_Mem_Write_DMA>
	ssd1306_WriteCommand(0x14);
 8001a3e:	2314      	movs	r3, #20
 8001a40:	f88d 300f 	strb.w	r3, [sp, #15]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001a44:	4628      	mov	r0, r5
 8001a46:	f002 fead 	bl	80047a4 <HAL_I2C_GetState>
 8001a4a:	2820      	cmp	r0, #32
 8001a4c:	d1fa      	bne.n	8001a44 <ssd1306_Init+0x170>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001a4e:	2301      	movs	r3, #1
 8001a50:	4604      	mov	r4, r0
 8001a52:	4870      	ldr	r0, [pc, #448]	; (8001c14 <ssd1306_Init+0x340>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	2178      	movs	r1, #120	; 0x78
 8001a58:	9600      	str	r6, [sp, #0]
 8001a5a:	9301      	str	r3, [sp, #4]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001a5c:	4605      	mov	r5, r0
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001a5e:	f001 fdbf 	bl	80035e0 <HAL_I2C_Mem_Write_DMA>
	ssd1306_WriteCommand(MEMORYMODE);
 8001a62:	f88d 400f 	strb.w	r4, [sp, #15]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001a66:	4628      	mov	r0, r5
 8001a68:	f002 fe9c 	bl	80047a4 <HAL_I2C_GetState>
 8001a6c:	2820      	cmp	r0, #32
 8001a6e:	d1fa      	bne.n	8001a66 <ssd1306_Init+0x192>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001a70:	2301      	movs	r3, #1
 8001a72:	4868      	ldr	r0, [pc, #416]	; (8001c14 <ssd1306_Init+0x340>)
 8001a74:	9301      	str	r3, [sp, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	2178      	movs	r1, #120	; 0x78
 8001a7a:	9600      	str	r6, [sp, #0]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001a7c:	4604      	mov	r4, r0
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001a7e:	f001 fdaf 	bl	80035e0 <HAL_I2C_Mem_Write_DMA>
	ssd1306_WriteCommand(0x00);
 8001a82:	2300      	movs	r3, #0
 8001a84:	f88d 300f 	strb.w	r3, [sp, #15]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001a88:	4620      	mov	r0, r4
 8001a8a:	f002 fe8b 	bl	80047a4 <HAL_I2C_GetState>
 8001a8e:	2820      	cmp	r0, #32
 8001a90:	d1fa      	bne.n	8001a88 <ssd1306_Init+0x1b4>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001a92:	2301      	movs	r3, #1
 8001a94:	485f      	ldr	r0, [pc, #380]	; (8001c14 <ssd1306_Init+0x340>)
 8001a96:	9301      	str	r3, [sp, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2178      	movs	r1, #120	; 0x78
 8001a9c:	9600      	str	r6, [sp, #0]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001a9e:	4604      	mov	r4, r0
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001aa0:	f001 fd9e 	bl	80035e0 <HAL_I2C_Mem_Write_DMA>
	ssd1306_WriteCommand(SEGREMAP);
 8001aa4:	23a0      	movs	r3, #160	; 0xa0
 8001aa6:	f88d 300f 	strb.w	r3, [sp, #15]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001aaa:	4620      	mov	r0, r4
 8001aac:	f002 fe7a 	bl	80047a4 <HAL_I2C_GetState>
 8001ab0:	2820      	cmp	r0, #32
 8001ab2:	d1fa      	bne.n	8001aaa <ssd1306_Init+0x1d6>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	4857      	ldr	r0, [pc, #348]	; (8001c14 <ssd1306_Init+0x340>)
 8001ab8:	9301      	str	r3, [sp, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	2178      	movs	r1, #120	; 0x78
 8001abe:	9600      	str	r6, [sp, #0]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001ac0:	4604      	mov	r4, r0
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001ac2:	f001 fd8d 	bl	80035e0 <HAL_I2C_Mem_Write_DMA>
	ssd1306_WriteCommand(COMSCANINC);
 8001ac6:	23c0      	movs	r3, #192	; 0xc0
 8001ac8:	f88d 300f 	strb.w	r3, [sp, #15]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001acc:	4620      	mov	r0, r4
 8001ace:	f002 fe69 	bl	80047a4 <HAL_I2C_GetState>
 8001ad2:	2820      	cmp	r0, #32
 8001ad4:	d1fa      	bne.n	8001acc <ssd1306_Init+0x1f8>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	484e      	ldr	r0, [pc, #312]	; (8001c14 <ssd1306_Init+0x340>)
 8001ada:	9301      	str	r3, [sp, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	2178      	movs	r1, #120	; 0x78
 8001ae0:	9600      	str	r6, [sp, #0]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001ae2:	4604      	mov	r4, r0
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001ae4:	f001 fd7c 	bl	80035e0 <HAL_I2C_Mem_Write_DMA>
	ssd1306_WriteCommand(SETCOMPINS);
 8001ae8:	23da      	movs	r3, #218	; 0xda
 8001aea:	f88d 300f 	strb.w	r3, [sp, #15]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001aee:	4620      	mov	r0, r4
 8001af0:	f002 fe58 	bl	80047a4 <HAL_I2C_GetState>
 8001af4:	2820      	cmp	r0, #32
 8001af6:	d1fa      	bne.n	8001aee <ssd1306_Init+0x21a>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001af8:	2301      	movs	r3, #1
	if (display_geometry == GEOMETRY_128_64)
 8001afa:	4d47      	ldr	r5, [pc, #284]	; (8001c18 <ssd1306_Init+0x344>)
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001afc:	9301      	str	r3, [sp, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	2178      	movs	r1, #120	; 0x78
 8001b02:	4844      	ldr	r0, [pc, #272]	; (8001c14 <ssd1306_Init+0x340>)
 8001b04:	9600      	str	r6, [sp, #0]
 8001b06:	f001 fd6b 	bl	80035e0 <HAL_I2C_Mem_Write_DMA>
	if (display_geometry == GEOMETRY_128_64)
 8001b0a:	782b      	ldrb	r3, [r5, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f000 8107 	beq.w	8001d20 <ssd1306_Init+0x44c>
	else if (display_geometry == GEOMETRY_128_32)
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	f000 813a 	beq.w	8001d8c <ssd1306_Init+0x4b8>
	ssd1306_WriteCommand(SETCONTRAST);
 8001b18:	2381      	movs	r3, #129	; 0x81
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001b1a:	4c3e      	ldr	r4, [pc, #248]	; (8001c14 <ssd1306_Init+0x340>)
 8001b1c:	f88d 300f 	strb.w	r3, [sp, #15]
 8001b20:	4620      	mov	r0, r4
 8001b22:	f002 fe3f 	bl	80047a4 <HAL_I2C_GetState>
 8001b26:	2820      	cmp	r0, #32
 8001b28:	d1fa      	bne.n	8001b20 <ssd1306_Init+0x24c>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	9301      	str	r3, [sp, #4]
 8001b30:	2178      	movs	r1, #120	; 0x78
 8001b32:	4838      	ldr	r0, [pc, #224]	; (8001c14 <ssd1306_Init+0x340>)
 8001b34:	9600      	str	r6, [sp, #0]
 8001b36:	f001 fd53 	bl	80035e0 <HAL_I2C_Mem_Write_DMA>
	if (display_geometry == GEOMETRY_128_64)
 8001b3a:	782b      	ldrb	r3, [r5, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 8101 	beq.w	8001d44 <ssd1306_Init+0x470>
	else if (display_geometry == GEOMETRY_128_32)
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	f000 8110 	beq.w	8001d68 <ssd1306_Init+0x494>
	ssd1306_WriteCommand(SETPRECHARGE);
 8001b48:	23d9      	movs	r3, #217	; 0xd9
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001b4a:	4c32      	ldr	r4, [pc, #200]	; (8001c14 <ssd1306_Init+0x340>)
 8001b4c:	f88d 300f 	strb.w	r3, [sp, #15]
 8001b50:	4620      	mov	r0, r4
 8001b52:	f002 fe27 	bl	80047a4 <HAL_I2C_GetState>
 8001b56:	2820      	cmp	r0, #32
 8001b58:	d1fa      	bne.n	8001b50 <ssd1306_Init+0x27c>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	482d      	ldr	r0, [pc, #180]	; (8001c14 <ssd1306_Init+0x340>)
 8001b5e:	9301      	str	r3, [sp, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	2178      	movs	r1, #120	; 0x78
 8001b64:	9600      	str	r6, [sp, #0]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001b66:	4604      	mov	r4, r0
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001b68:	f001 fd3a 	bl	80035e0 <HAL_I2C_Mem_Write_DMA>
	ssd1306_WriteCommand(0xF1);
 8001b6c:	23f1      	movs	r3, #241	; 0xf1
 8001b6e:	f88d 300f 	strb.w	r3, [sp, #15]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001b72:	4620      	mov	r0, r4
 8001b74:	f002 fe16 	bl	80047a4 <HAL_I2C_GetState>
 8001b78:	2820      	cmp	r0, #32
 8001b7a:	d1fa      	bne.n	8001b72 <ssd1306_Init+0x29e>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	4825      	ldr	r0, [pc, #148]	; (8001c14 <ssd1306_Init+0x340>)
 8001b80:	9301      	str	r3, [sp, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	2178      	movs	r1, #120	; 0x78
 8001b86:	9600      	str	r6, [sp, #0]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001b88:	4604      	mov	r4, r0
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001b8a:	f001 fd29 	bl	80035e0 <HAL_I2C_Mem_Write_DMA>
	ssd1306_WriteCommand(SETVCOMDETECT); //0xDB, (additionally needed to lower the contrast)
 8001b8e:	23db      	movs	r3, #219	; 0xdb
 8001b90:	f88d 300f 	strb.w	r3, [sp, #15]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001b94:	4620      	mov	r0, r4
 8001b96:	f002 fe05 	bl	80047a4 <HAL_I2C_GetState>
 8001b9a:	2820      	cmp	r0, #32
 8001b9c:	d1fa      	bne.n	8001b94 <ssd1306_Init+0x2c0>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	481c      	ldr	r0, [pc, #112]	; (8001c14 <ssd1306_Init+0x340>)
 8001ba2:	9301      	str	r3, [sp, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2178      	movs	r1, #120	; 0x78
 8001ba8:	9600      	str	r6, [sp, #0]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001baa:	4604      	mov	r4, r0
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001bac:	f001 fd18 	bl	80035e0 <HAL_I2C_Mem_Write_DMA>
	ssd1306_WriteCommand(0x40);	        //0x40 default, to lower the contrast, put 0
 8001bb0:	2340      	movs	r3, #64	; 0x40
 8001bb2:	f88d 300f 	strb.w	r3, [sp, #15]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001bb6:	4620      	mov	r0, r4
 8001bb8:	f002 fdf4 	bl	80047a4 <HAL_I2C_GetState>
 8001bbc:	2820      	cmp	r0, #32
 8001bbe:	d1fa      	bne.n	8001bb6 <ssd1306_Init+0x2e2>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	4814      	ldr	r0, [pc, #80]	; (8001c14 <ssd1306_Init+0x340>)
 8001bc4:	9301      	str	r3, [sp, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2178      	movs	r1, #120	; 0x78
 8001bca:	9600      	str	r6, [sp, #0]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001bcc:	4604      	mov	r4, r0
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001bce:	f001 fd07 	bl	80035e0 <HAL_I2C_Mem_Write_DMA>
	ssd1306_WriteCommand(DISPLAYALLON_RESUME);
 8001bd2:	23a4      	movs	r3, #164	; 0xa4
 8001bd4:	f88d 300f 	strb.w	r3, [sp, #15]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001bd8:	4620      	mov	r0, r4
 8001bda:	f002 fde3 	bl	80047a4 <HAL_I2C_GetState>
 8001bde:	2820      	cmp	r0, #32
 8001be0:	d1fa      	bne.n	8001bd8 <ssd1306_Init+0x304>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001be2:	2301      	movs	r3, #1
 8001be4:	480b      	ldr	r0, [pc, #44]	; (8001c14 <ssd1306_Init+0x340>)
 8001be6:	9301      	str	r3, [sp, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	2178      	movs	r1, #120	; 0x78
 8001bec:	9600      	str	r6, [sp, #0]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001bee:	4604      	mov	r4, r0
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001bf0:	f001 fcf6 	bl	80035e0 <HAL_I2C_Mem_Write_DMA>
	ssd1306_WriteCommand(NORMALDISPLAY);
 8001bf4:	23a6      	movs	r3, #166	; 0xa6
 8001bf6:	f88d 300f 	strb.w	r3, [sp, #15]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001bfa:	4620      	mov	r0, r4
 8001bfc:	f002 fdd2 	bl	80047a4 <HAL_I2C_GetState>
 8001c00:	2820      	cmp	r0, #32
 8001c02:	d1fa      	bne.n	8001bfa <ssd1306_Init+0x326>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001c04:	2301      	movs	r3, #1
 8001c06:	4803      	ldr	r0, [pc, #12]	; (8001c14 <ssd1306_Init+0x340>)
 8001c08:	9301      	str	r3, [sp, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2178      	movs	r1, #120	; 0x78
 8001c0e:	9600      	str	r6, [sp, #0]
 8001c10:	e004      	b.n	8001c1c <ssd1306_Init+0x348>
 8001c12:	bf00      	nop
 8001c14:	2000027c 	.word	0x2000027c
 8001c18:	20000764 	.word	0x20000764
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001c1c:	4604      	mov	r4, r0
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001c1e:	f001 fcdf 	bl	80035e0 <HAL_I2C_Mem_Write_DMA>
	ssd1306_WriteCommand(0x2e);            // stop scroll
 8001c22:	232e      	movs	r3, #46	; 0x2e
 8001c24:	f88d 300f 	strb.w	r3, [sp, #15]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001c28:	4620      	mov	r0, r4
 8001c2a:	f002 fdbb 	bl	80047a4 <HAL_I2C_GetState>
 8001c2e:	2820      	cmp	r0, #32
 8001c30:	d1fa      	bne.n	8001c28 <ssd1306_Init+0x354>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001c32:	2301      	movs	r3, #1
 8001c34:	485a      	ldr	r0, [pc, #360]	; (8001da0 <ssd1306_Init+0x4cc>)
 8001c36:	9301      	str	r3, [sp, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2178      	movs	r1, #120	; 0x78
 8001c3c:	9600      	str	r6, [sp, #0]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001c3e:	4604      	mov	r4, r0
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001c40:	f001 fcce 	bl	80035e0 <HAL_I2C_Mem_Write_DMA>
	ssd1306_WriteCommand(DISPLAYON);
 8001c44:	23af      	movs	r3, #175	; 0xaf
 8001c46:	f88d 300f 	strb.w	r3, [sp, #15]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001c4a:	4620      	mov	r0, r4
 8001c4c:	f002 fdaa 	bl	80047a4 <HAL_I2C_GetState>
 8001c50:	2820      	cmp	r0, #32
 8001c52:	d1fa      	bne.n	8001c4a <ssd1306_Init+0x376>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001c54:	2200      	movs	r2, #0
 8001c56:	2701      	movs	r7, #1
	SSD1306.CurrentX = 0;
 8001c58:	4691      	mov	r9, r2
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001c5a:	4851      	ldr	r0, [pc, #324]	; (8001da0 <ssd1306_Init+0x4cc>)
 8001c5c:	2178      	movs	r1, #120	; 0x78
 8001c5e:	463b      	mov	r3, r7
 8001c60:	9600      	str	r6, [sp, #0]
 8001c62:	9701      	str	r7, [sp, #4]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001c64:	4604      	mov	r4, r0
 8001c66:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8001da4 <ssd1306_Init+0x4d0>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001c6a:	f001 fcb9 	bl	80035e0 <HAL_I2C_Mem_Write_DMA>
	SSD1306.CurrentX = 0;
 8001c6e:	4b4e      	ldr	r3, [pc, #312]	; (8001da8 <ssd1306_Init+0x4d4>)
	memset(SSD1306_Buffer, 0, SSD1306_BUFFER_SIZE);
 8001c70:	f44f 6284 	mov.w	r2, #1056	; 0x420
 8001c74:	4649      	mov	r1, r9
 8001c76:	4640      	mov	r0, r8
	SSD1306.CurrentX = 0;
 8001c78:	f8c3 9000 	str.w	r9, [r3]
	memset(SSD1306_Buffer, 0, SSD1306_BUFFER_SIZE);
 8001c7c:	25b0      	movs	r5, #176	; 0xb0
 8001c7e:	f04f 0b10 	mov.w	fp, #16

static void ssd1306_WriteData(uint8_t* data, uint16_t size)
{
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size);
 8001c82:	f04f 0a84 	mov.w	sl, #132	; 0x84
	SSD1306.Color = Black;
 8001c86:	f883 9005 	strb.w	r9, [r3, #5]
	memset(SSD1306_Buffer, 0, SSD1306_BUFFER_SIZE);
 8001c8a:	f003 fca3 	bl	80055d4 <memset>
		ssd1306_WriteCommand(0xB0 + i);
 8001c8e:	f88d 500f 	strb.w	r5, [sp, #15]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001c92:	4620      	mov	r0, r4
 8001c94:	f002 fd86 	bl	80047a4 <HAL_I2C_GetState>
 8001c98:	2820      	cmp	r0, #32
 8001c9a:	d1fa      	bne.n	8001c92 <ssd1306_Init+0x3be>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2178      	movs	r1, #120	; 0x78
 8001ca2:	4620      	mov	r0, r4
 8001ca4:	e9cd 6700 	strd	r6, r7, [sp]
 8001ca8:	f001 fc9a 	bl	80035e0 <HAL_I2C_Mem_Write_DMA>
		ssd1306_WriteCommand(SETLOWCOLUMN);
 8001cac:	f88d 900f 	strb.w	r9, [sp, #15]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001cb0:	4620      	mov	r0, r4
 8001cb2:	f002 fd77 	bl	80047a4 <HAL_I2C_GetState>
 8001cb6:	2820      	cmp	r0, #32
 8001cb8:	d1fa      	bne.n	8001cb0 <ssd1306_Init+0x3dc>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001cba:	2301      	movs	r3, #1
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	2178      	movs	r1, #120	; 0x78
 8001cc0:	4620      	mov	r0, r4
 8001cc2:	e9cd 6700 	strd	r6, r7, [sp]
 8001cc6:	f001 fc8b 	bl	80035e0 <HAL_I2C_Mem_Write_DMA>
		ssd1306_WriteCommand(SETHIGHCOLUMN);
 8001cca:	f88d b00f 	strb.w	fp, [sp, #15]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001cce:	4620      	mov	r0, r4
 8001cd0:	f002 fd68 	bl	80047a4 <HAL_I2C_GetState>
 8001cd4:	2820      	cmp	r0, #32
 8001cd6:	d1fa      	bne.n	8001cce <ssd1306_Init+0x3fa>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001cd8:	2301      	movs	r3, #1
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2178      	movs	r1, #120	; 0x78
 8001cde:	4620      	mov	r0, r4
 8001ce0:	e9cd 6700 	strd	r6, r7, [sp]
 8001ce4:	f001 fc7c 	bl	80035e0 <HAL_I2C_Mem_Write_DMA>
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001ce8:	4620      	mov	r0, r4
 8001cea:	f002 fd5b 	bl	80047a4 <HAL_I2C_GetState>
 8001cee:	2820      	cmp	r0, #32
 8001cf0:	d1fa      	bne.n	8001ce8 <ssd1306_Init+0x414>
	for (i = 0; i < 8; i++)
 8001cf2:	3501      	adds	r5, #1
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size);
 8001cf4:	f8cd 8000 	str.w	r8, [sp]
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	2240      	movs	r2, #64	; 0x40
 8001cfc:	2178      	movs	r1, #120	; 0x78
 8001cfe:	4620      	mov	r0, r4
 8001d00:	f8cd a004 	str.w	sl, [sp, #4]
	for (i = 0; i < 8; i++)
 8001d04:	b2ed      	uxtb	r5, r5
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size);
 8001d06:	f001 fc6b 	bl	80035e0 <HAL_I2C_Mem_Write_DMA>
	for (i = 0; i < 8; i++)
 8001d0a:	2db8      	cmp	r5, #184	; 0xb8
 8001d0c:	f108 0884 	add.w	r8, r8, #132	; 0x84
 8001d10:	d1bd      	bne.n	8001c8e <ssd1306_Init+0x3ba>
	SSD1306.Initialized = 1;
 8001d12:	2301      	movs	r3, #1
	return 1;
 8001d14:	4618      	mov	r0, r3
	SSD1306.Initialized = 1;
 8001d16:	4a24      	ldr	r2, [pc, #144]	; (8001da8 <ssd1306_Init+0x4d4>)
 8001d18:	7193      	strb	r3, [r2, #6]
}
 8001d1a:	b005      	add	sp, #20
 8001d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  ssd1306_WriteCommand(0x12);
 8001d20:	2312      	movs	r3, #18
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001d22:	4c1f      	ldr	r4, [pc, #124]	; (8001da0 <ssd1306_Init+0x4cc>)
 8001d24:	f88d 300f 	strb.w	r3, [sp, #15]
 8001d28:	4620      	mov	r0, r4
 8001d2a:	f002 fd3b 	bl	80047a4 <HAL_I2C_GetState>
 8001d2e:	2820      	cmp	r0, #32
 8001d30:	d1fa      	bne.n	8001d28 <ssd1306_Init+0x454>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001d32:	2301      	movs	r3, #1
 8001d34:	2200      	movs	r2, #0
 8001d36:	2178      	movs	r1, #120	; 0x78
 8001d38:	9600      	str	r6, [sp, #0]
 8001d3a:	9301      	str	r3, [sp, #4]
 8001d3c:	4818      	ldr	r0, [pc, #96]	; (8001da0 <ssd1306_Init+0x4cc>)
 8001d3e:	f001 fc4f 	bl	80035e0 <HAL_I2C_Mem_Write_DMA>
 8001d42:	e6e9      	b.n	8001b18 <ssd1306_Init+0x244>
	  ssd1306_WriteCommand(0xCF);
 8001d44:	23cf      	movs	r3, #207	; 0xcf
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001d46:	4c16      	ldr	r4, [pc, #88]	; (8001da0 <ssd1306_Init+0x4cc>)
 8001d48:	f88d 300f 	strb.w	r3, [sp, #15]
 8001d4c:	4620      	mov	r0, r4
 8001d4e:	f002 fd29 	bl	80047a4 <HAL_I2C_GetState>
 8001d52:	2820      	cmp	r0, #32
 8001d54:	d1fa      	bne.n	8001d4c <ssd1306_Init+0x478>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001d56:	2301      	movs	r3, #1
 8001d58:	2200      	movs	r2, #0
 8001d5a:	2178      	movs	r1, #120	; 0x78
 8001d5c:	9600      	str	r6, [sp, #0]
 8001d5e:	9301      	str	r3, [sp, #4]
 8001d60:	480f      	ldr	r0, [pc, #60]	; (8001da0 <ssd1306_Init+0x4cc>)
 8001d62:	f001 fc3d 	bl	80035e0 <HAL_I2C_Mem_Write_DMA>
 8001d66:	e6ef      	b.n	8001b48 <ssd1306_Init+0x274>
	  ssd1306_WriteCommand(0x8F);
 8001d68:	238f      	movs	r3, #143	; 0x8f
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001d6a:	4c0d      	ldr	r4, [pc, #52]	; (8001da0 <ssd1306_Init+0x4cc>)
 8001d6c:	f88d 300f 	strb.w	r3, [sp, #15]
 8001d70:	4620      	mov	r0, r4
 8001d72:	f002 fd17 	bl	80047a4 <HAL_I2C_GetState>
 8001d76:	2820      	cmp	r0, #32
 8001d78:	d1fa      	bne.n	8001d70 <ssd1306_Init+0x49c>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2178      	movs	r1, #120	; 0x78
 8001d80:	e9cd 6300 	strd	r6, r3, [sp]
 8001d84:	4806      	ldr	r0, [pc, #24]	; (8001da0 <ssd1306_Init+0x4cc>)
 8001d86:	f001 fc2b 	bl	80035e0 <HAL_I2C_Mem_Write_DMA>
 8001d8a:	e6dd      	b.n	8001b48 <ssd1306_Init+0x274>
	  ssd1306_WriteCommand(0x02);
 8001d8c:	2302      	movs	r3, #2
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001d8e:	4c04      	ldr	r4, [pc, #16]	; (8001da0 <ssd1306_Init+0x4cc>)
 8001d90:	f88d 300f 	strb.w	r3, [sp, #15]
 8001d94:	4620      	mov	r0, r4
 8001d96:	f002 fd05 	bl	80047a4 <HAL_I2C_GetState>
 8001d9a:	2820      	cmp	r0, #32
 8001d9c:	d1fa      	bne.n	8001d94 <ssd1306_Init+0x4c0>
 8001d9e:	e7c8      	b.n	8001d32 <ssd1306_Init+0x45e>
 8001da0:	2000027c 	.word	0x2000027c
 8001da4:	20000344 	.word	0x20000344
 8001da8:	2000033c 	.word	0x2000033c

08001dac <ssd1306_UpdateScreen>:
{
 8001dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001db0:	25b0      	movs	r5, #176	; 0xb0
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001db2:	f04f 0801 	mov.w	r8, #1
 8001db6:	f04f 0b00 	mov.w	fp, #0
 8001dba:	f04f 0a10 	mov.w	sl, #16
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size);
 8001dbe:	f04f 0984 	mov.w	r9, #132	; 0x84
{
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	4f23      	ldr	r7, [pc, #140]	; (8001e54 <ssd1306_UpdateScreen+0xa8>)
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001dc6:	4c24      	ldr	r4, [pc, #144]	; (8001e58 <ssd1306_UpdateScreen+0xac>)
 8001dc8:	f10d 060f 	add.w	r6, sp, #15
		ssd1306_WriteCommand(0xB0 + i);
 8001dcc:	f88d 500f 	strb.w	r5, [sp, #15]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001dd0:	4620      	mov	r0, r4
 8001dd2:	f002 fce7 	bl	80047a4 <HAL_I2C_GetState>
 8001dd6:	2820      	cmp	r0, #32
 8001dd8:	d1fa      	bne.n	8001dd0 <ssd1306_UpdateScreen+0x24>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001dda:	2301      	movs	r3, #1
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2178      	movs	r1, #120	; 0x78
 8001de0:	4620      	mov	r0, r4
 8001de2:	e9cd 6800 	strd	r6, r8, [sp]
 8001de6:	f001 fbfb 	bl	80035e0 <HAL_I2C_Mem_Write_DMA>
		ssd1306_WriteCommand(SETLOWCOLUMN);
 8001dea:	f88d b00f 	strb.w	fp, [sp, #15]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001dee:	4620      	mov	r0, r4
 8001df0:	f002 fcd8 	bl	80047a4 <HAL_I2C_GetState>
 8001df4:	2820      	cmp	r0, #32
 8001df6:	d1fa      	bne.n	8001dee <ssd1306_UpdateScreen+0x42>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001df8:	2301      	movs	r3, #1
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2178      	movs	r1, #120	; 0x78
 8001dfe:	4620      	mov	r0, r4
 8001e00:	e9cd 6800 	strd	r6, r8, [sp]
 8001e04:	f001 fbec 	bl	80035e0 <HAL_I2C_Mem_Write_DMA>
		ssd1306_WriteCommand(SETHIGHCOLUMN);
 8001e08:	f88d a00f 	strb.w	sl, [sp, #15]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001e0c:	4620      	mov	r0, r4
 8001e0e:	f002 fcc9 	bl	80047a4 <HAL_I2C_GetState>
 8001e12:	2820      	cmp	r0, #32
 8001e14:	d1fa      	bne.n	8001e0c <ssd1306_UpdateScreen+0x60>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8001e16:	2301      	movs	r3, #1
 8001e18:	2200      	movs	r2, #0
 8001e1a:	2178      	movs	r1, #120	; 0x78
 8001e1c:	4620      	mov	r0, r4
 8001e1e:	e9cd 6800 	strd	r6, r8, [sp]
 8001e22:	f001 fbdd 	bl	80035e0 <HAL_I2C_Mem_Write_DMA>
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001e26:	4620      	mov	r0, r4
 8001e28:	f002 fcbc 	bl	80047a4 <HAL_I2C_GetState>
 8001e2c:	2820      	cmp	r0, #32
 8001e2e:	d1fa      	bne.n	8001e26 <ssd1306_UpdateScreen+0x7a>
	for (i = 0; i < 8; i++)
 8001e30:	3501      	adds	r5, #1
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size);
 8001e32:	9700      	str	r7, [sp, #0]
 8001e34:	2301      	movs	r3, #1
 8001e36:	2240      	movs	r2, #64	; 0x40
 8001e38:	2178      	movs	r1, #120	; 0x78
 8001e3a:	4620      	mov	r0, r4
 8001e3c:	f8cd 9004 	str.w	r9, [sp, #4]
	for (i = 0; i < 8; i++)
 8001e40:	b2ed      	uxtb	r5, r5
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size);
 8001e42:	f001 fbcd 	bl	80035e0 <HAL_I2C_Mem_Write_DMA>
	for (i = 0; i < 8; i++)
 8001e46:	2db8      	cmp	r5, #184	; 0xb8
 8001e48:	f107 0784 	add.w	r7, r7, #132	; 0x84
 8001e4c:	d1be      	bne.n	8001dcc <ssd1306_UpdateScreen+0x20>
}
 8001e4e:	b005      	add	sp, #20
 8001e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e54:	20000344 	.word	0x20000344
 8001e58:	2000027c 	.word	0x2000027c

08001e5c <ssd1306_WriteChar>:
{
 8001e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e60:	b089      	sub	sp, #36	; 0x24
 8001e62:	ab08      	add	r3, sp, #32
 8001e64:	e903 0006 	stmdb	r3, {r1, r2}
	if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001e68:	4d74      	ldr	r5, [pc, #464]	; (800203c <ssd1306_WriteChar+0x1e0>)
 8001e6a:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8001e6e:	882a      	ldrh	r2, [r5, #0]
 8001e70:	1913      	adds	r3, r2, r4
 8001e72:	2b83      	cmp	r3, #131	; 0x83
{
 8001e74:	e9cd 0304 	strd	r0, r3, [sp, #16]
	if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001e78:	dc78      	bgt.n	8001f6c <ssd1306_WriteChar+0x110>
 8001e7a:	f89d 3019 	ldrb.w	r3, [sp, #25]
		height() <= (SSD1306.CurrentY + Font.FontHeight))
 8001e7e:	f8b5 e002 	ldrh.w	lr, [r5, #2]
 8001e82:	eb0e 0103 	add.w	r1, lr, r3
	if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001e86:	293f      	cmp	r1, #63	; 0x3f
 8001e88:	dc70      	bgt.n	8001f6c <ssd1306_WriteChar+0x110>
	for (i = 0; i < Font.FontHeight; i++)
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d067      	beq.n	8001f5e <ssd1306_WriteChar+0x102>
	if (SSD1306.Inverted)
 8001e8e:	2700      	movs	r7, #0
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001e90:	f1a0 0820 	sub.w	r8, r0, #32
 8001e94:	fb03 f808 	mul.w	r8, r3, r8
				ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 8001e98:	b2d2      	uxtb	r2, r2
 8001e9a:	4443      	add	r3, r8
 8001e9c:	9202      	str	r2, [sp, #8]
 8001e9e:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001ea2:	9a07      	ldr	r2, [sp, #28]
 8001ea4:	f108 38ff 	add.w	r8, r8, #4294967295
 8001ea8:	eb02 0848 	add.w	r8, r2, r8, lsl #1
 8001eac:	3a02      	subs	r2, #2
 8001eae:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001eb2:	9301      	str	r3, [sp, #4]
	if (SSD1306.Inverted)
 8001eb4:	792b      	ldrb	r3, [r5, #4]
 8001eb6:	796a      	ldrb	r2, [r5, #5]
		SSD1306_Buffer[x + (y / 8) * width()] |= 1 << (y % 8);
 8001eb8:	4e61      	ldr	r6, [pc, #388]	; (8002040 <ssd1306_WriteChar+0x1e4>)
 8001eba:	fa5f fe8e 	uxtb.w	lr, lr
	if (SSD1306.Inverted)
 8001ebe:	9303      	str	r3, [sp, #12]
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001ec0:	f838 0f02 	ldrh.w	r0, [r8, #2]!
		for (j = 0; j < Font.FontWidth; j++)
 8001ec4:	2c00      	cmp	r4, #0
 8001ec6:	d040      	beq.n	8001f4a <ssd1306_WriteChar+0xee>
		SSD1306_Buffer[x + (y / 8) * width()] &= ~(1 << (y % 8));
 8001ec8:	2301      	movs	r3, #1
 8001eca:	f00e 0c07 	and.w	ip, lr, #7
 8001ece:	fa03 fc0c 	lsl.w	ip, r3, ip
 8001ed2:	ea4f 05de 	mov.w	r5, lr, lsr #3
 8001ed6:	fa4f fc8c 	sxtb.w	ip, ip
 8001eda:	eb05 1545 	add.w	r5, r5, r5, lsl #5
 8001ede:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
 8001ee2:	ea6f 090c 	mvn.w	r9, ip
				ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 8001ee6:	9b02      	ldr	r3, [sp, #8]
		SSD1306_Buffer[x + (y / 8) * width()] &= ~(1 << (y % 8));
 8001ee8:	ea4f 0585 	mov.w	r5, r5, lsl #2
 8001eec:	d874      	bhi.n	8001fd8 <ssd1306_WriteChar+0x17c>
 8001eee:	9903      	ldr	r1, [sp, #12]
 8001ef0:	2900      	cmp	r1, #0
 8001ef2:	d052      	beq.n	8001f9a <ssd1306_WriteChar+0x13e>
		for (j = 0; j < Font.FontWidth; j++)
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	e012      	b.n	8001f1e <ssd1306_WriteChar+0xc2>
	if (x >= ssd1306_GetWidth() || y >= ssd1306_GetHeight())
 8001ef8:	2b83      	cmp	r3, #131	; 0x83
 8001efa:	d865      	bhi.n	8001fc8 <ssd1306_WriteChar+0x16c>
	if (color == White)
 8001efc:	2a00      	cmp	r2, #0
 8001efe:	f040 808b 	bne.w	8002018 <ssd1306_WriteChar+0x1bc>
		SSD1306_Buffer[x + (y / 8) * width()] &= ~(1 << (y % 8));
 8001f02:	eb03 0a05 	add.w	sl, r3, r5
 8001f06:	f816 700a 	ldrb.w	r7, [r6, sl]
 8001f0a:	ea09 0707 	and.w	r7, r9, r7
 8001f0e:	f806 700a 	strb.w	r7, [r6, sl]
		SSD1306_Buffer[x + (y / 8) * width()] |= 1 << (y % 8);
 8001f12:	2701      	movs	r7, #1
		for (j = 0; j < Font.FontWidth; j++)
 8001f14:	3101      	adds	r1, #1
 8001f16:	3301      	adds	r3, #1
 8001f18:	428c      	cmp	r4, r1
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	d015      	beq.n	8001f4a <ssd1306_WriteChar+0xee>
			if ((b << j) & 0x8000)
 8001f1e:	fa00 fa01 	lsl.w	sl, r0, r1
 8001f22:	f41a 4f00 	tst.w	sl, #32768	; 0x8000
 8001f26:	d0e7      	beq.n	8001ef8 <ssd1306_WriteChar+0x9c>
	if (x >= ssd1306_GetWidth() || y >= ssd1306_GetHeight())
 8001f28:	2b83      	cmp	r3, #131	; 0x83
 8001f2a:	d8f3      	bhi.n	8001f14 <ssd1306_WriteChar+0xb8>
	if (color == White)
 8001f2c:	2a00      	cmp	r2, #0
 8001f2e:	d06a      	beq.n	8002006 <ssd1306_WriteChar+0x1aa>
		SSD1306_Buffer[x + (y / 8) * width()] &= ~(1 << (y % 8));
 8001f30:	eb03 0b05 	add.w	fp, r3, r5
 8001f34:	f816 a00b 	ldrb.w	sl, [r6, fp]
		for (j = 0; j < Font.FontWidth; j++)
 8001f38:	3101      	adds	r1, #1
		SSD1306_Buffer[x + (y / 8) * width()] &= ~(1 << (y % 8));
 8001f3a:	ea09 0a0a 	and.w	sl, r9, sl
		for (j = 0; j < Font.FontWidth; j++)
 8001f3e:	3301      	adds	r3, #1
 8001f40:	428c      	cmp	r4, r1
		SSD1306_Buffer[x + (y / 8) * width()] &= ~(1 << (y % 8));
 8001f42:	f806 a00b 	strb.w	sl, [r6, fp]
		for (j = 0; j < Font.FontWidth; j++)
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	d1e9      	bne.n	8001f1e <ssd1306_WriteChar+0xc2>
	for (i = 0; i < Font.FontHeight; i++)
 8001f4a:	9b01      	ldr	r3, [sp, #4]
 8001f4c:	f10e 0e01 	add.w	lr, lr, #1
 8001f50:	4543      	cmp	r3, r8
 8001f52:	fa5f fe8e 	uxtb.w	lr, lr
 8001f56:	d1b3      	bne.n	8001ec0 <ssd1306_WriteChar+0x64>
 8001f58:	b10f      	cbz	r7, 8001f5e <ssd1306_WriteChar+0x102>
 8001f5a:	4b38      	ldr	r3, [pc, #224]	; (800203c <ssd1306_WriteChar+0x1e0>)
 8001f5c:	715a      	strb	r2, [r3, #5]
	return ch;
 8001f5e:	9804      	ldr	r0, [sp, #16]
	SSD1306.CurrentX += Font.FontWidth;
 8001f60:	4b36      	ldr	r3, [pc, #216]	; (800203c <ssd1306_WriteChar+0x1e0>)
 8001f62:	9a05      	ldr	r2, [sp, #20]
 8001f64:	801a      	strh	r2, [r3, #0]
}
 8001f66:	b009      	add	sp, #36	; 0x24
 8001f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
 8001f6c:	2000      	movs	r0, #0
}
 8001f6e:	b009      	add	sp, #36	; 0x24
 8001f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (x >= ssd1306_GetWidth() || y >= ssd1306_GetHeight())
 8001f74:	2b83      	cmp	r3, #131	; 0x83
 8001f76:	d80b      	bhi.n	8001f90 <ssd1306_WriteChar+0x134>
		SSD1306_Buffer[x + (y / 8) * width()] |= 1 << (y % 8);
 8001f78:	eb03 0b05 	add.w	fp, r3, r5
 8001f7c:	f816 a00b 	ldrb.w	sl, [r6, fp]
	if (color == White)
 8001f80:	2a01      	cmp	r2, #1
		SSD1306_Buffer[x + (y / 8) * width()] |= 1 << (y % 8);
 8001f82:	bf0c      	ite	eq
 8001f84:	ea4c 0a0a 	orreq.w	sl, ip, sl
		SSD1306_Buffer[x + (y / 8) * width()] &= ~(1 << (y % 8));
 8001f88:	ea09 0a0a 	andne.w	sl, r9, sl
 8001f8c:	f806 a00b 	strb.w	sl, [r6, fp]
		for (j = 0; j < Font.FontWidth; j++)
 8001f90:	3101      	adds	r1, #1
 8001f92:	3301      	adds	r3, #1
 8001f94:	428c      	cmp	r4, r1
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	d0d7      	beq.n	8001f4a <ssd1306_WriteChar+0xee>
			if ((b << j) & 0x8000)
 8001f9a:	fa00 fa01 	lsl.w	sl, r0, r1
 8001f9e:	f41a 4f00 	tst.w	sl, #32768	; 0x8000
 8001fa2:	d1e7      	bne.n	8001f74 <ssd1306_WriteChar+0x118>
	if (x >= ssd1306_GetWidth() || y >= ssd1306_GetHeight())
 8001fa4:	2b83      	cmp	r3, #131	; 0x83
 8001fa6:	d813      	bhi.n	8001fd0 <ssd1306_WriteChar+0x174>
	if (SSD1306.Inverted)
 8001fa8:	2a00      	cmp	r2, #0
 8001faa:	bf14      	ite	ne
 8001fac:	2701      	movne	r7, #1
 8001fae:	2700      	moveq	r7, #0
	if (color == White)
 8001fb0:	d039      	beq.n	8002026 <ssd1306_WriteChar+0x1ca>
		SSD1306_Buffer[x + (y / 8) * width()] &= ~(1 << (y % 8));
 8001fb2:	eb03 0a05 	add.w	sl, r3, r5
 8001fb6:	f816 200a 	ldrb.w	r2, [r6, sl]
 8001fba:	ea09 0202 	and.w	r2, r9, r2
 8001fbe:	f806 200a 	strb.w	r2, [r6, sl]
				SSD1306.Color = !SSD1306.Color;
 8001fc2:	463a      	mov	r2, r7
		SSD1306_Buffer[x + (y / 8) * width()] |= 1 << (y % 8);
 8001fc4:	2701      	movs	r7, #1
 8001fc6:	e7e3      	b.n	8001f90 <ssd1306_WriteChar+0x134>
 8001fc8:	3a00      	subs	r2, #0
 8001fca:	bf18      	it	ne
 8001fcc:	2201      	movne	r2, #1
 8001fce:	e7a0      	b.n	8001f12 <ssd1306_WriteChar+0xb6>
 8001fd0:	1e17      	subs	r7, r2, #0
 8001fd2:	bf18      	it	ne
 8001fd4:	2701      	movne	r7, #1
 8001fd6:	e7f4      	b.n	8001fc2 <ssd1306_WriteChar+0x166>
		for (j = 0; j < Font.FontWidth; j++)
 8001fd8:	2300      	movs	r3, #0
			if ((b << j) & 0x8000)
 8001fda:	fa00 f103 	lsl.w	r1, r0, r3
 8001fde:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8001fe2:	f103 0301 	add.w	r3, r3, #1
 8001fe6:	d103      	bne.n	8001ff0 <ssd1306_WriteChar+0x194>
 8001fe8:	3a00      	subs	r2, #0
 8001fea:	bf18      	it	ne
 8001fec:	2201      	movne	r2, #1
		for (j = 0; j < Font.FontWidth; j++)
 8001fee:	2701      	movs	r7, #1
 8001ff0:	429c      	cmp	r4, r3
 8001ff2:	d1f2      	bne.n	8001fda <ssd1306_WriteChar+0x17e>
	for (i = 0; i < Font.FontHeight; i++)
 8001ff4:	9b01      	ldr	r3, [sp, #4]
 8001ff6:	f10e 0e01 	add.w	lr, lr, #1
 8001ffa:	4543      	cmp	r3, r8
 8001ffc:	fa5f fe8e 	uxtb.w	lr, lr
 8002000:	f47f af5e 	bne.w	8001ec0 <ssd1306_WriteChar+0x64>
 8002004:	e7a8      	b.n	8001f58 <ssd1306_WriteChar+0xfc>
		SSD1306_Buffer[x + (y / 8) * width()] |= 1 << (y % 8);
 8002006:	eb03 0b05 	add.w	fp, r3, r5
 800200a:	f816 a00b 	ldrb.w	sl, [r6, fp]
 800200e:	ea4c 0a0a 	orr.w	sl, ip, sl
 8002012:	f806 a00b 	strb.w	sl, [r6, fp]
 8002016:	e77d      	b.n	8001f14 <ssd1306_WriteChar+0xb8>
 8002018:	195f      	adds	r7, r3, r5
 800201a:	5df2      	ldrb	r2, [r6, r7]
 800201c:	ea4c 0202 	orr.w	r2, ip, r2
 8002020:	55f2      	strb	r2, [r6, r7]
 8002022:	2201      	movs	r2, #1
 8002024:	e775      	b.n	8001f12 <ssd1306_WriteChar+0xb6>
 8002026:	eb03 0a05 	add.w	sl, r3, r5
 800202a:	4617      	mov	r7, r2
 800202c:	f816 200a 	ldrb.w	r2, [r6, sl]
 8002030:	ea4c 0202 	orr.w	r2, ip, r2
 8002034:	f806 200a 	strb.w	r2, [r6, sl]
 8002038:	e7c3      	b.n	8001fc2 <ssd1306_WriteChar+0x166>
 800203a:	bf00      	nop
 800203c:	2000033c 	.word	0x2000033c
 8002040:	20000344 	.word	0x20000344

08002044 <ssd1306_WriteString>:
{
 8002044:	b530      	push	{r4, r5, lr}
 8002046:	b083      	sub	sp, #12
 8002048:	466d      	mov	r5, sp
 800204a:	4604      	mov	r4, r0
	while (*str)
 800204c:	7800      	ldrb	r0, [r0, #0]
{
 800204e:	e885 0006 	stmia.w	r5, {r1, r2}
	while (*str)
 8002052:	b918      	cbnz	r0, 800205c <ssd1306_WriteString+0x18>
 8002054:	e00c      	b.n	8002070 <ssd1306_WriteString+0x2c>
 8002056:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 800205a:	b148      	cbz	r0, 8002070 <ssd1306_WriteString+0x2c>
		if (ssd1306_WriteChar(*str, Font) != *str)
 800205c:	e895 0006 	ldmia.w	r5, {r1, r2}
 8002060:	f7ff fefc 	bl	8001e5c <ssd1306_WriteChar>
 8002064:	7823      	ldrb	r3, [r4, #0]
 8002066:	4298      	cmp	r0, r3
 8002068:	d0f5      	beq.n	8002056 <ssd1306_WriteString+0x12>
}
 800206a:	4618      	mov	r0, r3
 800206c:	b003      	add	sp, #12
 800206e:	bd30      	pop	{r4, r5, pc}
{
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	b003      	add	sp, #12
 8002076:	bd30      	pop	{r4, r5, pc}

08002078 <ssd1306_SetCursor>:
	SSD1306.CurrentX = x;
 8002078:	4b01      	ldr	r3, [pc, #4]	; (8002080 <ssd1306_SetCursor+0x8>)
 800207a:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 800207c:	8059      	strh	r1, [r3, #2]
}
 800207e:	4770      	bx	lr
 8002080:	2000033c 	.word	0x2000033c

08002084 <ssd1306_FlipScreenVertically>:
	ssd1306_WriteCommand(SEGREMAP | 0x01);
 8002084:	23a1      	movs	r3, #161	; 0xa1
{
 8002086:	b530      	push	{r4, r5, lr}
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8002088:	4c12      	ldr	r4, [pc, #72]	; (80020d4 <ssd1306_FlipScreenVertically+0x50>)
{
 800208a:	b085      	sub	sp, #20
 800208c:	f88d 300f 	strb.w	r3, [sp, #15]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8002090:	4620      	mov	r0, r4
 8002092:	f002 fb87 	bl	80047a4 <HAL_I2C_GetState>
 8002096:	2820      	cmp	r0, #32
 8002098:	d1fa      	bne.n	8002090 <ssd1306_FlipScreenVertically+0xc>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 800209a:	2301      	movs	r3, #1
 800209c:	480d      	ldr	r0, [pc, #52]	; (80020d4 <ssd1306_FlipScreenVertically+0x50>)
 800209e:	f10d 050f 	add.w	r5, sp, #15
 80020a2:	9301      	str	r3, [sp, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	2178      	movs	r1, #120	; 0x78
 80020a8:	9500      	str	r5, [sp, #0]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 80020aa:	4604      	mov	r4, r0
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 80020ac:	f001 fa98 	bl	80035e0 <HAL_I2C_Mem_Write_DMA>
	ssd1306_WriteCommand(COMSCANDEC);           //Rotate screen 180 Deg
 80020b0:	23c8      	movs	r3, #200	; 0xc8
 80020b2:	f88d 300f 	strb.w	r3, [sp, #15]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 80020b6:	4620      	mov	r0, r4
 80020b8:	f002 fb74 	bl	80047a4 <HAL_I2C_GetState>
 80020bc:	2820      	cmp	r0, #32
 80020be:	d1fa      	bne.n	80020b6 <ssd1306_FlipScreenVertically+0x32>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 80020c0:	2301      	movs	r3, #1
 80020c2:	2200      	movs	r2, #0
 80020c4:	2178      	movs	r1, #120	; 0x78
 80020c6:	e9cd 5300 	strd	r5, r3, [sp]
 80020ca:	4802      	ldr	r0, [pc, #8]	; (80020d4 <ssd1306_FlipScreenVertically+0x50>)
 80020cc:	f001 fa88 	bl	80035e0 <HAL_I2C_Mem_Write_DMA>
}
 80020d0:	b005      	add	sp, #20
 80020d2:	bd30      	pop	{r4, r5, pc}
 80020d4:	2000027c 	.word	0x2000027c

080020d8 <ssd1306_Clear>:
	memset(SSD1306_Buffer, 0, SSD1306_BUFFER_SIZE);
 80020d8:	f44f 6284 	mov.w	r2, #1056	; 0x420
 80020dc:	2100      	movs	r1, #0
 80020de:	4801      	ldr	r0, [pc, #4]	; (80020e4 <ssd1306_Clear+0xc>)
 80020e0:	f003 ba78 	b.w	80055d4 <memset>
 80020e4:	20000344 	.word	0x20000344

080020e8 <HAL_I2C_MemTxCpltCallback>:
{
	if(hi2c->Instance == SSD1306_I2C_PORT.Instance)
	{
		//TODO:
	}
}
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop

080020ec <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80020ec:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <HAL_MspInit+0x3c>)
{
 80020ee:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80020f0:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80020f2:	490e      	ldr	r1, [pc, #56]	; (800212c <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 80020f4:	f042 0201 	orr.w	r2, r2, #1
 80020f8:	619a      	str	r2, [r3, #24]
 80020fa:	699a      	ldr	r2, [r3, #24]
 80020fc:	f002 0201 	and.w	r2, r2, #1
 8002100:	9200      	str	r2, [sp, #0]
 8002102:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002104:	69da      	ldr	r2, [r3, #28]
 8002106:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800210a:	61da      	str	r2, [r3, #28]
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002112:	9301      	str	r3, [sp, #4]
 8002114:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002116:	684b      	ldr	r3, [r1, #4]
 8002118:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800211c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002120:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002122:	b002      	add	sp, #8
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	40021000 	.word	0x40021000
 800212c:	40010000 	.word	0x40010000

08002130 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002130:	e7fe      	b.n	8002130 <NMI_Handler>
 8002132:	bf00      	nop

08002134 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002134:	e7fe      	b.n	8002134 <HardFault_Handler>
 8002136:	bf00      	nop

08002138 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002138:	e7fe      	b.n	8002138 <MemManage_Handler>
 800213a:	bf00      	nop

0800213c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800213c:	e7fe      	b.n	800213c <BusFault_Handler>
 800213e:	bf00      	nop

08002140 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002140:	e7fe      	b.n	8002140 <UsageFault_Handler>
 8002142:	bf00      	nop

08002144 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop

08002148 <DebugMon_Handler>:
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop

0800214c <PendSV_Handler>:
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop

08002150 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002150:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002152:	f000 fa31 	bl	80025b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	ADC_CONVERSION_TIMER++;
 8002156:	4a42      	ldr	r2, [pc, #264]	; (8002260 <SysTick_Handler+0x110>)
  UptadeLightLevelTimer++;
 8002158:	4842      	ldr	r0, [pc, #264]	; (8002264 <SysTick_Handler+0x114>)
	ADC_CONVERSION_TIMER++;
 800215a:	8813      	ldrh	r3, [r2, #0]
  RefreshDisplayTimer++;
 800215c:	4942      	ldr	r1, [pc, #264]	; (8002268 <SysTick_Handler+0x118>)
	ADC_CONVERSION_TIMER++;
 800215e:	3301      	adds	r3, #1

  if( (BUT_MENU_SIGNAL == 0) && (OLD_BUT_MENU_SIGNAL == 1) )
 8002160:	4c42      	ldr	r4, [pc, #264]	; (800226c <SysTick_Handler+0x11c>)
	ADC_CONVERSION_TIMER++;
 8002162:	8013      	strh	r3, [r2, #0]
  UptadeLightLevelTimer++;
 8002164:	8802      	ldrh	r2, [r0, #0]
  RefreshDisplayTimer++;
 8002166:	880b      	ldrh	r3, [r1, #0]
  if( (BUT_MENU_SIGNAL == 0) && (OLD_BUT_MENU_SIGNAL == 1) )
 8002168:	7824      	ldrb	r4, [r4, #0]
  RefreshDisplayTimer++;
 800216a:	3301      	adds	r3, #1
  UptadeLightLevelTimer++;
 800216c:	3201      	adds	r2, #1
  RefreshDisplayTimer++;
 800216e:	800b      	strh	r3, [r1, #0]
  UptadeLightLevelTimer++;
 8002170:	8002      	strh	r2, [r0, #0]
  if( (BUT_MENU_SIGNAL == 0) && (OLD_BUT_MENU_SIGNAL == 1) )
 8002172:	4b3f      	ldr	r3, [pc, #252]	; (8002270 <SysTick_Handler+0x120>)
 8002174:	b914      	cbnz	r4, 800217c <SysTick_Handler+0x2c>
 8002176:	7819      	ldrb	r1, [r3, #0]
 8002178:	2901      	cmp	r1, #1
 800217a:	d02a      	beq.n	80021d2 <SysTick_Handler+0x82>
      OLD_BUT_MENU_SIGNAL = 1;
    }
  }
  else
  {
    MENU_BUTTON.Timer = 0;
 800217c:	2000      	movs	r0, #0
    OLD_BUT_MENU_SIGNAL = 1;
 800217e:	2201      	movs	r2, #1
    MENU_BUTTON.Timer = 0;
 8002180:	493c      	ldr	r1, [pc, #240]	; (8002274 <SysTick_Handler+0x124>)
    OLD_BUT_MENU_SIGNAL = 1;
 8002182:	701a      	strb	r2, [r3, #0]
    MENU_BUTTON.Timer = 0;
 8002184:	8048      	strh	r0, [r1, #2]
  }

  if( (BUT_PLUS_SIGNAL == 0) && (OLD_BUT_PLUS_SIGNAL == 1) )
 8002186:	4b3c      	ldr	r3, [pc, #240]	; (8002278 <SysTick_Handler+0x128>)
 8002188:	781a      	ldrb	r2, [r3, #0]
 800218a:	4b3c      	ldr	r3, [pc, #240]	; (800227c <SysTick_Handler+0x12c>)
 800218c:	b912      	cbnz	r2, 8002194 <SysTick_Handler+0x44>
 800218e:	7818      	ldrb	r0, [r3, #0]
 8002190:	2801      	cmp	r0, #1
 8002192:	d02b      	beq.n	80021ec <SysTick_Handler+0x9c>
      OLD_BUT_PLUS_SIGNAL = 1;
    }
  }
  else
  {
    PLUS_BUTTON.Timer = 0;
 8002194:	2000      	movs	r0, #0
    OLD_BUT_PLUS_SIGNAL = 1;
 8002196:	2201      	movs	r2, #1
    PLUS_BUTTON.Timer = 0;
 8002198:	4939      	ldr	r1, [pc, #228]	; (8002280 <SysTick_Handler+0x130>)
    OLD_BUT_PLUS_SIGNAL = 1;
 800219a:	701a      	strb	r2, [r3, #0]
    PLUS_BUTTON.Timer = 0;
 800219c:	8048      	strh	r0, [r1, #2]
  }

  if( (BUT_MINUS_SIGNAL == 0) && (OLD_BUT_MINUS_SIGNAL == 1) )
 800219e:	4b39      	ldr	r3, [pc, #228]	; (8002284 <SysTick_Handler+0x134>)
 80021a0:	781a      	ldrb	r2, [r3, #0]
 80021a2:	4b39      	ldr	r3, [pc, #228]	; (8002288 <SysTick_Handler+0x138>)
 80021a4:	b912      	cbnz	r2, 80021ac <SysTick_Handler+0x5c>
 80021a6:	7818      	ldrb	r0, [r3, #0]
 80021a8:	2801      	cmp	r0, #1
 80021aa:	d005      	beq.n	80021b8 <SysTick_Handler+0x68>
    }
  }
  else
  {
    MINUS_BUTTON.Timer = 0;
    OLD_BUT_MINUS_SIGNAL = 1;
 80021ac:	2201      	movs	r2, #1
    MINUS_BUTTON.Timer = 0;
 80021ae:	2000      	movs	r0, #0
 80021b0:	4936      	ldr	r1, [pc, #216]	; (800228c <SysTick_Handler+0x13c>)
    OLD_BUT_MINUS_SIGNAL = 1;
 80021b2:	701a      	strb	r2, [r3, #0]
    MINUS_BUTTON.Timer = 0;
 80021b4:	8048      	strh	r0, [r1, #2]
  }


  /* USER CODE END SysTick_IRQn 1 */
}
 80021b6:	bd10      	pop	{r4, pc}
    if(MINUS_BUTTON.Timer > LONG_CLICK_DEBOUNCE)
 80021b8:	f640 3cb7 	movw	ip, #2999	; 0xbb7
    MINUS_BUTTON.Timer++;
 80021bc:	4c33      	ldr	r4, [pc, #204]	; (800228c <SysTick_Handler+0x13c>)
 80021be:	8861      	ldrh	r1, [r4, #2]
 80021c0:	3101      	adds	r1, #1
 80021c2:	b289      	uxth	r1, r1
    if(MINUS_BUTTON.Timer > LONG_CLICK_DEBOUNCE)
 80021c4:	4561      	cmp	r1, ip
    MINUS_BUTTON.Timer++;
 80021c6:	8061      	strh	r1, [r4, #2]
    if(MINUS_BUTTON.Timer > LONG_CLICK_DEBOUNCE)
 80021c8:	d91d      	bls.n	8002206 <SysTick_Handler+0xb6>
      MINUS_BUTTON.State = LONG_CLICK;
 80021ca:	2103      	movs	r1, #3
      OLD_BUT_MINUS_SIGNAL = 0;
 80021cc:	701a      	strb	r2, [r3, #0]
      MINUS_BUTTON.State = LONG_CLICK;
 80021ce:	7021      	strb	r1, [r4, #0]
}
 80021d0:	bd10      	pop	{r4, pc}
    if(MENU_BUTTON.Timer > LONG_CLICK_DEBOUNCE)
 80021d2:	f640 3cb7 	movw	ip, #2999	; 0xbb7
    MENU_BUTTON.Timer++;
 80021d6:	4827      	ldr	r0, [pc, #156]	; (8002274 <SysTick_Handler+0x124>)
 80021d8:	8842      	ldrh	r2, [r0, #2]
 80021da:	3201      	adds	r2, #1
 80021dc:	b292      	uxth	r2, r2
    if(MENU_BUTTON.Timer > LONG_CLICK_DEBOUNCE)
 80021de:	4562      	cmp	r2, ip
    MENU_BUTTON.Timer++;
 80021e0:	8042      	strh	r2, [r0, #2]
    if(MENU_BUTTON.Timer > LONG_CLICK_DEBOUNCE)
 80021e2:	d918      	bls.n	8002216 <SysTick_Handler+0xc6>
      MENU_BUTTON.State = LONG_CLICK;
 80021e4:	2203      	movs	r2, #3
      OLD_BUT_MENU_SIGNAL = 0;
 80021e6:	701c      	strb	r4, [r3, #0]
      MENU_BUTTON.State = LONG_CLICK;
 80021e8:	7002      	strb	r2, [r0, #0]
      OLD_BUT_MENU_SIGNAL = 0;
 80021ea:	e7cc      	b.n	8002186 <SysTick_Handler+0x36>
    if(PLUS_BUTTON.Timer > LONG_CLICK_DEBOUNCE)
 80021ec:	f640 3cb7 	movw	ip, #2999	; 0xbb7
    PLUS_BUTTON.Timer++;
 80021f0:	4c23      	ldr	r4, [pc, #140]	; (8002280 <SysTick_Handler+0x130>)
 80021f2:	8861      	ldrh	r1, [r4, #2]
 80021f4:	3101      	adds	r1, #1
 80021f6:	b289      	uxth	r1, r1
    if(PLUS_BUTTON.Timer > LONG_CLICK_DEBOUNCE)
 80021f8:	4561      	cmp	r1, ip
    PLUS_BUTTON.Timer++;
 80021fa:	8061      	strh	r1, [r4, #2]
    if(PLUS_BUTTON.Timer > LONG_CLICK_DEBOUNCE)
 80021fc:	d913      	bls.n	8002226 <SysTick_Handler+0xd6>
      PLUS_BUTTON.State = LONG_CLICK;
 80021fe:	2103      	movs	r1, #3
      OLD_BUT_PLUS_SIGNAL = 0;
 8002200:	701a      	strb	r2, [r3, #0]
      PLUS_BUTTON.State = LONG_CLICK;
 8002202:	7021      	strb	r1, [r4, #0]
      OLD_BUT_PLUS_SIGNAL = 0;
 8002204:	e7cb      	b.n	800219e <SysTick_Handler+0x4e>
    else if(MINUS_BUTTON.Timer > MEDIUM_CLICK_DEBOUNCE)
 8002206:	f240 5cdb 	movw	ip, #1499	; 0x5db
 800220a:	4561      	cmp	r1, ip
 800220c:	d921      	bls.n	8002252 <SysTick_Handler+0x102>
      MINUS_BUTTON.State = MEDIUM_CLICK;
 800220e:	2102      	movs	r1, #2
      OLD_BUT_MINUS_SIGNAL = 0;
 8002210:	701a      	strb	r2, [r3, #0]
      MINUS_BUTTON.State = MEDIUM_CLICK;
 8002212:	7021      	strb	r1, [r4, #0]
}
 8002214:	bd10      	pop	{r4, pc}
    else if(MENU_BUTTON.Timer > MEDIUM_CLICK_DEBOUNCE)
 8002216:	f240 5cdb 	movw	ip, #1499	; 0x5db
 800221a:	4562      	cmp	r2, ip
 800221c:	d912      	bls.n	8002244 <SysTick_Handler+0xf4>
      MENU_BUTTON.State = MEDIUM_CLICK;
 800221e:	2202      	movs	r2, #2
      OLD_BUT_MENU_SIGNAL = 0;
 8002220:	701c      	strb	r4, [r3, #0]
      MENU_BUTTON.State = MEDIUM_CLICK;
 8002222:	7002      	strb	r2, [r0, #0]
      OLD_BUT_MENU_SIGNAL = 0;
 8002224:	e7af      	b.n	8002186 <SysTick_Handler+0x36>
    else if(PLUS_BUTTON.Timer > MEDIUM_CLICK_DEBOUNCE)
 8002226:	f240 5cdb 	movw	ip, #1499	; 0x5db
 800222a:	4561      	cmp	r1, ip
 800222c:	d903      	bls.n	8002236 <SysTick_Handler+0xe6>
      PLUS_BUTTON.State = MEDIUM_CLICK;
 800222e:	2102      	movs	r1, #2
      OLD_BUT_PLUS_SIGNAL = 0;
 8002230:	701a      	strb	r2, [r3, #0]
      PLUS_BUTTON.State = MEDIUM_CLICK;
 8002232:	7021      	strb	r1, [r4, #0]
      OLD_BUT_PLUS_SIGNAL = 0;
 8002234:	e7b3      	b.n	800219e <SysTick_Handler+0x4e>
    else if(PLUS_BUTTON.Timer > SHORT_CLICK_DEBOUNCE)
 8002236:	2963      	cmp	r1, #99	; 0x63
      PLUS_BUTTON.State = SHORT_CLICK;
 8002238:	bf87      	ittee	hi
 800223a:	7020      	strbhi	r0, [r4, #0]
      OLD_BUT_PLUS_SIGNAL = 0;
 800223c:	701a      	strbhi	r2, [r3, #0]
      PLUS_BUTTON.State = NO_CLICK;
 800223e:	7022      	strbls	r2, [r4, #0]
      OLD_BUT_PLUS_SIGNAL = 1;
 8002240:	7018      	strbls	r0, [r3, #0]
 8002242:	e7ac      	b.n	800219e <SysTick_Handler+0x4e>
    else if(MENU_BUTTON.Timer > SHORT_CLICK_DEBOUNCE)
 8002244:	2a63      	cmp	r2, #99	; 0x63
      MENU_BUTTON.State = SHORT_CLICK;
 8002246:	bf87      	ittee	hi
 8002248:	7001      	strbhi	r1, [r0, #0]
      OLD_BUT_MENU_SIGNAL = 0;
 800224a:	701c      	strbhi	r4, [r3, #0]
      MENU_BUTTON.State = NO_CLICK;
 800224c:	7004      	strbls	r4, [r0, #0]
      OLD_BUT_MENU_SIGNAL = 1;
 800224e:	7019      	strbls	r1, [r3, #0]
 8002250:	e799      	b.n	8002186 <SysTick_Handler+0x36>
    else if(MINUS_BUTTON.Timer > SHORT_CLICK_DEBOUNCE)
 8002252:	2963      	cmp	r1, #99	; 0x63
      MINUS_BUTTON.State = SHORT_CLICK;
 8002254:	bf87      	ittee	hi
 8002256:	7020      	strbhi	r0, [r4, #0]
      OLD_BUT_MINUS_SIGNAL = 0;
 8002258:	701a      	strbhi	r2, [r3, #0]
      MINUS_BUTTON.State = NO_CLICK;
 800225a:	7022      	strbls	r2, [r4, #0]
      OLD_BUT_MINUS_SIGNAL = 1;
 800225c:	7018      	strbls	r0, [r3, #0]
}
 800225e:	bd10      	pop	{r4, pc}
 8002260:	200002d0 	.word	0x200002d0
 8002264:	20000338 	.word	0x20000338
 8002268:	200002f0 	.word	0x200002f0
 800226c:	20000765 	.word	0x20000765
 8002270:	20000768 	.word	0x20000768
 8002274:	200002e0 	.word	0x200002e0
 8002278:	20000767 	.word	0x20000767
 800227c:	2000076a 	.word	0x2000076a
 8002280:	200002ec 	.word	0x200002ec
 8002284:	20000766 	.word	0x20000766
 8002288:	20000769 	.word	0x20000769
 800228c:	200002e8 	.word	0x200002e8

08002290 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002290:	4801      	ldr	r0, [pc, #4]	; (8002298 <DMA1_Channel6_IRQHandler+0x8>)
 8002292:	f000 be01 	b.w	8002e98 <HAL_DMA_IRQHandler>
 8002296:	bf00      	nop
 8002298:	20000238 	.word	0x20000238

0800229c <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800229c:	4801      	ldr	r0, [pc, #4]	; (80022a4 <I2C1_EV_IRQHandler+0x8>)
 800229e:	f001 bdbd 	b.w	8003e1c <HAL_I2C_EV_IRQHandler>
 80022a2:	bf00      	nop
 80022a4:	2000027c 	.word	0x2000027c

080022a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022a8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80022aa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80022ae:	f000 ffa5 	bl	80031fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  BUT_MENU_SIGNAL = HAL_GPIO_ReadPin(BUT_MENU_GPIO_Port, BUT_MENU_Pin);
 80022b2:	4c10      	ldr	r4, [pc, #64]	; (80022f4 <EXTI15_10_IRQHandler+0x4c>)
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80022b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80022b8:	f000 ffa0 	bl	80031fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80022bc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80022c0:	f000 ff9c 	bl	80031fc <HAL_GPIO_EXTI_IRQHandler>
  BUT_MENU_SIGNAL = HAL_GPIO_ReadPin(BUT_MENU_GPIO_Port, BUT_MENU_Pin);
 80022c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022c8:	4620      	mov	r0, r4
 80022ca:	f000 ff8b 	bl	80031e4 <HAL_GPIO_ReadPin>
 80022ce:	4602      	mov	r2, r0
 80022d0:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <EXTI15_10_IRQHandler+0x50>)
  BUT_PLUS_SIGNAL = HAL_GPIO_ReadPin(BUT_PLUS_GPIO_Port, BUT_PLUS_Pin);
 80022d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022d6:	4620      	mov	r0, r4
  BUT_MENU_SIGNAL = HAL_GPIO_ReadPin(BUT_MENU_GPIO_Port, BUT_MENU_Pin);
 80022d8:	701a      	strb	r2, [r3, #0]
  BUT_PLUS_SIGNAL = HAL_GPIO_ReadPin(BUT_PLUS_GPIO_Port, BUT_PLUS_Pin);
 80022da:	f000 ff83 	bl	80031e4 <HAL_GPIO_ReadPin>
 80022de:	4602      	mov	r2, r0
 80022e0:	4b06      	ldr	r3, [pc, #24]	; (80022fc <EXTI15_10_IRQHandler+0x54>)
  BUT_MINUS_SIGNAL = HAL_GPIO_ReadPin(BUT_MINUS_GPIO_Port, BUT_MINUS_Pin);
 80022e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022e6:	4620      	mov	r0, r4
  BUT_PLUS_SIGNAL = HAL_GPIO_ReadPin(BUT_PLUS_GPIO_Port, BUT_PLUS_Pin);
 80022e8:	701a      	strb	r2, [r3, #0]
  BUT_MINUS_SIGNAL = HAL_GPIO_ReadPin(BUT_MINUS_GPIO_Port, BUT_MINUS_Pin);
 80022ea:	f000 ff7b 	bl	80031e4 <HAL_GPIO_ReadPin>
 80022ee:	4b04      	ldr	r3, [pc, #16]	; (8002300 <EXTI15_10_IRQHandler+0x58>)
 80022f0:	7018      	strb	r0, [r3, #0]

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022f2:	bd10      	pop	{r4, pc}
 80022f4:	40010c00 	.word	0x40010c00
 80022f8:	20000765 	.word	0x20000765
 80022fc:	20000767 	.word	0x20000767
 8002300:	20000766 	.word	0x20000766

08002304 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002304:	2001      	movs	r0, #1
 8002306:	4770      	bx	lr

08002308 <_kill>:

int _kill(int pid, int sig)
{
 8002308:	b508      	push	{r3, lr}
	errno = EINVAL;
 800230a:	f003 f939 	bl	8005580 <__errno>
 800230e:	2216      	movs	r2, #22
 8002310:	4603      	mov	r3, r0
	return -1;
}
 8002312:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8002316:	601a      	str	r2, [r3, #0]
}
 8002318:	bd08      	pop	{r3, pc}
 800231a:	bf00      	nop

0800231c <_exit>:

void _exit (int status)
{
 800231c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800231e:	f003 f92f 	bl	8005580 <__errno>
 8002322:	2316      	movs	r3, #22
 8002324:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8002326:	e7fe      	b.n	8002326 <_exit+0xa>

08002328 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002328:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800232a:	1e16      	subs	r6, r2, #0
 800232c:	dd07      	ble.n	800233e <_read+0x16>
 800232e:	460c      	mov	r4, r1
 8002330:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8002332:	f3af 8000 	nop.w
 8002336:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800233a:	42a5      	cmp	r5, r4
 800233c:	d1f9      	bne.n	8002332 <_read+0xa>
	}

return len;
}
 800233e:	4630      	mov	r0, r6
 8002340:	bd70      	pop	{r4, r5, r6, pc}
 8002342:	bf00      	nop

08002344 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002344:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002346:	1e16      	subs	r6, r2, #0
 8002348:	dd07      	ble.n	800235a <_write+0x16>
 800234a:	460c      	mov	r4, r1
 800234c:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 800234e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002352:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002356:	42ac      	cmp	r4, r5
 8002358:	d1f9      	bne.n	800234e <_write+0xa>
	}
	return len;
}
 800235a:	4630      	mov	r0, r6
 800235c:	bd70      	pop	{r4, r5, r6, pc}
 800235e:	bf00      	nop

08002360 <_close>:

int _close(int file)
{
	return -1;
}
 8002360:	f04f 30ff 	mov.w	r0, #4294967295
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop

08002368 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002368:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800236c:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800236e:	604b      	str	r3, [r1, #4]
}
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop

08002374 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002374:	2001      	movs	r0, #1
 8002376:	4770      	bx	lr

08002378 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002378:	2000      	movs	r0, #0
 800237a:	4770      	bx	lr

0800237c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800237c:	490d      	ldr	r1, [pc, #52]	; (80023b4 <_sbrk+0x38>)
{
 800237e:	4603      	mov	r3, r0
 8002380:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002382:	4a0d      	ldr	r2, [pc, #52]	; (80023b8 <_sbrk+0x3c>)
 8002384:	4c0d      	ldr	r4, [pc, #52]	; (80023bc <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8002386:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002388:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 800238a:	b120      	cbz	r0, 8002396 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800238c:	4403      	add	r3, r0
 800238e:	4293      	cmp	r3, r2
 8002390:	d807      	bhi.n	80023a2 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002392:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8002394:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002396:	4c0a      	ldr	r4, [pc, #40]	; (80023c0 <_sbrk+0x44>)
 8002398:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 800239a:	4403      	add	r3, r0
 800239c:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 800239e:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80023a0:	d9f7      	bls.n	8002392 <_sbrk+0x16>
    errno = ENOMEM;
 80023a2:	f003 f8ed 	bl	8005580 <__errno>
 80023a6:	220c      	movs	r2, #12
 80023a8:	4603      	mov	r3, r0
    return (void *)-1;
 80023aa:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 80023ae:	601a      	str	r2, [r3, #0]
}
 80023b0:	bd10      	pop	{r4, pc}
 80023b2:	bf00      	nop
 80023b4:	2000076c 	.word	0x2000076c
 80023b8:	20005000 	.word	0x20005000
 80023bc:	00000400 	.word	0x00000400
 80023c0:	200007d0 	.word	0x200007d0

080023c4 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop

080023c8 <MX_TIM3_Init>:

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 80-1;
 80023c8:	214f      	movs	r1, #79	; 0x4f
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023ca:	2300      	movs	r3, #0
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 100-1;
 80023cc:	2263      	movs	r2, #99	; 0x63
{
 80023ce:	b5d0      	push	{r4, r6, r7, lr}
  htim3.Instance = TIM3;
 80023d0:	483d      	ldr	r0, [pc, #244]	; (80024c8 <MX_TIM3_Init+0x100>)
 80023d2:	4c3e      	ldr	r4, [pc, #248]	; (80024cc <MX_TIM3_Init+0x104>)
{
 80023d4:	b094      	sub	sp, #80	; 0x50
  htim3.Init.Prescaler = 80-1;
 80023d6:	e9c4 0100 	strd	r0, r1, [r4]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80023da:	4620      	mov	r0, r4
  htim3.Init.Period = 100-1;
 80023dc:	e9c4 3202 	strd	r3, r2, [r4, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023e0:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023e4:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 80023e8:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 80023ec:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023f0:	9308      	str	r3, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023f2:	9302      	str	r3, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023f4:	930c      	str	r3, [sp, #48]	; 0x30
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023f6:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023f8:	61a3      	str	r3, [r4, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023fa:	930b      	str	r3, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023fc:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80023fe:	f002 fdb1 	bl	8004f64 <HAL_TIM_Base_Init>
 8002402:	2800      	cmp	r0, #0
 8002404:	d134      	bne.n	8002470 <MX_TIM3_Init+0xa8>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002406:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800240a:	4830      	ldr	r0, [pc, #192]	; (80024cc <MX_TIM3_Init+0x104>)
 800240c:	a908      	add	r1, sp, #32
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800240e:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002410:	f002 ffde 	bl	80053d0 <HAL_TIM_ConfigClockSource>
 8002414:	2800      	cmp	r0, #0
 8002416:	d13a      	bne.n	800248e <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002418:	482c      	ldr	r0, [pc, #176]	; (80024cc <MX_TIM3_Init+0x104>)
 800241a:	f002 fe13 	bl	8005044 <HAL_TIM_PWM_Init>
 800241e:	2800      	cmp	r0, #0
 8002420:	d132      	bne.n	8002488 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002422:	2200      	movs	r2, #0
 8002424:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002426:	4829      	ldr	r0, [pc, #164]	; (80024cc <MX_TIM3_Init+0x104>)
 8002428:	a902      	add	r1, sp, #8
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800242a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800242e:	f003 f875 	bl	800551c <HAL_TIMEx_MasterConfigSynchronization>
 8002432:	bb30      	cbnz	r0, 8002482 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002434:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002436:	2660      	movs	r6, #96	; 0x60
 8002438:	2700      	movs	r7, #0
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800243a:	2208      	movs	r2, #8
 800243c:	4823      	ldr	r0, [pc, #140]	; (80024cc <MX_TIM3_Init+0x104>)
 800243e:	a90c      	add	r1, sp, #48	; 0x30
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002440:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002444:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002446:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002448:	f002 fec6 	bl	80051d8 <HAL_TIM_PWM_ConfigChannel>
 800244c:	b9b0      	cbnz	r0, 800247c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800244e:	220c      	movs	r2, #12
 8002450:	481e      	ldr	r0, [pc, #120]	; (80024cc <MX_TIM3_Init+0x104>)
 8002452:	a90c      	add	r1, sp, #48	; 0x30
 8002454:	f002 fec0 	bl	80051d8 <HAL_TIM_PWM_ConfigChannel>
 8002458:	b968      	cbnz	r0, 8002476 <MX_TIM3_Init+0xae>
  }
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800245a:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM3)
 800245c:	4a1a      	ldr	r2, [pc, #104]	; (80024c8 <MX_TIM3_Init+0x100>)
 800245e:	6821      	ldr	r1, [r4, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002460:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(timHandle->Instance==TIM3)
 8002464:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002466:	e9cd 3306 	strd	r3, r3, [sp, #24]
  if(timHandle->Instance==TIM3)
 800246a:	d013      	beq.n	8002494 <MX_TIM3_Init+0xcc>
}
 800246c:	b014      	add	sp, #80	; 0x50
 800246e:	bdd0      	pop	{r4, r6, r7, pc}
    Error_Handler();
 8002470:	f7ff fa28 	bl	80018c4 <Error_Handler>
 8002474:	e7c7      	b.n	8002406 <MX_TIM3_Init+0x3e>
    Error_Handler();
 8002476:	f7ff fa25 	bl	80018c4 <Error_Handler>
 800247a:	e7ee      	b.n	800245a <MX_TIM3_Init+0x92>
    Error_Handler();
 800247c:	f7ff fa22 	bl	80018c4 <Error_Handler>
 8002480:	e7e5      	b.n	800244e <MX_TIM3_Init+0x86>
    Error_Handler();
 8002482:	f7ff fa1f 	bl	80018c4 <Error_Handler>
 8002486:	e7d5      	b.n	8002434 <MX_TIM3_Init+0x6c>
    Error_Handler();
 8002488:	f7ff fa1c 	bl	80018c4 <Error_Handler>
 800248c:	e7c9      	b.n	8002422 <MX_TIM3_Init+0x5a>
    Error_Handler();
 800248e:	f7ff fa19 	bl	80018c4 <Error_Handler>
 8002492:	e7c1      	b.n	8002418 <MX_TIM3_Init+0x50>
    __HAL_RCC_GPIOB_CLK_ENABLE();
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = PWM_LED_SUP_Pin|PWM_LED_INF_Pin;
 8002494:	2603      	movs	r6, #3
 8002496:	2702      	movs	r7, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002498:	2402      	movs	r4, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800249a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800249e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80024a2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a4:	480a      	ldr	r0, [pc, #40]	; (80024d0 <MX_TIM3_Init+0x108>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024a6:	f042 0208 	orr.w	r2, r2, #8
 80024aa:	619a      	str	r2, [r3, #24]
 80024ac:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ae:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024b0:	f003 0308 	and.w	r3, r3, #8
 80024b4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = PWM_LED_SUP_Pin|PWM_LED_INF_Pin;
 80024b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ba:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024bc:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024be:	f000 fd83 	bl	8002fc8 <HAL_GPIO_Init>
}
 80024c2:	b014      	add	sp, #80	; 0x50
 80024c4:	bdd0      	pop	{r4, r6, r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40000400 	.word	0x40000400
 80024cc:	20000770 	.word	0x20000770
 80024d0:	40010c00 	.word	0x40010c00

080024d4 <HAL_TIM_Base_MspInit>:
  if(tim_baseHandle->Instance==TIM3)
 80024d4:	4b09      	ldr	r3, [pc, #36]	; (80024fc <HAL_TIM_Base_MspInit+0x28>)
 80024d6:	6802      	ldr	r2, [r0, #0]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d000      	beq.n	80024de <HAL_TIM_Base_MspInit+0xa>
 80024dc:	4770      	bx	lr
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024de:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 80024e2:	69da      	ldr	r2, [r3, #28]
{
 80024e4:	b082      	sub	sp, #8
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024e6:	f042 0202 	orr.w	r2, r2, #2
 80024ea:	61da      	str	r2, [r3, #28]
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	9301      	str	r3, [sp, #4]
 80024f4:	9b01      	ldr	r3, [sp, #4]
}
 80024f6:	b002      	add	sp, #8
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	40000400 	.word	0x40000400

08002500 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002500:	480c      	ldr	r0, [pc, #48]	; (8002534 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002502:	490d      	ldr	r1, [pc, #52]	; (8002538 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002504:	4a0d      	ldr	r2, [pc, #52]	; (800253c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002508:	e002      	b.n	8002510 <LoopCopyDataInit>

0800250a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800250a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800250c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800250e:	3304      	adds	r3, #4

08002510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002514:	d3f9      	bcc.n	800250a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002516:	4a0a      	ldr	r2, [pc, #40]	; (8002540 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002518:	4c0a      	ldr	r4, [pc, #40]	; (8002544 <LoopFillZerobss+0x22>)
  movs r3, #0
 800251a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800251c:	e001      	b.n	8002522 <LoopFillZerobss>

0800251e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800251e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002520:	3204      	adds	r2, #4

08002522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002524:	d3fb      	bcc.n	800251e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002526:	f7ff ff4d 	bl	80023c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800252a:	f003 f82f 	bl	800558c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800252e:	f7fe ff4b 	bl	80013c8 <main>
  bx lr
 8002532:	4770      	bx	lr
  ldr r0, =_sdata
 8002534:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002538:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 800253c:	0800a2d4 	.word	0x0800a2d4
  ldr r2, =_sbss
 8002540:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002544:	200007cc 	.word	0x200007cc

08002548 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002548:	e7fe      	b.n	8002548 <ADC1_2_IRQHandler>
	...

0800254c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800254c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800254e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002552:	4a0d      	ldr	r2, [pc, #52]	; (8002588 <HAL_InitTick+0x3c>)
{
 8002554:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002556:	7811      	ldrb	r1, [r2, #0]
 8002558:	4a0c      	ldr	r2, [pc, #48]	; (800258c <HAL_InitTick+0x40>)
 800255a:	fbb3 f3f1 	udiv	r3, r3, r1
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	fbb2 f0f3 	udiv	r0, r2, r3
 8002564:	f000 fbbc 	bl	8002ce0 <HAL_SYSTICK_Config>
 8002568:	b908      	cbnz	r0, 800256e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800256a:	2d0f      	cmp	r5, #15
 800256c:	d901      	bls.n	8002572 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800256e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002570:	bd38      	pop	{r3, r4, r5, pc}
 8002572:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002574:	4602      	mov	r2, r0
 8002576:	4629      	mov	r1, r5
 8002578:	f04f 30ff 	mov.w	r0, #4294967295
 800257c:	f000 fb64 	bl	8002c48 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002580:	4b03      	ldr	r3, [pc, #12]	; (8002590 <HAL_InitTick+0x44>)
 8002582:	4620      	mov	r0, r4
 8002584:	601d      	str	r5, [r3, #0]
}
 8002586:	bd38      	pop	{r3, r4, r5, pc}
 8002588:	20000014 	.word	0x20000014
 800258c:	20000010 	.word	0x20000010
 8002590:	20000018 	.word	0x20000018

08002594 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002594:	4a07      	ldr	r2, [pc, #28]	; (80025b4 <HAL_Init+0x20>)
{
 8002596:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002598:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800259a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800259c:	f043 0310 	orr.w	r3, r3, #16
 80025a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025a2:	f000 fb3f 	bl	8002c24 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80025a6:	200f      	movs	r0, #15
 80025a8:	f7ff ffd0 	bl	800254c <HAL_InitTick>
  HAL_MspInit();
 80025ac:	f7ff fd9e 	bl	80020ec <HAL_MspInit>
}
 80025b0:	2000      	movs	r0, #0
 80025b2:	bd08      	pop	{r3, pc}
 80025b4:	40022000 	.word	0x40022000

080025b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80025b8:	4a03      	ldr	r2, [pc, #12]	; (80025c8 <HAL_IncTick+0x10>)
 80025ba:	4b04      	ldr	r3, [pc, #16]	; (80025cc <HAL_IncTick+0x14>)
 80025bc:	6811      	ldr	r1, [r2, #0]
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	440b      	add	r3, r1
 80025c2:	6013      	str	r3, [r2, #0]
}
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	200007b8 	.word	0x200007b8
 80025cc:	20000014 	.word	0x20000014

080025d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80025d0:	4b01      	ldr	r3, [pc, #4]	; (80025d8 <HAL_GetTick+0x8>)
 80025d2:	6818      	ldr	r0, [r3, #0]
}
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	200007b8 	.word	0x200007b8

080025dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025dc:	b538      	push	{r3, r4, r5, lr}
 80025de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80025e0:	f7ff fff6 	bl	80025d0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025e4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80025e6:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80025e8:	d002      	beq.n	80025f0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80025ea:	4b04      	ldr	r3, [pc, #16]	; (80025fc <HAL_Delay+0x20>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025f0:	f7ff ffee 	bl	80025d0 <HAL_GetTick>
 80025f4:	1b40      	subs	r0, r0, r5
 80025f6:	42a0      	cmp	r0, r4
 80025f8:	d3fa      	bcc.n	80025f0 <HAL_Delay+0x14>
  {
  }
}
 80025fa:	bd38      	pop	{r3, r4, r5, pc}
 80025fc:	20000014 	.word	0x20000014

08002600 <HAL_ADC_Init>:
  uint32_t tmp_cr1 = 0U;
  uint32_t tmp_cr2 = 0U;
  uint32_t tmp_sqr1 = 0U;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002600:	2800      	cmp	r0, #0
 8002602:	f000 8089 	beq.w	8002718 <HAL_ADC_Init+0x118>
{
 8002606:	b538      	push	{r3, r4, r5, lr}
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002608:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800260a:	4604      	mov	r4, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d06b      	beq.n	80026e8 <HAL_ADC_Init+0xe8>
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002610:	6823      	ldr	r3, [r4, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	07d1      	lsls	r1, r2, #31
 8002616:	d440      	bmi.n	800269a <HAL_ADC_Init+0x9a>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002618:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800261a:	06d2      	lsls	r2, r2, #27
 800261c:	d45e      	bmi.n	80026dc <HAL_ADC_Init+0xdc>
    ADC_STATE_CLR_SET(hadc->State,
 800261e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002620:	6861      	ldr	r1, [r4, #4]
 8002622:	69e0      	ldr	r0, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8002624:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002628:	7b25      	ldrb	r5, [r4, #12]
    ADC_STATE_CLR_SET(hadc->State,
 800262a:	f022 0202 	bic.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800262e:	4301      	orrs	r1, r0
    ADC_STATE_CLR_SET(hadc->State,
 8002630:	f042 0202 	orr.w	r2, r2, #2
 8002634:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002636:	ea41 0245 	orr.w	r2, r1, r5, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800263a:	68a1      	ldr	r1, [r4, #8]
 800263c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002640:	d058      	beq.n	80026f4 <HAL_ADC_Init+0xf4>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002642:	7d20      	ldrb	r0, [r4, #20]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002644:	2901      	cmp	r1, #1
 8002646:	bf0c      	ite	eq
 8002648:	f44f 7c80 	moveq.w	ip, #256	; 0x100
 800264c:	f04f 0c00 	movne.w	ip, #0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002650:	2801      	cmp	r0, #1
 8002652:	d06d      	beq.n	8002730 <HAL_ADC_Init+0x130>
      MODIFY_REG(hadc->Instance->CR1,
 8002654:	6858      	ldr	r0, [r3, #4]
 8002656:	f420 4069 	bic.w	r0, r0, #59648	; 0xe900
 800265a:	ea40 000c 	orr.w	r0, r0, ip
 800265e:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002660:	689d      	ldr	r5, [r3, #8]
 8002662:	4844      	ldr	r0, [pc, #272]	; (8002774 <HAL_ADC_Init+0x174>)
 8002664:	4028      	ands	r0, r5
 8002666:	4310      	orrs	r0, r2
 8002668:	6098      	str	r0, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800266a:	2901      	cmp	r1, #1
 800266c:	d050      	beq.n	8002710 <HAL_ADC_Init+0x110>
  uint32_t tmp_sqr1 = 0U;
 800266e:	2000      	movs	r0, #0
    MODIFY_REG(hadc->Instance->SQR1,
 8002670:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002672:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 8002676:	4301      	orrs	r1, r0
 8002678:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800267a:	6899      	ldr	r1, [r3, #8]
 800267c:	4b3e      	ldr	r3, [pc, #248]	; (8002778 <HAL_ADC_Init+0x178>)
 800267e:	400b      	ands	r3, r1
 8002680:	429a      	cmp	r2, r3
 8002682:	d04b      	beq.n	800271c <HAL_ADC_Init+0x11c>
      tmp_hal_status = HAL_ERROR;
 8002684:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8002686:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002688:	f023 0312 	bic.w	r3, r3, #18
 800268c:	f043 0310 	orr.w	r3, r3, #16
 8002690:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002692:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002694:	4303      	orrs	r3, r0
 8002696:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8002698:	bd38      	pop	{r3, r4, r5, pc}
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	f022 0201 	bic.w	r2, r2, #1
 80026a0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026a2:	f7ff ff95 	bl	80025d0 <HAL_GetTick>
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026a6:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80026a8:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	07d2      	lsls	r2, r2, #31
 80026ae:	d5b3      	bpl.n	8002618 <HAL_ADC_Init+0x18>
 80026b0:	e002      	b.n	80026b8 <HAL_ADC_Init+0xb8>
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	07d1      	lsls	r1, r2, #31
 80026b6:	d5af      	bpl.n	8002618 <HAL_ADC_Init+0x18>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026b8:	f7ff ff8a 	bl	80025d0 <HAL_GetTick>
 80026bc:	1b40      	subs	r0, r0, r5
 80026be:	2802      	cmp	r0, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80026c0:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026c2:	d9f6      	bls.n	80026b2 <HAL_ADC_Init+0xb2>
        if(ADC_IS_ENABLE(hadc) != RESET)
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	07d0      	lsls	r0, r2, #31
 80026c8:	d5f3      	bpl.n	80026b2 <HAL_ADC_Init+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80026cc:	f043 0310 	orr.w	r3, r3, #16
 80026d0:	62a3      	str	r3, [r4, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80026da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 80026de:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026e0:	f043 0310 	orr.w	r3, r3, #16
 80026e4:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80026e6:	bd38      	pop	{r3, r4, r5, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 80026e8:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80026ea:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80026ee:	f7fe fd2b 	bl	8001148 <HAL_ADC_MspInit>
 80026f2:	e78d      	b.n	8002610 <HAL_ADC_Init+0x10>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026f4:	7d20      	ldrb	r0, [r4, #20]
 80026f6:	2801      	cmp	r0, #1
 80026f8:	d019      	beq.n	800272e <HAL_ADC_Init+0x12e>
      MODIFY_REG(hadc->Instance->CR1,
 80026fa:	6858      	ldr	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80026fc:	491d      	ldr	r1, [pc, #116]	; (8002774 <HAL_ADC_Init+0x174>)
      MODIFY_REG(hadc->Instance->CR1,
 80026fe:	f420 4069 	bic.w	r0, r0, #59648	; 0xe900
 8002702:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8002706:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002708:	6898      	ldr	r0, [r3, #8]
 800270a:	4001      	ands	r1, r0
 800270c:	4311      	orrs	r1, r2
 800270e:	6099      	str	r1, [r3, #8]
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002710:	6921      	ldr	r1, [r4, #16]
 8002712:	3901      	subs	r1, #1
 8002714:	0508      	lsls	r0, r1, #20
 8002716:	e7ab      	b.n	8002670 <HAL_ADC_Init+0x70>
    return HAL_ERROR;
 8002718:	2001      	movs	r0, #1
}
 800271a:	4770      	bx	lr
      ADC_CLEAR_ERRORCODE(hadc);
 800271c:	2000      	movs	r0, #0
 800271e:	62e0      	str	r0, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8002720:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002722:	f023 0303 	bic.w	r3, r3, #3
 8002726:	f043 0301 	orr.w	r3, r3, #1
 800272a:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800272c:	bd38      	pop	{r3, r4, r5, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800272e:	468c      	mov	ip, r1
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002730:	b1c5      	cbz	r5, 8002764 <HAL_ADC_Init+0x164>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002732:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002734:	f040 0020 	orr.w	r0, r0, #32
 8002738:	62a0      	str	r0, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800273a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800273c:	f040 0001 	orr.w	r0, r0, #1
 8002740:	62e0      	str	r0, [r4, #44]	; 0x2c
      MODIFY_REG(hadc->Instance->CR1,
 8002742:	6858      	ldr	r0, [r3, #4]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002744:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8002748:	f420 4069 	bic.w	r0, r0, #59648	; 0xe900
 800274c:	ea40 000c 	orr.w	r0, r0, ip
 8002750:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002752:	689d      	ldr	r5, [r3, #8]
 8002754:	4807      	ldr	r0, [pc, #28]	; (8002774 <HAL_ADC_Init+0x174>)
 8002756:	ea00 0005 	and.w	r0, r0, r5
 800275a:	ea40 0002 	orr.w	r0, r0, r2
 800275e:	6098      	str	r0, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002760:	d183      	bne.n	800266a <HAL_ADC_Init+0x6a>
 8002762:	e7d5      	b.n	8002710 <HAL_ADC_Init+0x110>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002764:	69a0      	ldr	r0, [r4, #24]
 8002766:	3801      	subs	r0, #1
 8002768:	ea4c 3040 	orr.w	r0, ip, r0, lsl #13
 800276c:	f440 6c00 	orr.w	ip, r0, #2048	; 0x800
 8002770:	e7e7      	b.n	8002742 <HAL_ADC_Init+0x142>
 8002772:	bf00      	nop
 8002774:	ffe1f7fd 	.word	0xffe1f7fd
 8002778:	ff1f0efe 	.word	0xff1f0efe

0800277c <HAL_ADC_Stop>:
{
 800277c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hadc);
 800277e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002782:	2b01      	cmp	r3, #1
 8002784:	d035      	beq.n	80027f2 <HAL_ADC_Stop+0x76>
 8002786:	2201      	movs	r2, #1
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002788:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hadc);
 800278a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  if (ADC_IS_ENABLE(hadc) != RESET)
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	4604      	mov	r4, r0
 8002792:	07d0      	lsls	r0, r2, #31
 8002794:	d40c      	bmi.n	80027b0 <HAL_ADC_Stop+0x34>
    ADC_STATE_CLR_SET(hadc->State,
 8002796:	2000      	movs	r0, #0
 8002798:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800279a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800279e:	f023 0301 	bic.w	r3, r3, #1
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	62a3      	str	r3, [r4, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 80027a8:	2300      	movs	r3, #0
 80027aa:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80027ae:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80027b0:	689a      	ldr	r2, [r3, #8]
 80027b2:	f022 0201 	bic.w	r2, r2, #1
 80027b6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80027b8:	f7ff ff0a 	bl	80025d0 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027bc:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80027be:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	07d9      	lsls	r1, r3, #31
 80027c4:	d5e7      	bpl.n	8002796 <HAL_ADC_Stop+0x1a>
 80027c6:	e002      	b.n	80027ce <HAL_ADC_Stop+0x52>
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	07db      	lsls	r3, r3, #31
 80027cc:	d5e3      	bpl.n	8002796 <HAL_ADC_Stop+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027ce:	f7ff feff 	bl	80025d0 <HAL_GetTick>
 80027d2:	1b43      	subs	r3, r0, r5
 80027d4:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) != RESET)
 80027d6:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027d8:	d9f6      	bls.n	80027c8 <HAL_ADC_Stop+0x4c>
        if(ADC_IS_ENABLE(hadc) != RESET)
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	07d2      	lsls	r2, r2, #31
 80027de:	d5f3      	bpl.n	80027c8 <HAL_ADC_Stop+0x4c>
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027e0:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80027e4:	f043 0310 	orr.w	r3, r3, #16
 80027e8:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80027ec:	4303      	orrs	r3, r0
 80027ee:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (tmp_hal_status == HAL_OK)
 80027f0:	e7da      	b.n	80027a8 <HAL_ADC_Stop+0x2c>
  __HAL_LOCK(hadc);
 80027f2:	2002      	movs	r0, #2
}
 80027f4:	bd38      	pop	{r3, r4, r5, pc}
 80027f6:	bf00      	nop

080027f8 <HAL_ADC_PollForConversion>:
{
 80027f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027fc:	4605      	mov	r5, r0
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80027fe:	2400      	movs	r4, #0
{
 8002800:	b082      	sub	sp, #8
 8002802:	460e      	mov	r6, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002804:	9401      	str	r4, [sp, #4]
  tickstart = HAL_GetTick();
 8002806:	f7ff fee3 	bl	80025d0 <HAL_GetTick>
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800280a:	682b      	ldr	r3, [r5, #0]
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	05d7      	lsls	r7, r2, #23
 8002810:	d46e      	bmi.n	80028f0 <HAL_ADC_PollForConversion+0xf8>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	4607      	mov	r7, r0
 8002816:	05d1      	lsls	r1, r2, #23
 8002818:	d41a      	bmi.n	8002850 <HAL_ADC_PollForConversion+0x58>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800281a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800281c:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8002820:	d116      	bne.n	8002850 <HAL_ADC_PollForConversion+0x58>
 8002822:	1c72      	adds	r2, r6, #1
 8002824:	d16e      	bne.n	8002904 <HAL_ADC_PollForConversion+0x10c>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	0794      	lsls	r4, r2, #30
 800282a:	d5fc      	bpl.n	8002826 <HAL_ADC_PollForConversion+0x2e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800282c:	f06f 0212 	mvn.w	r2, #18
 8002830:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002832:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8002834:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002838:	62aa      	str	r2, [r5, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002840:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002844:	f000 808a 	beq.w	800295c <HAL_ADC_PollForConversion+0x164>
  return HAL_OK;
 8002848:	2000      	movs	r0, #0
}
 800284a:	b002      	add	sp, #8
 800284c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002850:	4b4c      	ldr	r3, [pc, #304]	; (8002984 <HAL_ADC_PollForConversion+0x18c>)
 8002852:	2002      	movs	r0, #2
 8002854:	f8d3 8000 	ldr.w	r8, [r3]
 8002858:	f002 fb0a 	bl	8004e70 <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800285c:	682a      	ldr	r2, [r5, #0]
 800285e:	494a      	ldr	r1, [pc, #296]	; (8002988 <HAL_ADC_PollForConversion+0x190>)
 8002860:	6914      	ldr	r4, [r2, #16]
 8002862:	4613      	mov	r3, r2
 8002864:	420c      	tst	r4, r1
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002866:	fbb8 f0f0 	udiv	r0, r8, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800286a:	d110      	bne.n	800288e <HAL_ADC_PollForConversion+0x96>
 800286c:	68d4      	ldr	r4, [r2, #12]
 800286e:	f101 415c 	add.w	r1, r1, #3690987520	; 0xdc000000
 8002872:	420c      	tst	r4, r1
 8002874:	d10b      	bne.n	800288e <HAL_ADC_PollForConversion+0x96>
 8002876:	6914      	ldr	r4, [r2, #16]
 8002878:	4944      	ldr	r1, [pc, #272]	; (800298c <HAL_ADC_PollForConversion+0x194>)
 800287a:	420c      	tst	r4, r1
 800287c:	d17f      	bne.n	800297e <HAL_ADC_PollForConversion+0x186>
 800287e:	68d4      	ldr	r4, [r2, #12]
 8002880:	f101 416e 	add.w	r1, r1, #3992977408	; 0xee000000
 8002884:	420c      	tst	r4, r1
 8002886:	bf14      	ite	ne
 8002888:	2429      	movne	r4, #41	; 0x29
 800288a:	2414      	moveq	r4, #20
 800288c:	e009      	b.n	80028a2 <HAL_ADC_PollForConversion+0xaa>
 800288e:	6914      	ldr	r4, [r2, #16]
 8002890:	493e      	ldr	r1, [pc, #248]	; (800298c <HAL_ADC_PollForConversion+0x194>)
 8002892:	420c      	tst	r4, r1
 8002894:	d122      	bne.n	80028dc <HAL_ADC_PollForConversion+0xe4>
 8002896:	68d4      	ldr	r4, [r2, #12]
 8002898:	f101 416e 	add.w	r1, r1, #3992977408	; 0xee000000
 800289c:	420c      	tst	r4, r1
 800289e:	d11d      	bne.n	80028dc <HAL_ADC_PollForConversion+0xe4>
 80028a0:	2454      	movs	r4, #84	; 0x54
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80028a2:	fb00 f404 	mul.w	r4, r0, r4
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80028a6:	9901      	ldr	r1, [sp, #4]
 80028a8:	428c      	cmp	r4, r1
 80028aa:	d9bf      	bls.n	800282c <HAL_ADC_PollForConversion+0x34>
 80028ac:	1c71      	adds	r1, r6, #1
 80028ae:	d032      	beq.n	8002916 <HAL_ADC_PollForConversion+0x11e>
 80028b0:	b136      	cbz	r6, 80028c0 <HAL_ADC_PollForConversion+0xc8>
 80028b2:	e038      	b.n	8002926 <HAL_ADC_PollForConversion+0x12e>
      Conversion_Timeout_CPU_cycles ++;
 80028b4:	9b01      	ldr	r3, [sp, #4]
 80028b6:	3301      	adds	r3, #1
 80028b8:	9301      	str	r3, [sp, #4]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80028ba:	9b01      	ldr	r3, [sp, #4]
 80028bc:	42a3      	cmp	r3, r4
 80028be:	d230      	bcs.n	8002922 <HAL_ADC_PollForConversion+0x12a>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80028c0:	9b01      	ldr	r3, [sp, #4]
 80028c2:	42a3      	cmp	r3, r4
 80028c4:	d2f6      	bcs.n	80028b4 <HAL_ADC_PollForConversion+0xbc>
            __HAL_UNLOCK(hadc);
 80028c6:	2200      	movs	r2, #0
            return HAL_TIMEOUT;
 80028c8:	2003      	movs	r0, #3
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80028ca:	6aab      	ldr	r3, [r5, #40]	; 0x28
            __HAL_UNLOCK(hadc);
 80028cc:	f885 2024 	strb.w	r2, [r5, #36]	; 0x24
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80028d0:	f043 0304 	orr.w	r3, r3, #4
 80028d4:	62ab      	str	r3, [r5, #40]	; 0x28
}
 80028d6:	b002      	add	sp, #8
 80028d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80028dc:	6914      	ldr	r4, [r2, #16]
 80028de:	492c      	ldr	r1, [pc, #176]	; (8002990 <HAL_ADC_PollForConversion+0x198>)
 80028e0:	420c      	tst	r4, r1
 80028e2:	d131      	bne.n	8002948 <HAL_ADC_PollForConversion+0x150>
 80028e4:	68d4      	ldr	r4, [r2, #12]
 80028e6:	420c      	tst	r4, r1
 80028e8:	bf14      	ite	ne
 80028ea:	24fc      	movne	r4, #252	; 0xfc
 80028ec:	2454      	moveq	r4, #84	; 0x54
 80028ee:	e7d8      	b.n	80028a2 <HAL_ADC_PollForConversion+0xaa>
    return HAL_ERROR;
 80028f0:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028f2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 80028f4:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028f8:	f043 0320 	orr.w	r3, r3, #32
 80028fc:	62ab      	str	r3, [r5, #40]	; 0x28
}
 80028fe:	b002      	add	sp, #8
 8002900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	0790      	lsls	r0, r2, #30
 8002908:	d490      	bmi.n	800282c <HAL_ADC_PollForConversion+0x34>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800290a:	b9fe      	cbnz	r6, 800294c <HAL_ADC_PollForConversion+0x154>
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	f012 0202 	ands.w	r2, r2, #2
 8002912:	d186      	bne.n	8002822 <HAL_ADC_PollForConversion+0x2a>
 8002914:	e7d8      	b.n	80028c8 <HAL_ADC_PollForConversion+0xd0>
      Conversion_Timeout_CPU_cycles ++;
 8002916:	9b01      	ldr	r3, [sp, #4]
 8002918:	3301      	adds	r3, #1
 800291a:	9301      	str	r3, [sp, #4]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800291c:	9b01      	ldr	r3, [sp, #4]
 800291e:	429c      	cmp	r4, r3
 8002920:	d8f9      	bhi.n	8002916 <HAL_ADC_PollForConversion+0x11e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002922:	4613      	mov	r3, r2
 8002924:	e782      	b.n	800282c <HAL_ADC_PollForConversion+0x34>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002926:	f7ff fe53 	bl	80025d0 <HAL_GetTick>
 800292a:	1bc3      	subs	r3, r0, r7
 800292c:	429e      	cmp	r6, r3
 800292e:	d202      	bcs.n	8002936 <HAL_ADC_PollForConversion+0x13e>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002930:	9b01      	ldr	r3, [sp, #4]
 8002932:	429c      	cmp	r4, r3
 8002934:	d8c7      	bhi.n	80028c6 <HAL_ADC_PollForConversion+0xce>
      Conversion_Timeout_CPU_cycles ++;
 8002936:	9b01      	ldr	r3, [sp, #4]
 8002938:	3301      	adds	r3, #1
 800293a:	9301      	str	r3, [sp, #4]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800293c:	9b01      	ldr	r3, [sp, #4]
 800293e:	429c      	cmp	r4, r3
 8002940:	d8f1      	bhi.n	8002926 <HAL_ADC_PollForConversion+0x12e>
 8002942:	682a      	ldr	r2, [r5, #0]
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002944:	4613      	mov	r3, r2
 8002946:	e771      	b.n	800282c <HAL_ADC_PollForConversion+0x34>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002948:	24fc      	movs	r4, #252	; 0xfc
 800294a:	e7aa      	b.n	80028a2 <HAL_ADC_PollForConversion+0xaa>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800294c:	f7ff fe40 	bl	80025d0 <HAL_GetTick>
 8002950:	1bc3      	subs	r3, r0, r7
 8002952:	42b3      	cmp	r3, r6
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002954:	682b      	ldr	r3, [r5, #0]
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002956:	f67f af64 	bls.w	8002822 <HAL_ADC_PollForConversion+0x2a>
 800295a:	e7d7      	b.n	800290c <HAL_ADC_PollForConversion+0x114>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800295c:	7b28      	ldrb	r0, [r5, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800295e:	2800      	cmp	r0, #0
 8002960:	f47f af72 	bne.w	8002848 <HAL_ADC_PollForConversion+0x50>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002964:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002966:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800296a:	62ab      	str	r3, [r5, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800296c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800296e:	04db      	lsls	r3, r3, #19
 8002970:	f53f af6a 	bmi.w	8002848 <HAL_ADC_PollForConversion+0x50>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002974:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002976:	f043 0301 	orr.w	r3, r3, #1
 800297a:	62ab      	str	r3, [r5, #40]	; 0x28
 800297c:	e765      	b.n	800284a <HAL_ADC_PollForConversion+0x52>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800297e:	2429      	movs	r4, #41	; 0x29
 8002980:	e78f      	b.n	80028a2 <HAL_ADC_PollForConversion+0xaa>
 8002982:	bf00      	nop
 8002984:	20000010 	.word	0x20000010
 8002988:	24924924 	.word	0x24924924
 800298c:	12492492 	.word	0x12492492
 8002990:	00249249 	.word	0x00249249

08002994 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8002994:	6803      	ldr	r3, [r0, #0]
 8002996:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop

0800299c <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 800299c:	2300      	movs	r3, #0
{ 
 800299e:	b530      	push	{r4, r5, lr}
 80029a0:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 80029a2:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80029a4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d074      	beq.n	8002a96 <HAL_ADC_ConfigChannel+0xfa>
 80029ac:	2301      	movs	r3, #1
 80029ae:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 80029b2:	684b      	ldr	r3, [r1, #4]
 80029b4:	4602      	mov	r2, r0
 80029b6:	2b06      	cmp	r3, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80029b8:	6804      	ldr	r4, [r0, #0]
  if (sConfig->Rank < 7U)
 80029ba:	d932      	bls.n	8002a22 <HAL_ADC_ConfigChannel+0x86>
  else if (sConfig->Rank < 13U)
 80029bc:	2b0c      	cmp	r3, #12
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80029be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 13U)
 80029c2:	d84e      	bhi.n	8002a62 <HAL_ADC_ConfigChannel+0xc6>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80029c4:	f04f 0c1f 	mov.w	ip, #31
 80029c8:	6808      	ldr	r0, [r1, #0]
 80029ca:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80029cc:	3b23      	subs	r3, #35	; 0x23
 80029ce:	fa00 fe03 	lsl.w	lr, r0, r3
 80029d2:	fa0c f303 	lsl.w	r3, ip, r3
 80029d6:	ea25 0303 	bic.w	r3, r5, r3
 80029da:	ea43 030e 	orr.w	r3, r3, lr
 80029de:	6323      	str	r3, [r4, #48]	; 0x30
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80029e0:	2809      	cmp	r0, #9
 80029e2:	d930      	bls.n	8002a46 <HAL_ADC_ConfigChannel+0xaa>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80029e4:	f04f 0c07 	mov.w	ip, #7
 80029e8:	688d      	ldr	r5, [r1, #8]
 80029ea:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 80029ee:	68e3      	ldr	r3, [r4, #12]
 80029f0:	391e      	subs	r1, #30
 80029f2:	408d      	lsls	r5, r1
 80029f4:	fa0c f101 	lsl.w	r1, ip, r1
 80029f8:	ea23 0301 	bic.w	r3, r3, r1
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80029fc:	f1a0 0110 	sub.w	r1, r0, #16
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a00:	432b      	orrs	r3, r5
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a02:	2901      	cmp	r1, #1
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a04:	60e3      	str	r3, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a06:	d844      	bhi.n	8002a92 <HAL_ADC_ConfigChannel+0xf6>
    if (hadc->Instance == ADC1)
 8002a08:	4b2e      	ldr	r3, [pc, #184]	; (8002ac4 <HAL_ADC_ConfigChannel+0x128>)
 8002a0a:	429c      	cmp	r4, r3
 8002a0c:	d038      	beq.n	8002a80 <HAL_ADC_ConfigChannel+0xe4>
      tmp_hal_status = HAL_ERROR;
 8002a0e:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a10:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002a12:	f043 0320 	orr.w	r3, r3, #32
 8002a16:	6293      	str	r3, [r2, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 8002a18:	2300      	movs	r3, #0
 8002a1a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
}
 8002a1e:	b003      	add	sp, #12
 8002a20:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a22:	f04f 0c1f 	mov.w	ip, #31
 8002a26:	6808      	ldr	r0, [r1, #0]
 8002a28:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002a2c:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8002a2e:	3b05      	subs	r3, #5
 8002a30:	fa00 fe03 	lsl.w	lr, r0, r3
 8002a34:	fa0c f303 	lsl.w	r3, ip, r3
 8002a38:	ea25 0303 	bic.w	r3, r5, r3
 8002a3c:	ea43 030e 	orr.w	r3, r3, lr
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a40:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a42:	6363      	str	r3, [r4, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a44:	d8ce      	bhi.n	80029e4 <HAL_ADC_ConfigChannel+0x48>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a46:	2507      	movs	r5, #7
 8002a48:	6889      	ldr	r1, [r1, #8]
 8002a4a:	6923      	ldr	r3, [r4, #16]
 8002a4c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002a50:	4081      	lsls	r1, r0
 8002a52:	fa05 f000 	lsl.w	r0, r5, r0
 8002a56:	ea23 0300 	bic.w	r3, r3, r0
 8002a5a:	430b      	orrs	r3, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a5c:	2000      	movs	r0, #0
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a5e:	6123      	str	r3, [r4, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a60:	e7da      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002a62:	f04f 0c1f 	mov.w	ip, #31
 8002a66:	6808      	ldr	r0, [r1, #0]
 8002a68:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8002a6a:	3b41      	subs	r3, #65	; 0x41
 8002a6c:	fa00 fe03 	lsl.w	lr, r0, r3
 8002a70:	fa0c f303 	lsl.w	r3, ip, r3
 8002a74:	ea25 0303 	bic.w	r3, r5, r3
 8002a78:	ea43 030e 	orr.w	r3, r3, lr
 8002a7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a7e:	e7af      	b.n	80029e0 <HAL_ADC_ConfigChannel+0x44>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002a80:	68a3      	ldr	r3, [r4, #8]
 8002a82:	021b      	lsls	r3, r3, #8
 8002a84:	d405      	bmi.n	8002a92 <HAL_ADC_ConfigChannel+0xf6>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002a86:	68a3      	ldr	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a88:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002a8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a8e:	60a3      	str	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a90:	d004      	beq.n	8002a9c <HAL_ADC_ConfigChannel+0x100>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a92:	2000      	movs	r0, #0
 8002a94:	e7c0      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x7c>
  __HAL_LOCK(hadc);
 8002a96:	2002      	movs	r0, #2
}
 8002a98:	b003      	add	sp, #12
 8002a9a:	bd30      	pop	{r4, r5, pc}
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a9c:	4b0a      	ldr	r3, [pc, #40]	; (8002ac8 <HAL_ADC_ConfigChannel+0x12c>)
 8002a9e:	490b      	ldr	r1, [pc, #44]	; (8002acc <HAL_ADC_ConfigChannel+0x130>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	fba1 1303 	umull	r1, r3, r1, r3
 8002aa6:	0c9b      	lsrs	r3, r3, #18
 8002aa8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002ab0:	9b01      	ldr	r3, [sp, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0ed      	beq.n	8002a92 <HAL_ADC_ConfigChannel+0xf6>
            wait_loop_index--;
 8002ab6:	9b01      	ldr	r3, [sp, #4]
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002abc:	9b01      	ldr	r3, [sp, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f9      	bne.n	8002ab6 <HAL_ADC_ConfigChannel+0x11a>
 8002ac2:	e7e6      	b.n	8002a92 <HAL_ADC_ConfigChannel+0xf6>
 8002ac4:	40012400 	.word	0x40012400
 8002ac8:	20000010 	.word	0x20000010
 8002acc:	431bde83 	.word	0x431bde83

08002ad0 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8002ad0:	2300      	movs	r3, #0
{
 8002ad2:	b530      	push	{r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ad4:	6802      	ldr	r2, [r0, #0]
{
 8002ad6:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8002ad8:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ada:	6893      	ldr	r3, [r2, #8]
 8002adc:	07d9      	lsls	r1, r3, #31
 8002ade:	d427      	bmi.n	8002b30 <ADC_Enable+0x60>
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ae0:	4b1b      	ldr	r3, [pc, #108]	; (8002b50 <ADC_Enable+0x80>)
 8002ae2:	4604      	mov	r4, r0
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	481b      	ldr	r0, [pc, #108]	; (8002b54 <ADC_Enable+0x84>)
    __HAL_ADC_ENABLE(hadc);
 8002ae8:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002aea:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 8002aee:	f041 0101 	orr.w	r1, r1, #1
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002af2:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 8002af4:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002af6:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002af8:	9b01      	ldr	r3, [sp, #4]
 8002afa:	b12b      	cbz	r3, 8002b08 <ADC_Enable+0x38>
      wait_loop_index--;
 8002afc:	9b01      	ldr	r3, [sp, #4]
 8002afe:	3b01      	subs	r3, #1
 8002b00:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002b02:	9b01      	ldr	r3, [sp, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1f9      	bne.n	8002afc <ADC_Enable+0x2c>
    tickstart = HAL_GetTick();
 8002b08:	f7ff fd62 	bl	80025d0 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b0c:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002b0e:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	07da      	lsls	r2, r3, #31
 8002b14:	d40c      	bmi.n	8002b30 <ADC_Enable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b16:	f7ff fd5b 	bl	80025d0 <HAL_GetTick>
 8002b1a:	1b43      	subs	r3, r0, r5
 8002b1c:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002b1e:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b20:	d903      	bls.n	8002b2a <ADC_Enable+0x5a>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	f012 0201 	ands.w	r2, r2, #1
 8002b28:	d005      	beq.n	8002b36 <ADC_Enable+0x66>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	07db      	lsls	r3, r3, #31
 8002b2e:	d5f2      	bpl.n	8002b16 <ADC_Enable+0x46>
  return HAL_OK;
 8002b30:	2000      	movs	r0, #0
}
 8002b32:	b003      	add	sp, #12
 8002b34:	bd30      	pop	{r4, r5, pc}
          __HAL_UNLOCK(hadc);
 8002b36:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 8002b3a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b3e:	f043 0310 	orr.w	r3, r3, #16
 8002b42:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b46:	4303      	orrs	r3, r0
 8002b48:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8002b4a:	b003      	add	sp, #12
 8002b4c:	bd30      	pop	{r4, r5, pc}
 8002b4e:	bf00      	nop
 8002b50:	20000010 	.word	0x20000010
 8002b54:	431bde83 	.word	0x431bde83

08002b58 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8002b58:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d038      	beq.n	8002bd2 <HAL_ADC_Start+0x7a>
 8002b60:	2301      	movs	r3, #1
{
 8002b62:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8002b64:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8002b68:	4604      	mov	r4, r0
 8002b6a:	f7ff ffb1 	bl	8002ad0 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8002b6e:	bb60      	cbnz	r0, 8002bca <HAL_ADC_Start+0x72>
    ADC_STATE_CLR_SET(hadc->State,
 8002b70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002b72:	6822      	ldr	r2, [r4, #0]
 8002b74:	4929      	ldr	r1, [pc, #164]	; (8002c1c <HAL_ADC_Start+0xc4>)
    ADC_STATE_CLR_SET(hadc->State,
 8002b76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b7a:	f023 0301 	bic.w	r3, r3, #1
 8002b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002b82:	428a      	cmp	r2, r1
    ADC_STATE_CLR_SET(hadc->State,
 8002b84:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002b86:	d026      	beq.n	8002bd6 <HAL_ADC_Start+0x7e>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002b8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002b8e:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b90:	6853      	ldr	r3, [r2, #4]
 8002b92:	0559      	lsls	r1, r3, #21
 8002b94:	d42b      	bmi.n	8002bee <HAL_ADC_Start+0x96>
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 8002b98:	2100      	movs	r1, #0
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b9a:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b9e:	bf18      	it	ne
 8002ba0:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 8002ba2:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ba6:	bf18      	it	ne
 8002ba8:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8002bac:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002bae:	f06f 0302 	mvn.w	r3, #2
 8002bb2:	6013      	str	r3, [r2, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002bb4:	6893      	ldr	r3, [r2, #8]
 8002bb6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002bba:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002bbe:	d01d      	beq.n	8002bfc <HAL_ADC_Start+0xa4>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002bc0:	6893      	ldr	r3, [r2, #8]
 8002bc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bc6:	6093      	str	r3, [r2, #8]
}
 8002bc8:	bd10      	pop	{r4, pc}
    __HAL_UNLOCK(hadc);
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8002bd0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8002bd2:	2002      	movs	r0, #2
}
 8002bd4:	4770      	bx	lr
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002bd6:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <HAL_ADC_Start+0xc8>)
 8002bd8:	6859      	ldr	r1, [r3, #4]
 8002bda:	f411 2f70 	tst.w	r1, #983040	; 0xf0000
 8002bde:	d0d3      	beq.n	8002b88 <HAL_ADC_Start+0x30>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002be0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002be6:	62a1      	str	r1, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	055b      	lsls	r3, r3, #21
 8002bec:	d5d3      	bpl.n	8002b96 <HAL_ADC_Start+0x3e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002bee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002bf0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002bf4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bf8:	62a3      	str	r3, [r4, #40]	; 0x28
 8002bfa:	e7cc      	b.n	8002b96 <HAL_ADC_Start+0x3e>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002bfc:	4b07      	ldr	r3, [pc, #28]	; (8002c1c <HAL_ADC_Start+0xc4>)
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d004      	beq.n	8002c0c <HAL_ADC_Start+0xb4>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002c02:	6893      	ldr	r3, [r2, #8]
 8002c04:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8002c08:	6093      	str	r3, [r2, #8]
}
 8002c0a:	bd10      	pop	{r4, pc}
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002c0c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002c10:	685b      	ldr	r3, [r3, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002c12:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8002c16:	d1d3      	bne.n	8002bc0 <HAL_ADC_Start+0x68>
 8002c18:	e7f3      	b.n	8002c02 <HAL_ADC_Start+0xaa>
 8002c1a:	bf00      	nop
 8002c1c:	40012800 	.word	0x40012800
 8002c20:	40012400 	.word	0x40012400

08002c24 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c24:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c28:	4906      	ldr	r1, [pc, #24]	; (8002c44 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c2a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c2c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c32:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002c40:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002c42:	4770      	bx	lr
 8002c44:	e000ed00 	.word	0xe000ed00

08002c48 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c48:	4b1c      	ldr	r3, [pc, #112]	; (8002cbc <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c4a:	b500      	push	{lr}
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c52:	f1c3 0e07 	rsb	lr, r3, #7
 8002c56:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c5a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c5e:	bf28      	it	cs
 8002c60:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c64:	f1bc 0f06 	cmp.w	ip, #6
 8002c68:	d91b      	bls.n	8002ca2 <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c6a:	f04f 3cff 	mov.w	ip, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c6e:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c70:	fa0c fc03 	lsl.w	ip, ip, r3
 8002c74:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c78:	f04f 3cff 	mov.w	ip, #4294967295
 8002c7c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002c80:	ea21 010c 	bic.w	r1, r1, ip
 8002c84:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002c86:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c88:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002c8c:	db0c      	blt.n	8002ca8 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c8e:	0109      	lsls	r1, r1, #4
 8002c90:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002c94:	b2c9      	uxtb	r1, r1
 8002c96:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002c9a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002c9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ca2:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	e7e7      	b.n	8002c78 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca8:	4b05      	ldr	r3, [pc, #20]	; (8002cc0 <HAL_NVIC_SetPriority+0x78>)
 8002caa:	f000 000f 	and.w	r0, r0, #15
 8002cae:	0109      	lsls	r1, r1, #4
 8002cb0:	b2c9      	uxtb	r1, r1
 8002cb2:	4403      	add	r3, r0
 8002cb4:	7619      	strb	r1, [r3, #24]
 8002cb6:	f85d fb04 	ldr.w	pc, [sp], #4
 8002cba:	bf00      	nop
 8002cbc:	e000ed00 	.word	0xe000ed00
 8002cc0:	e000ecfc 	.word	0xe000ecfc

08002cc4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002cc4:	2800      	cmp	r0, #0
 8002cc6:	db07      	blt.n	8002cd8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cc8:	2301      	movs	r3, #1
 8002cca:	f000 011f 	and.w	r1, r0, #31
 8002cce:	4a03      	ldr	r2, [pc, #12]	; (8002cdc <HAL_NVIC_EnableIRQ+0x18>)
 8002cd0:	0940      	lsrs	r0, r0, #5
 8002cd2:	408b      	lsls	r3, r1
 8002cd4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	e000e100 	.word	0xe000e100

08002ce0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ce0:	3801      	subs	r0, #1
 8002ce2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002ce6:	d20f      	bcs.n	8002d08 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ce8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cec:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cf0:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cf2:	2107      	movs	r1, #7
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cf4:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf6:	4c05      	ldr	r4, [pc, #20]	; (8002d0c <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cf8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cfa:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cfe:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d00:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8002d02:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d04:	6119      	str	r1, [r3, #16]
 8002d06:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002d08:	2001      	movs	r0, #1
 8002d0a:	4770      	bx	lr
 8002d0c:	e000ed00 	.word	0xe000ed00

08002d10 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002d10:	b340      	cbz	r0, 8002d64 <HAL_DMA_Init+0x54>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002d12:	4603      	mov	r3, r0
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d14:	c805      	ldmia	r0, {r0, r2}
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d16:	f44f 7c80 	mov.w	ip, #256	; 0x100
{
 8002d1a:	b430      	push	{r4, r5}
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d1c:	2400      	movs	r4, #0
  tmp |=  hdma->Init.Direction        |
 8002d1e:	6899      	ldr	r1, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d20:	68dd      	ldr	r5, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002d22:	430a      	orrs	r2, r1
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002d24:	4910      	ldr	r1, [pc, #64]	; (8002d68 <HAL_DMA_Init+0x58>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d26:	432a      	orrs	r2, r5
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002d28:	4d10      	ldr	r5, [pc, #64]	; (8002d6c <HAL_DMA_Init+0x5c>)
 8002d2a:	4401      	add	r1, r0
 8002d2c:	fba5 5101 	umull	r5, r1, r5, r1
 8002d30:	0909      	lsrs	r1, r1, #4
 8002d32:	0089      	lsls	r1, r1, #2
 8002d34:	6419      	str	r1, [r3, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d36:	6919      	ldr	r1, [r3, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d38:	699d      	ldr	r5, [r3, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d3a:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d3c:	6959      	ldr	r1, [r3, #20]
 8002d3e:	430a      	orrs	r2, r1
  tmp = hdma->Instance->CCR;
 8002d40:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d42:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d44:	69dd      	ldr	r5, [r3, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002d46:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
 8002d4a:	f021 0130 	bic.w	r1, r1, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d4e:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Direction        |
 8002d50:	430a      	orrs	r2, r1
  hdma->DmaBaseAddress = DMA1;
 8002d52:	4907      	ldr	r1, [pc, #28]	; (8002d70 <HAL_DMA_Init+0x60>)
 8002d54:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 8002d56:	6002      	str	r2, [r0, #0]
  hdma->Lock = HAL_UNLOCKED;
 8002d58:	f8a3 c020 	strh.w	ip, [r3, #32]

  return HAL_OK;
 8002d5c:	4620      	mov	r0, r4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d5e:	639c      	str	r4, [r3, #56]	; 0x38
}
 8002d60:	bc30      	pop	{r4, r5}
 8002d62:	4770      	bx	lr
    return HAL_ERROR;
 8002d64:	2001      	movs	r0, #1
}
 8002d66:	4770      	bx	lr
 8002d68:	bffdfff8 	.word	0xbffdfff8
 8002d6c:	cccccccd 	.word	0xcccccccd
 8002d70:	40020000 	.word	0x40020000

08002d74 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d74:	4684      	mov	ip, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d76:	f890 0020 	ldrb.w	r0, [r0, #32]
 8002d7a:	2801      	cmp	r0, #1
 8002d7c:	d03f      	beq.n	8002dfe <HAL_DMA_Start_IT+0x8a>
{
 8002d7e:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma);
 8002d80:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d82:	f89c 0021 	ldrb.w	r0, [ip, #33]	; 0x21
  __HAL_LOCK(hdma);
 8002d86:	f88c 4020 	strb.w	r4, [ip, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d8a:	42a0      	cmp	r0, r4
 8002d8c:	d005      	beq.n	8002d9a <HAL_DMA_Start_IT+0x26>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002d8e:	2300      	movs	r3, #0
 8002d90:	f88c 3020 	strb.w	r3, [ip, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002d94:	2002      	movs	r0, #2
  }    
  return status;
}
 8002d96:	bc30      	pop	{r4, r5}
 8002d98:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d9a:	2402      	movs	r4, #2
 8002d9c:	f88c 4021 	strb.w	r4, [ip, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002da0:	2400      	movs	r4, #0
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002da2:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002da6:	f8cc 4038 	str.w	r4, [ip, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8002daa:	f8dc 4000 	ldr.w	r4, [ip]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002dae:	40a8      	lsls	r0, r5
    __HAL_DMA_DISABLE(hdma);
 8002db0:	6825      	ldr	r5, [r4, #0]
 8002db2:	f025 0501 	bic.w	r5, r5, #1
 8002db6:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002db8:	f8dc 503c 	ldr.w	r5, [ip, #60]	; 0x3c
 8002dbc:	6068      	str	r0, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002dbe:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dc0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8002dc4:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8002dc6:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002dca:	bf0b      	itete	eq
 8002dcc:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002dce:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002dd0:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002dd2:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8002dd4:	b153      	cbz	r3, 8002dec <HAL_DMA_Start_IT+0x78>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dd6:	6823      	ldr	r3, [r4, #0]
 8002dd8:	f043 030e 	orr.w	r3, r3, #14
 8002ddc:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002dde:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002de0:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8002de2:	f043 0301 	orr.w	r3, r3, #1
 8002de6:	6023      	str	r3, [r4, #0]
}
 8002de8:	bc30      	pop	{r4, r5}
 8002dea:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002dec:	6823      	ldr	r3, [r4, #0]
 8002dee:	f023 0304 	bic.w	r3, r3, #4
 8002df2:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002df4:	6823      	ldr	r3, [r4, #0]
 8002df6:	f043 030a 	orr.w	r3, r3, #10
 8002dfa:	6023      	str	r3, [r4, #0]
 8002dfc:	e7ef      	b.n	8002dde <HAL_DMA_Start_IT+0x6a>
  __HAL_LOCK(hdma);
 8002dfe:	2002      	movs	r0, #2
}
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop

08002e04 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e04:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{  
 8002e08:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e0a:	2a02      	cmp	r2, #2
 8002e0c:	d003      	beq.n	8002e16 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e0e:	2204      	movs	r2, #4
    status = HAL_ERROR;
 8002e10:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e12:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002e14:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e16:	6802      	ldr	r2, [r0, #0]
{  
 8002e18:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e1a:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e1c:	481b      	ldr	r0, [pc, #108]	; (8002e8c <HAL_DMA_Abort_IT+0x88>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e1e:	f021 010e 	bic.w	r1, r1, #14
 8002e22:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002e24:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e26:	4282      	cmp	r2, r0
    __HAL_DMA_DISABLE(hdma);
 8002e28:	f021 0101 	bic.w	r1, r1, #1
 8002e2c:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e2e:	d021      	beq.n	8002e74 <HAL_DMA_Abort_IT+0x70>
 8002e30:	4917      	ldr	r1, [pc, #92]	; (8002e90 <HAL_DMA_Abort_IT+0x8c>)
 8002e32:	428a      	cmp	r2, r1
 8002e34:	d01a      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x68>
 8002e36:	3114      	adds	r1, #20
 8002e38:	428a      	cmp	r2, r1
 8002e3a:	d01d      	beq.n	8002e78 <HAL_DMA_Abort_IT+0x74>
 8002e3c:	3114      	adds	r1, #20
 8002e3e:	428a      	cmp	r2, r1
 8002e40:	d01d      	beq.n	8002e7e <HAL_DMA_Abort_IT+0x7a>
 8002e42:	3114      	adds	r1, #20
 8002e44:	428a      	cmp	r2, r1
 8002e46:	d01d      	beq.n	8002e84 <HAL_DMA_Abort_IT+0x80>
 8002e48:	3114      	adds	r1, #20
 8002e4a:	428a      	cmp	r2, r1
 8002e4c:	bf0c      	ite	eq
 8002e4e:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 8002e52:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
    __HAL_UNLOCK(hdma);
 8002e56:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e5a:	4c0e      	ldr	r4, [pc, #56]	; (8002e94 <HAL_DMA_Abort_IT+0x90>)
    if(hdma->XferAbortCallback != NULL)
 8002e5c:	6b59      	ldr	r1, [r3, #52]	; 0x34
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e5e:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8002e60:	8418      	strh	r0, [r3, #32]
    if(hdma->XferAbortCallback != NULL)
 8002e62:	b129      	cbz	r1, 8002e70 <HAL_DMA_Abort_IT+0x6c>
      hdma->XferAbortCallback(hdma);
 8002e64:	4618      	mov	r0, r3
 8002e66:	4788      	blx	r1
  HAL_StatusTypeDef status = HAL_OK;
 8002e68:	2000      	movs	r0, #0
}
 8002e6a:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e6c:	2210      	movs	r2, #16
 8002e6e:	e7f2      	b.n	8002e56 <HAL_DMA_Abort_IT+0x52>
  HAL_StatusTypeDef status = HAL_OK;
 8002e70:	4608      	mov	r0, r1
}
 8002e72:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e74:	2201      	movs	r2, #1
 8002e76:	e7ee      	b.n	8002e56 <HAL_DMA_Abort_IT+0x52>
 8002e78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e7c:	e7eb      	b.n	8002e56 <HAL_DMA_Abort_IT+0x52>
 8002e7e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e82:	e7e8      	b.n	8002e56 <HAL_DMA_Abort_IT+0x52>
 8002e84:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e88:	e7e5      	b.n	8002e56 <HAL_DMA_Abort_IT+0x52>
 8002e8a:	bf00      	nop
 8002e8c:	40020008 	.word	0x40020008
 8002e90:	4002001c 	.word	0x4002001c
 8002e94:	40020000 	.word	0x40020000

08002e98 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002e98:	2204      	movs	r2, #4
{
 8002e9a:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e9c:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002e9e:	6c01      	ldr	r1, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ea0:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002ea2:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002ea4:	408a      	lsls	r2, r1
 8002ea6:	4222      	tst	r2, r4
  uint32_t source_it = hdma->Instance->CCR;
 8002ea8:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002eaa:	d01f      	beq.n	8002eec <HAL_DMA_IRQHandler+0x54>
 8002eac:	076a      	lsls	r2, r5, #29
 8002eae:	d51d      	bpl.n	8002eec <HAL_DMA_IRQHandler+0x54>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	0691      	lsls	r1, r2, #26
 8002eb4:	d403      	bmi.n	8002ebe <HAL_DMA_IRQHandler+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	f022 0204 	bic.w	r2, r2, #4
 8002ebc:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002ebe:	4a3e      	ldr	r2, [pc, #248]	; (8002fb8 <HAL_DMA_IRQHandler+0x120>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d050      	beq.n	8002f66 <HAL_DMA_IRQHandler+0xce>
 8002ec4:	3214      	adds	r2, #20
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d060      	beq.n	8002f8c <HAL_DMA_IRQHandler+0xf4>
 8002eca:	3214      	adds	r2, #20
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d067      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x108>
 8002ed0:	3214      	adds	r2, #20
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d06a      	beq.n	8002fac <HAL_DMA_IRQHandler+0x114>
 8002ed6:	3214      	adds	r2, #20
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d05c      	beq.n	8002f96 <HAL_DMA_IRQHandler+0xfe>
 8002edc:	3214      	adds	r2, #20
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	bf0c      	ite	eq
 8002ee2:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8002ee6:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8002eea:	e03d      	b.n	8002f68 <HAL_DMA_IRQHandler+0xd0>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002eec:	2202      	movs	r2, #2
 8002eee:	408a      	lsls	r2, r1
 8002ef0:	4222      	tst	r2, r4
 8002ef2:	d022      	beq.n	8002f3a <HAL_DMA_IRQHandler+0xa2>
 8002ef4:	07aa      	lsls	r2, r5, #30
 8002ef6:	d520      	bpl.n	8002f3a <HAL_DMA_IRQHandler+0xa2>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	0691      	lsls	r1, r2, #26
 8002efc:	d406      	bmi.n	8002f0c <HAL_DMA_IRQHandler+0x74>
      hdma->State = HAL_DMA_STATE_READY;
 8002efe:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	f022 020a 	bic.w	r2, r2, #10
 8002f06:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002f08:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002f0c:	4a2a      	ldr	r2, [pc, #168]	; (8002fb8 <HAL_DMA_IRQHandler+0x120>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d031      	beq.n	8002f76 <HAL_DMA_IRQHandler+0xde>
 8002f12:	3214      	adds	r2, #20
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d041      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x104>
 8002f18:	3214      	adds	r2, #20
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d043      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0x10e>
 8002f1e:	3214      	adds	r2, #20
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d035      	beq.n	8002f90 <HAL_DMA_IRQHandler+0xf8>
 8002f24:	3214      	adds	r2, #20
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d043      	beq.n	8002fb2 <HAL_DMA_IRQHandler+0x11a>
 8002f2a:	3214      	adds	r2, #20
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	bf0c      	ite	eq
 8002f30:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8002f34:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8002f38:	e01e      	b.n	8002f78 <HAL_DMA_IRQHandler+0xe0>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002f3a:	2208      	movs	r2, #8
 8002f3c:	408a      	lsls	r2, r1
 8002f3e:	4222      	tst	r2, r4
 8002f40:	d017      	beq.n	8002f72 <HAL_DMA_IRQHandler+0xda>
 8002f42:	072a      	lsls	r2, r5, #28
 8002f44:	d515      	bpl.n	8002f72 <HAL_DMA_IRQHandler+0xda>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f46:	681a      	ldr	r2, [r3, #0]
    __HAL_UNLOCK(hdma);
 8002f48:	f44f 7480 	mov.w	r4, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f4c:	f022 020e 	bic.w	r2, r2, #14
 8002f50:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f52:	2301      	movs	r3, #1
    if (hdma->XferErrorCallback != NULL)
 8002f54:	6b02      	ldr	r2, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f56:	fa03 f101 	lsl.w	r1, r3, r1
 8002f5a:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f5c:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8002f5e:	8404      	strh	r4, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8002f60:	b13a      	cbz	r2, 8002f72 <HAL_DMA_IRQHandler+0xda>
}
 8002f62:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8002f64:	4710      	bx	r2
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002f66:	2304      	movs	r3, #4
 8002f68:	4914      	ldr	r1, [pc, #80]	; (8002fbc <HAL_DMA_IRQHandler+0x124>)
    if(hdma->XferHalfCpltCallback != NULL)
 8002f6a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002f6c:	604b      	str	r3, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8002f6e:	2a00      	cmp	r2, #0
 8002f70:	d1f7      	bne.n	8002f62 <HAL_DMA_IRQHandler+0xca>
}
 8002f72:	bc70      	pop	{r4, r5, r6}
 8002f74:	4770      	bx	lr
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002f76:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 8002f78:	2100      	movs	r1, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002f7a:	4c10      	ldr	r4, [pc, #64]	; (8002fbc <HAL_DMA_IRQHandler+0x124>)
    if(hdma->XferCpltCallback != NULL)
 8002f7c:	6a82      	ldr	r2, [r0, #40]	; 0x28
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002f7e:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hdma);
 8002f80:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002f84:	2a00      	cmp	r2, #0
 8002f86:	d0f4      	beq.n	8002f72 <HAL_DMA_IRQHandler+0xda>
}
 8002f88:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8002f8a:	4710      	bx	r2
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002f8c:	2340      	movs	r3, #64	; 0x40
 8002f8e:	e7eb      	b.n	8002f68 <HAL_DMA_IRQHandler+0xd0>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002f90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f94:	e7f0      	b.n	8002f78 <HAL_DMA_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002f96:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f9a:	e7e5      	b.n	8002f68 <HAL_DMA_IRQHandler+0xd0>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002f9c:	2320      	movs	r3, #32
 8002f9e:	e7eb      	b.n	8002f78 <HAL_DMA_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002fa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fa4:	e7e0      	b.n	8002f68 <HAL_DMA_IRQHandler+0xd0>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002fa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002faa:	e7e5      	b.n	8002f78 <HAL_DMA_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002fac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002fb0:	e7da      	b.n	8002f68 <HAL_DMA_IRQHandler+0xd0>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002fb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fb6:	e7df      	b.n	8002f78 <HAL_DMA_IRQHandler+0xe0>
 8002fb8:	40020008 	.word	0x40020008
 8002fbc:	40020000 	.word	0x40020000

08002fc0 <HAL_DMA_GetState>:
}
 8002fc0:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop

08002fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fcc:	680e      	ldr	r6, [r1, #0]
{
 8002fce:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fd0:	2e00      	cmp	r6, #0
 8002fd2:	f000 80b5 	beq.w	8003140 <HAL_GPIO_Init+0x178>
 8002fd6:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002fd8:	4f7a      	ldr	r7, [pc, #488]	; (80031c4 <HAL_GPIO_Init+0x1fc>)
  uint32_t config = 0x00u;
 8002fda:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 8002fdc:	4613      	mov	r3, r2
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002fde:	4d7a      	ldr	r5, [pc, #488]	; (80031c8 <HAL_GPIO_Init+0x200>)
      switch (GPIO_Init->Mode)
 8002fe0:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 80031cc <HAL_GPIO_Init+0x204>
 8002fe4:	e006      	b.n	8002ff4 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 8002fe6:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fe8:	fa36 f403 	lsrs.w	r4, r6, r3
 8002fec:	f102 0204 	add.w	r2, r2, #4
 8002ff0:	f000 80a6 	beq.w	8003140 <HAL_GPIO_Init+0x178>
    ioposition = (0x01uL << position);
 8002ff4:	2401      	movs	r4, #1
 8002ff6:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 8002ff8:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ffc:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 8003000:	d1f1      	bne.n	8002fe6 <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 8003002:	684e      	ldr	r6, [r1, #4]
 8003004:	2e12      	cmp	r6, #18
 8003006:	f200 809e 	bhi.w	8003146 <HAL_GPIO_Init+0x17e>
 800300a:	2e12      	cmp	r6, #18
 800300c:	d81a      	bhi.n	8003044 <HAL_GPIO_Init+0x7c>
 800300e:	e8df f006 	tbb	[pc, r6]
 8003012:	b9a7      	.short	0xb9a7
 8003014:	1919ceb5 	.word	0x1919ceb5
 8003018:	19191919 	.word	0x19191919
 800301c:	19191919 	.word	0x19191919
 8003020:	b1191919 	.word	0xb1191919
 8003024:	bc          	.byte	0xbc
 8003025:	00          	.byte	0x00
 8003026:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 80031d0 <HAL_GPIO_Init+0x208>
 800302a:	4576      	cmp	r6, lr
 800302c:	f000 8098 	beq.w	8003160 <HAL_GPIO_Init+0x198>
 8003030:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 8003034:	4576      	cmp	r6, lr
 8003036:	f000 8093 	beq.w	8003160 <HAL_GPIO_Init+0x198>
 800303a:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 800303e:	4576      	cmp	r6, lr
 8003040:	f000 808e 	beq.w	8003160 <HAL_GPIO_Init+0x198>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003044:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8003048:	bf9c      	itt	ls
 800304a:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800304c:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800304e:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003052:	bf84      	itt	hi
 8003054:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003058:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800305c:	f8de 4000 	ldr.w	r4, [lr]
 8003060:	fa0a f90b 	lsl.w	r9, sl, fp
 8003064:	fa06 fb0b 	lsl.w	fp, r6, fp
 8003068:	ea24 040b 	bic.w	r4, r4, fp
 800306c:	ea44 0409 	orr.w	r4, r4, r9
 8003070:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003074:	684c      	ldr	r4, [r1, #4]
 8003076:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 800307a:	d079      	beq.n	8003170 <HAL_GPIO_Init+0x1a8>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800307c:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003080:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003084:	f04e 0e01 	orr.w	lr, lr, #1
 8003088:	f8c7 e018 	str.w	lr, [r7, #24]
 800308c:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003090:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003094:	f00e 0e01 	and.w	lr, lr, #1
 8003098:	f8cd e004 	str.w	lr, [sp, #4]
 800309c:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 80030a0:	f023 0e03 	bic.w	lr, r3, #3
 80030a4:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 80030a8:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 80030ac:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030b0:	fa06 f609 	lsl.w	r6, r6, r9
 80030b4:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80030b8:	f8df b118 	ldr.w	fp, [pc, #280]	; 80031d4 <HAL_GPIO_Init+0x20c>
 80030bc:	4558      	cmp	r0, fp
 80030be:	d013      	beq.n	80030e8 <HAL_GPIO_Init+0x120>
 80030c0:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 80030c4:	4558      	cmp	r0, fp
 80030c6:	d06b      	beq.n	80031a0 <HAL_GPIO_Init+0x1d8>
 80030c8:	f8df b10c 	ldr.w	fp, [pc, #268]	; 80031d8 <HAL_GPIO_Init+0x210>
 80030cc:	4558      	cmp	r0, fp
 80030ce:	d060      	beq.n	8003192 <HAL_GPIO_Init+0x1ca>
 80030d0:	f8df b108 	ldr.w	fp, [pc, #264]	; 80031dc <HAL_GPIO_Init+0x214>
 80030d4:	4558      	cmp	r0, fp
 80030d6:	bf0c      	ite	eq
 80030d8:	f04f 0b03 	moveq.w	fp, #3
 80030dc:	f04f 0b04 	movne.w	fp, #4
 80030e0:	fa0b f909 	lsl.w	r9, fp, r9
 80030e4:	ea46 0609 	orr.w	r6, r6, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80030e8:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80030ec:	682e      	ldr	r6, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030ee:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80030f2:	bf14      	ite	ne
 80030f4:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80030f8:	ea26 060c 	biceq.w	r6, r6, ip
 80030fc:	602e      	str	r6, [r5, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80030fe:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003100:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8003104:	bf14      	ite	ne
 8003106:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800310a:	ea26 060c 	biceq.w	r6, r6, ip
 800310e:	606e      	str	r6, [r5, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8003110:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003112:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8003116:	bf14      	ite	ne
 8003118:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800311c:	ea26 060c 	biceq.w	r6, r6, ip
 8003120:	60ae      	str	r6, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003122:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8003126:	68ec      	ldr	r4, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003128:	d01f      	beq.n	800316a <HAL_GPIO_Init+0x1a2>
          SET_BIT(EXTI->FTSR, iocurrent);
 800312a:	ea44 040c 	orr.w	r4, r4, ip
 800312e:	60ec      	str	r4, [r5, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003130:	680e      	ldr	r6, [r1, #0]
	position++;
 8003132:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003134:	fa36 f403 	lsrs.w	r4, r6, r3
 8003138:	f102 0204 	add.w	r2, r2, #4
 800313c:	f47f af5a 	bne.w	8002ff4 <HAL_GPIO_Init+0x2c>
  }
}
 8003140:	b003      	add	sp, #12
 8003142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8003146:	4546      	cmp	r6, r8
 8003148:	d00a      	beq.n	8003160 <HAL_GPIO_Init+0x198>
 800314a:	f67f af6c 	bls.w	8003026 <HAL_GPIO_Init+0x5e>
 800314e:	f8df e090 	ldr.w	lr, [pc, #144]	; 80031e0 <HAL_GPIO_Init+0x218>
 8003152:	4576      	cmp	r6, lr
 8003154:	d004      	beq.n	8003160 <HAL_GPIO_Init+0x198>
 8003156:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 800315a:	4576      	cmp	r6, lr
 800315c:	f47f af72 	bne.w	8003044 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003160:	688e      	ldr	r6, [r1, #8]
 8003162:	bb3e      	cbnz	r6, 80031b4 <HAL_GPIO_Init+0x1ec>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003164:	f04f 0a04 	mov.w	sl, #4
 8003168:	e76c      	b.n	8003044 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800316a:	ea24 040c 	bic.w	r4, r4, ip
 800316e:	60ec      	str	r4, [r5, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003170:	680e      	ldr	r6, [r1, #0]
 8003172:	e738      	b.n	8002fe6 <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003174:	68cc      	ldr	r4, [r1, #12]
 8003176:	f104 0a04 	add.w	sl, r4, #4
          break;
 800317a:	e763      	b.n	8003044 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800317c:	68cc      	ldr	r4, [r1, #12]
 800317e:	f104 0a08 	add.w	sl, r4, #8
          break;
 8003182:	e75f      	b.n	8003044 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003184:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 8003188:	e75c      	b.n	8003044 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800318a:	68cc      	ldr	r4, [r1, #12]
 800318c:	f104 0a0c 	add.w	sl, r4, #12
          break;
 8003190:	e758      	b.n	8003044 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003192:	f04f 0b02 	mov.w	fp, #2
 8003196:	fa0b f909 	lsl.w	r9, fp, r9
 800319a:	ea46 0609 	orr.w	r6, r6, r9
 800319e:	e7a3      	b.n	80030e8 <HAL_GPIO_Init+0x120>
 80031a0:	f04f 0b01 	mov.w	fp, #1
 80031a4:	fa0b f909 	lsl.w	r9, fp, r9
 80031a8:	ea46 0609 	orr.w	r6, r6, r9
 80031ac:	e79c      	b.n	80030e8 <HAL_GPIO_Init+0x120>
      switch (GPIO_Init->Mode)
 80031ae:	f04f 0a00 	mov.w	sl, #0
 80031b2:	e747      	b.n	8003044 <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80031b4:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031b6:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 80031ba:	bf0c      	ite	eq
 80031bc:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 80031be:	6144      	strne	r4, [r0, #20]
 80031c0:	e740      	b.n	8003044 <HAL_GPIO_Init+0x7c>
 80031c2:	bf00      	nop
 80031c4:	40021000 	.word	0x40021000
 80031c8:	40010400 	.word	0x40010400
 80031cc:	10220000 	.word	0x10220000
 80031d0:	10120000 	.word	0x10120000
 80031d4:	40010800 	.word	0x40010800
 80031d8:	40011000 	.word	0x40011000
 80031dc:	40011400 	.word	0x40011400
 80031e0:	10310000 	.word	0x10310000

080031e4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031e4:	6883      	ldr	r3, [r0, #8]
 80031e6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80031e8:	bf14      	ite	ne
 80031ea:	2001      	movne	r0, #1
 80031ec:	2000      	moveq	r0, #0
 80031ee:	4770      	bx	lr

080031f0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031f0:	b902      	cbnz	r2, 80031f4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031f2:	0409      	lsls	r1, r1, #16
 80031f4:	6101      	str	r1, [r0, #16]
  }
}
 80031f6:	4770      	bx	lr

080031f8 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop

080031fc <HAL_GPIO_EXTI_IRQHandler>:
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80031fc:	4a04      	ldr	r2, [pc, #16]	; (8003210 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80031fe:	6951      	ldr	r1, [r2, #20]
 8003200:	4201      	tst	r1, r0
 8003202:	d100      	bne.n	8003206 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8003204:	4770      	bx	lr
{
 8003206:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003208:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800320a:	f7ff fff5 	bl	80031f8 <HAL_GPIO_EXTI_Callback>
}
 800320e:	bd08      	pop	{r3, pc}
 8003210:	40010400 	.word	0x40010400

08003214 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003218:	4606      	mov	r6, r0
 800321a:	468a      	mov	sl, r1
 800321c:	4617      	mov	r7, r2
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800321e:	6804      	ldr	r4, [r0, #0]
{
 8003220:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003222:	6823      	ldr	r3, [r4, #0]
{
 8003224:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800322a:	6023      	str	r3, [r4, #0]
{
 800322c:	e9dd 9b0c 	ldrd	r9, fp, [sp, #48]	; 0x30
 8003230:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003234:	d136      	bne.n	80032a4 <I2C_RequestMemoryWrite+0x90>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003236:	6965      	ldr	r5, [r4, #20]
 8003238:	07e8      	lsls	r0, r5, #31
 800323a:	d5fc      	bpl.n	8003236 <I2C_RequestMemoryWrite+0x22>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800323c:	f00a 01fe 	and.w	r1, sl, #254	; 0xfe
 8003240:	6121      	str	r1, [r4, #16]
  * @param  Flag specifies the I2C flag to check.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8003242:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003246:	d003      	beq.n	8003250 <I2C_RequestMemoryWrite+0x3c>
 8003248:	e052      	b.n	80032f0 <I2C_RequestMemoryWrite+0xdc>
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800324a:	6961      	ldr	r1, [r4, #20]
 800324c:	054d      	lsls	r5, r1, #21
 800324e:	d460      	bmi.n	8003312 <I2C_RequestMemoryWrite+0xfe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003250:	6961      	ldr	r1, [r4, #20]
 8003252:	078b      	lsls	r3, r1, #30
 8003254:	d5f9      	bpl.n	800324a <I2C_RequestMemoryWrite+0x36>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003256:	2300      	movs	r3, #0
 8003258:	9301      	str	r3, [sp, #4]
 800325a:	6963      	ldr	r3, [r4, #20]
 800325c:	9301      	str	r3, [sp, #4]
 800325e:	69a3      	ldr	r3, [r4, #24]
 8003260:	9301      	str	r3, [sp, #4]
 8003262:	9b01      	ldr	r3, [sp, #4]
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003264:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003268:	f040 80a4 	bne.w	80033b4 <I2C_RequestMemoryWrite+0x1a0>
 800326c:	6963      	ldr	r3, [r4, #20]
 800326e:	061a      	lsls	r2, r3, #24
 8003270:	d467      	bmi.n	8003342 <I2C_RequestMemoryWrite+0x12e>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003272:	6963      	ldr	r3, [r4, #20]
 8003274:	055b      	lsls	r3, r3, #21
 8003276:	d5f9      	bpl.n	800326c <I2C_RequestMemoryWrite+0x58>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003278:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 800327a:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800327c:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8003280:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003282:	6332      	str	r2, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003284:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003288:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800328c:	6c33      	ldr	r3, [r6, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800328e:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003292:	f043 0304 	orr.w	r3, r3, #4
 8003296:	6433      	str	r3, [r6, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003298:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800329a:	2b04      	cmp	r3, #4
 800329c:	f000 8083 	beq.w	80033a6 <I2C_RequestMemoryWrite+0x192>
    return HAL_ERROR;
 80032a0:	2001      	movs	r0, #1
 80032a2:	e04b      	b.n	800333c <I2C_RequestMemoryWrite+0x128>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032a4:	6963      	ldr	r3, [r4, #20]
 80032a6:	07d9      	lsls	r1, r3, #31
 80032a8:	d4c8      	bmi.n	800323c <I2C_RequestMemoryWrite+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032aa:	f7ff f991 	bl	80025d0 <HAL_GetTick>
 80032ae:	eba0 000b 	sub.w	r0, r0, fp
 80032b2:	4581      	cmp	r9, r0
 80032b4:	d304      	bcc.n	80032c0 <I2C_RequestMemoryWrite+0xac>
 80032b6:	f1b9 0f00 	cmp.w	r9, #0
 80032ba:	d001      	beq.n	80032c0 <I2C_RequestMemoryWrite+0xac>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032bc:	6834      	ldr	r4, [r6, #0]
 80032be:	e7b7      	b.n	8003230 <I2C_RequestMemoryWrite+0x1c>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80032c0:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80032c2:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80032c4:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80032c6:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032ca:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032ce:	6c33      	ldr	r3, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032d0:	6831      	ldr	r1, [r6, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032d2:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 80032d6:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032da:	6433      	str	r3, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032dc:	680b      	ldr	r3, [r1, #0]
 80032de:	05dc      	lsls	r4, r3, #23
 80032e0:	d538      	bpl.n	8003354 <I2C_RequestMemoryWrite+0x140>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032e2:	f44f 7300 	mov.w	r3, #512	; 0x200
    return HAL_TIMEOUT;
 80032e6:	2003      	movs	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032e8:	6433      	str	r3, [r6, #64]	; 0x40
}
 80032ea:	b003      	add	sp, #12
 80032ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032f0:	6963      	ldr	r3, [r4, #20]
 80032f2:	0798      	lsls	r0, r3, #30
 80032f4:	d4af      	bmi.n	8003256 <I2C_RequestMemoryWrite+0x42>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032f6:	6963      	ldr	r3, [r4, #20]
 80032f8:	055a      	lsls	r2, r3, #21
 80032fa:	d40a      	bmi.n	8003312 <I2C_RequestMemoryWrite+0xfe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032fc:	f7ff f968 	bl	80025d0 <HAL_GetTick>
 8003300:	eba0 000b 	sub.w	r0, r0, fp
 8003304:	4581      	cmp	r9, r0
 8003306:	d367      	bcc.n	80033d8 <I2C_RequestMemoryWrite+0x1c4>
 8003308:	f1b9 0f00 	cmp.w	r9, #0
 800330c:	d064      	beq.n	80033d8 <I2C_RequestMemoryWrite+0x1c4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800330e:	6834      	ldr	r4, [r6, #0]
 8003310:	e797      	b.n	8003242 <I2C_RequestMemoryWrite+0x2e>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003312:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003314:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8003318:	2120      	movs	r1, #32
    return HAL_ERROR;
 800331a:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800331c:	6823      	ldr	r3, [r4, #0]
 800331e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003322:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003324:	6165      	str	r5, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003326:	6332      	str	r2, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003328:	f886 103d 	strb.w	r1, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800332c:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003330:	6c33      	ldr	r3, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003332:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003336:	f043 0304 	orr.w	r3, r3, #4
 800333a:	6433      	str	r3, [r6, #64]	; 0x40
}
 800333c:	b003      	add	sp, #12
 800333e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003342:	f1b8 0f01 	cmp.w	r8, #1
 8003346:	d109      	bne.n	800335c <I2C_RequestMemoryWrite+0x148>
  return HAL_OK;
 8003348:	2000      	movs	r0, #0
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800334a:	b2ff      	uxtb	r7, r7
 800334c:	6127      	str	r7, [r4, #16]
}
 800334e:	b003      	add	sp, #12
 8003350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_TIMEOUT;
 8003354:	2003      	movs	r0, #3
}
 8003356:	b003      	add	sp, #12
 8003358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800335c:	0a3b      	lsrs	r3, r7, #8
 800335e:	6123      	str	r3, [r4, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003360:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003364:	d147      	bne.n	80033f6 <I2C_RequestMemoryWrite+0x1e2>
 8003366:	6963      	ldr	r3, [r4, #20]
 8003368:	0619      	lsls	r1, r3, #24
 800336a:	d4ed      	bmi.n	8003348 <I2C_RequestMemoryWrite+0x134>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800336c:	6963      	ldr	r3, [r4, #20]
 800336e:	055a      	lsls	r2, r3, #21
 8003370:	d5f9      	bpl.n	8003366 <I2C_RequestMemoryWrite+0x152>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003372:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8003374:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003376:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 800337a:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800337c:	6332      	str	r2, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800337e:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003382:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003386:	6c33      	ldr	r3, [r6, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8003388:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800338c:	f043 0304 	orr.w	r3, r3, #4
 8003390:	6433      	str	r3, [r6, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003392:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8003394:	2b04      	cmp	r3, #4
 8003396:	d183      	bne.n	80032a0 <I2C_RequestMemoryWrite+0x8c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003398:	6832      	ldr	r2, [r6, #0]
      return HAL_ERROR;
 800339a:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800339c:	6813      	ldr	r3, [r2, #0]
 800339e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033a2:	6013      	str	r3, [r2, #0]
 80033a4:	e7ca      	b.n	800333c <I2C_RequestMemoryWrite+0x128>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a6:	6832      	ldr	r2, [r6, #0]
    return HAL_ERROR;
 80033a8:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033aa:	6813      	ldr	r3, [r2, #0]
 80033ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	e7c3      	b.n	800333c <I2C_RequestMemoryWrite+0x128>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033b4:	6963      	ldr	r3, [r4, #20]
 80033b6:	061d      	lsls	r5, r3, #24
 80033b8:	d4c3      	bmi.n	8003342 <I2C_RequestMemoryWrite+0x12e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033ba:	6963      	ldr	r3, [r4, #20]
 80033bc:	0559      	lsls	r1, r3, #21
 80033be:	f53f af5b 	bmi.w	8003278 <I2C_RequestMemoryWrite+0x64>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033c2:	f7ff f905 	bl	80025d0 <HAL_GetTick>
 80033c6:	eba0 030b 	sub.w	r3, r0, fp
 80033ca:	4599      	cmp	r9, r3
 80033cc:	d324      	bcc.n	8003418 <I2C_RequestMemoryWrite+0x204>
 80033ce:	f1b9 0f00 	cmp.w	r9, #0
 80033d2:	d021      	beq.n	8003418 <I2C_RequestMemoryWrite+0x204>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033d4:	6834      	ldr	r4, [r6, #0]
 80033d6:	e745      	b.n	8003264 <I2C_RequestMemoryWrite+0x50>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033d8:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80033da:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033dc:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033de:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033e2:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033e6:	6c33      	ldr	r3, [r6, #64]	; 0x40
    return HAL_ERROR;
 80033e8:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033ea:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 80033ee:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033f2:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 80033f4:	e7a2      	b.n	800333c <I2C_RequestMemoryWrite+0x128>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033f6:	6963      	ldr	r3, [r4, #20]
 80033f8:	061b      	lsls	r3, r3, #24
 80033fa:	d4a5      	bmi.n	8003348 <I2C_RequestMemoryWrite+0x134>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033fc:	6963      	ldr	r3, [r4, #20]
 80033fe:	0558      	lsls	r0, r3, #21
 8003400:	d4b7      	bmi.n	8003372 <I2C_RequestMemoryWrite+0x15e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003402:	f7ff f8e5 	bl	80025d0 <HAL_GetTick>
 8003406:	eba0 030b 	sub.w	r3, r0, fp
 800340a:	4599      	cmp	r9, r3
 800340c:	d312      	bcc.n	8003434 <I2C_RequestMemoryWrite+0x220>
 800340e:	f1b9 0f00 	cmp.w	r9, #0
 8003412:	d00f      	beq.n	8003434 <I2C_RequestMemoryWrite+0x220>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003414:	6834      	ldr	r4, [r6, #0]
 8003416:	e7a3      	b.n	8003360 <I2C_RequestMemoryWrite+0x14c>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003418:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800341a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800341c:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800341e:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003422:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003426:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003428:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800342c:	f043 0320 	orr.w	r3, r3, #32
 8003430:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8003432:	e731      	b.n	8003298 <I2C_RequestMemoryWrite+0x84>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003434:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003436:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003438:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800343a:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800343e:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003442:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003444:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003448:	f043 0320 	orr.w	r3, r3, #32
 800344c:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 800344e:	e7a0      	b.n	8003392 <I2C_RequestMemoryWrite+0x17e>

08003450 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003450:	2800      	cmp	r0, #0
 8003452:	f000 80b9 	beq.w	80035c8 <HAL_I2C_Init+0x178>
{
 8003456:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003458:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800345c:	4604      	mov	r4, r0
 800345e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 8098 	beq.w	8003598 <HAL_I2C_Init+0x148>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003468:	2224      	movs	r2, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 800346a:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800346c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	f022 0201 	bic.w	r2, r2, #1
 8003476:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800347e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003486:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003488:	f001 fc50 	bl	8004d2c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800348c:	6863      	ldr	r3, [r4, #4]
 800348e:	494f      	ldr	r1, [pc, #316]	; (80035cc <HAL_I2C_Init+0x17c>)
 8003490:	428b      	cmp	r3, r1
 8003492:	d84f      	bhi.n	8003534 <HAL_I2C_Init+0xe4>
 8003494:	4a4e      	ldr	r2, [pc, #312]	; (80035d0 <HAL_I2C_Init+0x180>)
 8003496:	4290      	cmp	r0, r2
 8003498:	d97c      	bls.n	8003594 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 800349a:	4d4e      	ldr	r5, [pc, #312]	; (80035d4 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800349c:	005a      	lsls	r2, r3, #1
  freqrange = I2C_FREQRANGE(pclk1);
 800349e:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034a2:	1e43      	subs	r3, r0, #1
 80034a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80034a8:	f640 7efc 	movw	lr, #4092	; 0xffc
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034ac:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80034ae:	0ca9      	lsrs	r1, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034b0:	6850      	ldr	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034b2:	f101 0c01 	add.w	ip, r1, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034b6:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 80034ba:	ea40 4095 	orr.w	r0, r0, r5, lsr #18
 80034be:	6050      	str	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034c0:	6a11      	ldr	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034c2:	3301      	adds	r3, #1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034c4:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80034c8:	ea41 010c 	orr.w	r1, r1, ip
 80034cc:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034ce:	69d1      	ldr	r1, [r2, #28]
 80034d0:	ea13 0f0e 	tst.w	r3, lr
 80034d4:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80034d8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80034dc:	d161      	bne.n	80035a2 <HAL_I2C_Init+0x152>
 80034de:	2304      	movs	r3, #4
 80034e0:	430b      	orrs	r3, r1
 80034e2:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034e4:	6811      	ldr	r1, [r2, #0]
 80034e6:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80034ea:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80034ee:	4303      	orrs	r3, r0
 80034f0:	430b      	orrs	r3, r1
 80034f2:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034f4:	6891      	ldr	r1, [r2, #8]
 80034f6:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80034fa:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80034fe:	4303      	orrs	r3, r0
 8003500:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003504:	430b      	orrs	r3, r1
 8003506:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003508:	68d0      	ldr	r0, [r2, #12]
 800350a:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800350e:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8003512:	430b      	orrs	r3, r1
 8003514:	4303      	orrs	r3, r0
 8003516:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003518:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800351a:	2100      	movs	r1, #0
  __HAL_I2C_ENABLE(hi2c);
 800351c:	f043 0301 	orr.w	r3, r3, #1
 8003520:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8003522:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003524:	6421      	str	r1, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003526:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800352a:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800352c:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 8003530:	4608      	mov	r0, r1
}
 8003532:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003534:	4a28      	ldr	r2, [pc, #160]	; (80035d8 <HAL_I2C_Init+0x188>)
 8003536:	4290      	cmp	r0, r2
 8003538:	d92c      	bls.n	8003594 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 800353a:	4d26      	ldr	r5, [pc, #152]	; (80035d4 <HAL_I2C_Init+0x184>)
 800353c:	fba5 2c00 	umull	r2, ip, r5, r0
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003540:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8003544:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003548:	fb02 f101 	mul.w	r1, r2, r1
 800354c:	4d23      	ldr	r5, [pc, #140]	; (80035dc <HAL_I2C_Init+0x18c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800354e:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003550:	fba5 5101 	umull	r5, r1, r5, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003554:	6855      	ldr	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003556:	0989      	lsrs	r1, r1, #6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003558:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800355c:	ea45 459c 	orr.w	r5, r5, ip, lsr #18
 8003560:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003562:	6a15      	ldr	r5, [r2, #32]
 8003564:	3101      	adds	r1, #1
 8003566:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800356a:	4329      	orrs	r1, r5
 800356c:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800356e:	69d1      	ldr	r1, [r2, #28]
 8003570:	68a5      	ldr	r5, [r4, #8]
 8003572:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8003576:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800357a:	b9ad      	cbnz	r5, 80035a8 <HAL_I2C_Init+0x158>
 800357c:	3801      	subs	r0, #1
 800357e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003582:	fbb0 f3f3 	udiv	r3, r0, r3
 8003586:	3301      	adds	r3, #1
 8003588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800358c:	b1d3      	cbz	r3, 80035c4 <HAL_I2C_Init+0x174>
 800358e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003592:	e7a5      	b.n	80034e0 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8003594:	2001      	movs	r0, #1
}
 8003596:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003598:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800359c:	f7fd fe88 	bl	80012b0 <HAL_I2C_MspInit>
 80035a0:	e762      	b.n	8003468 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a6:	e79b      	b.n	80034e0 <HAL_I2C_Init+0x90>
 80035a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80035ac:	3801      	subs	r0, #1
 80035ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80035b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035b6:	3301      	adds	r3, #1
 80035b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035bc:	b113      	cbz	r3, 80035c4 <HAL_I2C_Init+0x174>
 80035be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035c2:	e78d      	b.n	80034e0 <HAL_I2C_Init+0x90>
 80035c4:	2301      	movs	r3, #1
 80035c6:	e78b      	b.n	80034e0 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 80035c8:	2001      	movs	r0, #1
}
 80035ca:	4770      	bx	lr
 80035cc:	000186a0 	.word	0x000186a0
 80035d0:	001e847f 	.word	0x001e847f
 80035d4:	431bde83 	.word	0x431bde83
 80035d8:	003d08ff 	.word	0x003d08ff
 80035dc:	10624dd3 	.word	0x10624dd3

080035e0 <HAL_I2C_Mem_Write_DMA>:
{
 80035e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035e4:	4605      	mov	r5, r0
  __IO uint32_t count = 0U;
 80035e6:	2400      	movs	r4, #0
{
 80035e8:	b084      	sub	sp, #16
 80035ea:	4698      	mov	r8, r3
 80035ec:	460e      	mov	r6, r1
 80035ee:	4617      	mov	r7, r2
 80035f0:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
  __IO uint32_t count = 0U;
 80035f4:	9402      	str	r4, [sp, #8]
  uint32_t tickstart = HAL_GetTick();
 80035f6:	f7fe ffeb 	bl	80025d0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80035fa:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 80035fe:	2b20      	cmp	r3, #32
 8003600:	d126      	bne.n	8003650 <HAL_I2C_Mem_Write_DMA+0x70>
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003602:	4b5d      	ldr	r3, [pc, #372]	; (8003778 <HAL_I2C_Mem_Write_DMA+0x198>)
 8003604:	4a5d      	ldr	r2, [pc, #372]	; (800377c <HAL_I2C_Mem_Write_DMA+0x19c>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4681      	mov	r9, r0
 800360a:	08db      	lsrs	r3, r3, #3
 800360c:	fba2 2303 	umull	r2, r3, r2, r3
 8003610:	0a1b      	lsrs	r3, r3, #8
 8003612:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003616:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800361a:	9302      	str	r3, [sp, #8]
 800361c:	e003      	b.n	8003626 <HAL_I2C_Mem_Write_DMA+0x46>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800361e:	682a      	ldr	r2, [r5, #0]
 8003620:	6993      	ldr	r3, [r2, #24]
 8003622:	0799      	lsls	r1, r3, #30
 8003624:	d518      	bpl.n	8003658 <HAL_I2C_Mem_Write_DMA+0x78>
      count--;
 8003626:	9c02      	ldr	r4, [sp, #8]
 8003628:	3c01      	subs	r4, #1
 800362a:	9402      	str	r4, [sp, #8]
      if (count == 0U)
 800362c:	9b02      	ldr	r3, [sp, #8]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f5      	bne.n	800361e <HAL_I2C_Mem_Write_DMA+0x3e>
        hi2c->State               = HAL_I2C_STATE_READY;
 8003632:	2220      	movs	r2, #32
        return HAL_ERROR;
 8003634:	2001      	movs	r0, #1
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003636:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003638:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800363c:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        __HAL_UNLOCK(hi2c);
 8003640:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003644:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8003646:	4313      	orrs	r3, r2
 8003648:	642b      	str	r3, [r5, #64]	; 0x40
}
 800364a:	b004      	add	sp, #16
 800364c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 8003650:	2002      	movs	r0, #2
}
 8003652:	b004      	add	sp, #16
 8003654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8003658:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800365c:	2b01      	cmp	r3, #1
 800365e:	d0f7      	beq.n	8003650 <HAL_I2C_Mem_Write_DMA+0x70>
 8003660:	2301      	movs	r3, #1
 8003662:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003666:	6813      	ldr	r3, [r2, #0]
 8003668:	07db      	lsls	r3, r3, #31
 800366a:	d403      	bmi.n	8003674 <HAL_I2C_Mem_Write_DMA+0x94>
      __HAL_I2C_ENABLE(hi2c);
 800366c:	6813      	ldr	r3, [r2, #0]
 800366e:	f043 0301 	orr.w	r3, r3, #1
 8003672:	6013      	str	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003674:	2140      	movs	r1, #64	; 0x40
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003676:	2021      	movs	r0, #33	; 0x21
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003678:	2400      	movs	r4, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800367a:	6813      	ldr	r3, [r2, #0]
 800367c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003680:	6013      	str	r3, [r2, #0]
    hi2c->pBuffPtr    = pData;
 8003682:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003684:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003688:	f885 103e 	strb.w	r1, [r5, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800368c:	642c      	str	r4, [r5, #64]	; 0x40
    hi2c->XferCount   = Size;
 800368e:	f8a5 a02a 	strh.w	sl, [r5, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8003692:	626b      	str	r3, [r5, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8003694:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003696:	493a      	ldr	r1, [pc, #232]	; (8003780 <HAL_I2C_Mem_Write_DMA+0x1a0>)
    hi2c->XferSize    = hi2c->XferCount;
 8003698:	b29b      	uxth	r3, r3
 800369a:	852b      	strh	r3, [r5, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800369c:	62e9      	str	r1, [r5, #44]	; 0x2c
    if (hi2c->XferSize > 0U)
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d02d      	beq.n	80036fe <HAL_I2C_Mem_Write_DMA+0x11e>
      if (hi2c->hdmatx != NULL)
 80036a2:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80036a4:	2900      	cmp	r1, #0
 80036a6:	d044      	beq.n	8003732 <HAL_I2C_Mem_Write_DMA+0x152>
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80036a8:	4836      	ldr	r0, [pc, #216]	; (8003784 <HAL_I2C_Mem_Write_DMA+0x1a4>)
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80036aa:	62cc      	str	r4, [r1, #44]	; 0x2c
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80036ac:	6288      	str	r0, [r1, #40]	; 0x28
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80036ae:	4836      	ldr	r0, [pc, #216]	; (8003788 <HAL_I2C_Mem_Write_DMA+0x1a8>)
        hi2c->hdmatx->XferAbortCallback = NULL;
 80036b0:	634c      	str	r4, [r1, #52]	; 0x34
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80036b2:	6308      	str	r0, [r1, #48]	; 0x30
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80036b4:	3210      	adds	r2, #16
 80036b6:	4608      	mov	r0, r1
 80036b8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80036ba:	f7ff fb5b 	bl	8002d74 <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 80036be:	4682      	mov	sl, r0
 80036c0:	bb50      	cbnz	r0, 8003718 <HAL_I2C_Mem_Write_DMA+0x138>
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80036c2:	2023      	movs	r0, #35	; 0x23
 80036c4:	4643      	mov	r3, r8
 80036c6:	9000      	str	r0, [sp, #0]
 80036c8:	463a      	mov	r2, r7
 80036ca:	4631      	mov	r1, r6
 80036cc:	4628      	mov	r0, r5
 80036ce:	f8cd 9004 	str.w	r9, [sp, #4]
 80036d2:	f7ff fd9f 	bl	8003214 <I2C_RequestMemoryWrite>
 80036d6:	2800      	cmp	r0, #0
 80036d8:	d138      	bne.n	800374c <HAL_I2C_Mem_Write_DMA+0x16c>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036da:	682b      	ldr	r3, [r5, #0]
 80036dc:	9003      	str	r0, [sp, #12]
 80036de:	695a      	ldr	r2, [r3, #20]
 80036e0:	9203      	str	r2, [sp, #12]
 80036e2:	699a      	ldr	r2, [r3, #24]
        __HAL_UNLOCK(hi2c);
 80036e4:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036e8:	9203      	str	r2, [sp, #12]
 80036ea:	9a03      	ldr	r2, [sp, #12]
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036f2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036fa:	605a      	str	r2, [r3, #4]
        return HAL_OK;
 80036fc:	e7a5      	b.n	800364a <HAL_I2C_Mem_Write_DMA+0x6a>
      hi2c->State     = HAL_I2C_STATE_READY;
 80036fe:	2220      	movs	r2, #32
 8003700:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003704:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      __HAL_UNLOCK(hi2c);
 8003708:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 800370c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 800370e:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8003710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003714:	642b      	str	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8003716:	e798      	b.n	800364a <HAL_I2C_Mem_Write_DMA+0x6a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003718:	2320      	movs	r3, #32
 800371a:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800371e:	f885 403e 	strb.w	r4, [r5, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003722:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8003724:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003726:	f043 0310 	orr.w	r3, r3, #16
        __HAL_UNLOCK(hi2c);
 800372a:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800372e:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8003730:	e78b      	b.n	800364a <HAL_I2C_Mem_Write_DMA+0x6a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003732:	2320      	movs	r3, #32
 8003734:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003738:	f885 103e 	strb.w	r1, [r5, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800373c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 800373e:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        __HAL_UNLOCK(hi2c);
 8003744:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003748:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 800374a:	e77e      	b.n	800364a <HAL_I2C_Mem_Write_DMA+0x6a>
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 800374c:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800374e:	f7ff fb59 	bl	8002e04 <HAL_DMA_Abort_IT>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003752:	682b      	ldr	r3, [r5, #0]
          hi2c->hdmatx->XferCpltCallback = NULL;
 8003754:	6b69      	ldr	r1, [r5, #52]	; 0x34
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003756:	681a      	ldr	r2, [r3, #0]
          hi2c->hdmatx->XferCpltCallback = NULL;
 8003758:	f8c1 a028 	str.w	sl, [r1, #40]	; 0x28
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800375c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003760:	601a      	str	r2, [r3, #0]
          hi2c->XferCount = 0U;
 8003762:	f8a5 a02a 	strh.w	sl, [r5, #42]	; 0x2a
          __HAL_I2C_DISABLE(hi2c);
 8003766:	681a      	ldr	r2, [r3, #0]
          return HAL_ERROR;
 8003768:	2001      	movs	r0, #1
          __HAL_I2C_DISABLE(hi2c);
 800376a:	f022 0201 	bic.w	r2, r2, #1
          hi2c->XferSize = 0U;
 800376e:	f8a5 a028 	strh.w	sl, [r5, #40]	; 0x28
          __HAL_I2C_DISABLE(hi2c);
 8003772:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8003774:	e769      	b.n	800364a <HAL_I2C_Mem_Write_DMA+0x6a>
 8003776:	bf00      	nop
 8003778:	20000010 	.word	0x20000010
 800377c:	14f8b589 	.word	0x14f8b589
 8003780:	ffff0000 	.word	0xffff0000
 8003784:	08003aa9 	.word	0x08003aa9
 8003788:	08003a6d 	.word	0x08003a6d

0800378c <HAL_I2C_IsDeviceReady>:
{
 800378c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003790:	4605      	mov	r5, r0
 8003792:	b083      	sub	sp, #12
 8003794:	461f      	mov	r7, r3
 8003796:	468a      	mov	sl, r1
 8003798:	4693      	mov	fp, r2
  uint32_t tickstart = HAL_GetTick();
 800379a:	f7fe ff19 	bl	80025d0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800379e:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 80037a2:	2b20      	cmp	r3, #32
 80037a4:	d003      	beq.n	80037ae <HAL_I2C_IsDeviceReady+0x22>
    return HAL_BUSY;
 80037a6:	2002      	movs	r0, #2
}
 80037a8:	b003      	add	sp, #12
 80037aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037ae:	4606      	mov	r6, r0
 80037b0:	e005      	b.n	80037be <HAL_I2C_IsDeviceReady+0x32>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037b2:	f7fe ff0d 	bl	80025d0 <HAL_GetTick>
 80037b6:	1b80      	subs	r0, r0, r6
 80037b8:	2819      	cmp	r0, #25
 80037ba:	f200 80c1 	bhi.w	8003940 <HAL_I2C_IsDeviceReady+0x1b4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037be:	682b      	ldr	r3, [r5, #0]
 80037c0:	699a      	ldr	r2, [r3, #24]
 80037c2:	43d2      	mvns	r2, r2
 80037c4:	f012 0402 	ands.w	r4, r2, #2
 80037c8:	d0f3      	beq.n	80037b2 <HAL_I2C_IsDeviceReady+0x26>
    __HAL_LOCK(hi2c);
 80037ca:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
 80037ce:	2a01      	cmp	r2, #1
 80037d0:	d0e9      	beq.n	80037a6 <HAL_I2C_IsDeviceReady+0x1a>
 80037d2:	2201      	movs	r2, #1
 80037d4:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	07d2      	lsls	r2, r2, #31
 80037dc:	f140 8095 	bpl.w	800390a <HAL_I2C_IsDeviceReady+0x17e>
    hi2c->State = HAL_I2C_STATE_BUSY;
 80037e0:	2024      	movs	r0, #36	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037e2:	2100      	movs	r1, #0
  uint32_t I2C_Trials = 1U;
 80037e4:	f04f 0901 	mov.w	r9, #1
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80037e8:	f04f 08a0 	mov.w	r8, #160	; 0xa0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037ec:	681a      	ldr	r2, [r3, #0]
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037ee:	f00a 0afe 	and.w	sl, sl, #254	; 0xfe
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037f6:	601a      	str	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037f8:	4a64      	ldr	r2, [pc, #400]	; (800398c <HAL_I2C_IsDeviceReady+0x200>)
    hi2c->State = HAL_I2C_STATE_BUSY;
 80037fa:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037fe:	6429      	str	r1, [r5, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003800:	62ea      	str	r2, [r5, #44]	; 0x2c
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003808:	601a      	str	r2, [r3, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 800380a:	1c7c      	adds	r4, r7, #1
 800380c:	d162      	bne.n	80038d4 <HAL_I2C_IsDeviceReady+0x148>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800380e:	695a      	ldr	r2, [r3, #20]
 8003810:	07d0      	lsls	r0, r2, #31
 8003812:	d5fc      	bpl.n	800380e <HAL_I2C_IsDeviceReady+0x82>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003814:	f8c3 a010 	str.w	sl, [r3, #16]
      tickstart = HAL_GetTick();
 8003818:	f7fe feda 	bl	80025d0 <HAL_GetTick>
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800381c:	682b      	ldr	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800381e:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003820:	6959      	ldr	r1, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003822:	695a      	ldr	r2, [r3, #20]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003824:	f895 403d 	ldrb.w	r4, [r5, #61]	; 0x3d
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003828:	f001 0102 	and.w	r1, r1, #2
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800382c:	2ca0      	cmp	r4, #160	; 0xa0
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800382e:	f402 6280 	and.w	r2, r2, #1024	; 0x400
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003832:	d018      	beq.n	8003866 <HAL_I2C_IsDeviceReady+0xda>
 8003834:	430a      	orrs	r2, r1
 8003836:	d116      	bne.n	8003866 <HAL_I2C_IsDeviceReady+0xda>
 8003838:	2f00      	cmp	r7, #0
 800383a:	d03b      	beq.n	80038b4 <HAL_I2C_IsDeviceReady+0x128>
 800383c:	e001      	b.n	8003842 <HAL_I2C_IsDeviceReady+0xb6>
 800383e:	430a      	orrs	r2, r1
 8003840:	d111      	bne.n	8003866 <HAL_I2C_IsDeviceReady+0xda>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003842:	f7fe fec5 	bl	80025d0 <HAL_GetTick>
 8003846:	1b80      	subs	r0, r0, r6
 8003848:	4287      	cmp	r7, r0
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800384a:	682b      	ldr	r3, [r5, #0]
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800384c:	bf38      	it	cc
 800384e:	f885 803d 	strbcc.w	r8, [r5, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003852:	6959      	ldr	r1, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003854:	695a      	ldr	r2, [r3, #20]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003856:	f895 003d 	ldrb.w	r0, [r5, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800385a:	f001 0102 	and.w	r1, r1, #2
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800385e:	28a0      	cmp	r0, #160	; 0xa0
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003860:	f402 6280 	and.w	r2, r2, #1024	; 0x400
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003864:	d1eb      	bne.n	800383e <HAL_I2C_IsDeviceReady+0xb2>
      hi2c->State = HAL_I2C_STATE_READY;
 8003866:	2220      	movs	r2, #32
 8003868:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800386c:	695a      	ldr	r2, [r3, #20]
 800386e:	0792      	lsls	r2, r2, #30
 8003870:	d46c      	bmi.n	800394c <HAL_I2C_IsDeviceReady+0x1c0>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003872:	f46f 6180 	mvn.w	r1, #1024	; 0x400
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800387c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800387e:	6159      	str	r1, [r3, #20]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8003880:	e005      	b.n	800388e <HAL_I2C_IsDeviceReady+0x102>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003882:	f7fe fea5 	bl	80025d0 <HAL_GetTick>
 8003886:	1b80      	subs	r0, r0, r6
 8003888:	2819      	cmp	r0, #25
 800388a:	d82e      	bhi.n	80038ea <HAL_I2C_IsDeviceReady+0x15e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800388c:	682b      	ldr	r3, [r5, #0]
 800388e:	699c      	ldr	r4, [r3, #24]
 8003890:	43e4      	mvns	r4, r4
 8003892:	f014 0402 	ands.w	r4, r4, #2
 8003896:	d0f4      	beq.n	8003882 <HAL_I2C_IsDeviceReady+0xf6>
      I2C_Trials++;
 8003898:	f109 0901 	add.w	r9, r9, #1
    while (I2C_Trials < Trials);
 800389c:	45d9      	cmp	r9, fp
 800389e:	d3b0      	bcc.n	8003802 <HAL_I2C_IsDeviceReady+0x76>
    hi2c->State = HAL_I2C_STATE_READY;
 80038a0:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80038a2:	2300      	movs	r3, #0
    return HAL_ERROR;
 80038a4:	2001      	movs	r0, #1
    hi2c->State = HAL_I2C_STATE_READY;
 80038a6:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80038aa:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    return HAL_ERROR;
 80038ae:	e77b      	b.n	80037a8 <HAL_I2C_IsDeviceReady+0x1c>
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80038b0:	430a      	orrs	r2, r1
 80038b2:	d1d8      	bne.n	8003866 <HAL_I2C_IsDeviceReady+0xda>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038b4:	f7fe fe8c 	bl	80025d0 <HAL_GetTick>
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80038b8:	682b      	ldr	r3, [r5, #0]
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80038ba:	f885 803d 	strb.w	r8, [r5, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80038be:	6959      	ldr	r1, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80038c0:	695a      	ldr	r2, [r3, #20]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80038c2:	f895 003d 	ldrb.w	r0, [r5, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80038c6:	f001 0102 	and.w	r1, r1, #2
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80038ca:	28a0      	cmp	r0, #160	; 0xa0
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80038cc:	f402 6280 	and.w	r2, r2, #1024	; 0x400
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80038d0:	d1ee      	bne.n	80038b0 <HAL_I2C_IsDeviceReady+0x124>
 80038d2:	e7c8      	b.n	8003866 <HAL_I2C_IsDeviceReady+0xda>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038d4:	695a      	ldr	r2, [r3, #20]
 80038d6:	07d1      	lsls	r1, r2, #31
 80038d8:	d49c      	bmi.n	8003814 <HAL_I2C_IsDeviceReady+0x88>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038da:	f7fe fe79 	bl	80025d0 <HAL_GetTick>
 80038de:	1b80      	subs	r0, r0, r6
 80038e0:	4287      	cmp	r7, r0
 80038e2:	d317      	bcc.n	8003914 <HAL_I2C_IsDeviceReady+0x188>
 80038e4:	b1b7      	cbz	r7, 8003914 <HAL_I2C_IsDeviceReady+0x188>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038e6:	682b      	ldr	r3, [r5, #0]
 80038e8:	e78f      	b.n	800380a <HAL_I2C_IsDeviceReady+0x7e>
        hi2c->State             = HAL_I2C_STATE_READY;
 80038ea:	2320      	movs	r3, #32
          return HAL_ERROR;
 80038ec:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 80038ee:	632c      	str	r4, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80038f0:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038f4:	f885 403e 	strb.w	r4, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038f8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80038fa:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038fe:	f043 0320 	orr.w	r3, r3, #32
 8003902:	642b      	str	r3, [r5, #64]	; 0x40
}
 8003904:	b003      	add	sp, #12
 8003906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      __HAL_I2C_ENABLE(hi2c);
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	f042 0201 	orr.w	r2, r2, #1
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	e765      	b.n	80037e0 <HAL_I2C_IsDeviceReady+0x54>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003914:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003916:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003918:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800391a:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800391e:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003922:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003924:	6829      	ldr	r1, [r5, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003926:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 800392a:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800392e:	642b      	str	r3, [r5, #64]	; 0x40
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003930:	680b      	ldr	r3, [r1, #0]
 8003932:	05de      	lsls	r6, r3, #23
 8003934:	d508      	bpl.n	8003948 <HAL_I2C_IsDeviceReady+0x1bc>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003936:	f44f 7300 	mov.w	r3, #512	; 0x200
        return HAL_TIMEOUT;
 800393a:	2003      	movs	r0, #3
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800393c:	642b      	str	r3, [r5, #64]	; 0x40
 800393e:	e733      	b.n	80037a8 <HAL_I2C_IsDeviceReady+0x1c>
        hi2c->State             = HAL_I2C_STATE_READY;
 8003940:	2320      	movs	r3, #32
      return HAL_BUSY;
 8003942:	2002      	movs	r0, #2
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003944:	632c      	str	r4, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003946:	e7d3      	b.n	80038f0 <HAL_I2C_IsDeviceReady+0x164>
        return HAL_TIMEOUT;
 8003948:	2003      	movs	r0, #3
 800394a:	e72d      	b.n	80037a8 <HAL_I2C_IsDeviceReady+0x1c>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800394c:	2100      	movs	r1, #0
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003954:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003956:	9101      	str	r1, [sp, #4]
 8003958:	695a      	ldr	r2, [r3, #20]
 800395a:	9201      	str	r2, [sp, #4]
 800395c:	699a      	ldr	r2, [r3, #24]
 800395e:	9201      	str	r2, [sp, #4]
 8003960:	9a01      	ldr	r2, [sp, #4]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8003962:	e005      	b.n	8003970 <HAL_I2C_IsDeviceReady+0x1e4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003964:	f7fe fe34 	bl	80025d0 <HAL_GetTick>
 8003968:	1b80      	subs	r0, r0, r6
 800396a:	2819      	cmp	r0, #25
 800396c:	d8bd      	bhi.n	80038ea <HAL_I2C_IsDeviceReady+0x15e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800396e:	682b      	ldr	r3, [r5, #0]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	43db      	mvns	r3, r3
 8003974:	f013 0402 	ands.w	r4, r3, #2
 8003978:	d0f4      	beq.n	8003964 <HAL_I2C_IsDeviceReady+0x1d8>
        __HAL_UNLOCK(hi2c);
 800397a:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800397c:	2220      	movs	r2, #32
        return HAL_OK;
 800397e:	4618      	mov	r0, r3
        hi2c->State = HAL_I2C_STATE_READY;
 8003980:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8003984:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_OK;
 8003988:	e70e      	b.n	80037a8 <HAL_I2C_IsDeviceReady+0x1c>
 800398a:	bf00      	nop
 800398c:	ffff0000 	.word	0xffff0000

08003990 <HAL_I2C_MasterTxCpltCallback>:
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop

08003994 <HAL_I2C_MasterRxCpltCallback>:
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop

08003998 <HAL_I2C_SlaveTxCpltCallback>:
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop

0800399c <HAL_I2C_SlaveRxCpltCallback>:
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop

080039a0 <HAL_I2C_AddrCallback>:
}
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop

080039a4 <HAL_I2C_ListenCpltCallback>:
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop

080039a8 <I2C_MemoryTransmit_TXE_BTF>:
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039a8:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if (hi2c->EventCount == 0U)
 80039ac:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 80039ae:	4603      	mov	r3, r0
  if (hi2c->EventCount == 0U)
 80039b0:	b959      	cbnz	r1, 80039ca <I2C_MemoryTransmit_TXE_BTF+0x22>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80039b2:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80039b4:	6801      	ldr	r1, [r0, #0]
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80039b6:	2a01      	cmp	r2, #1
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80039b8:	6c82      	ldr	r2, [r0, #72]	; 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80039ba:	d00d      	beq.n	80039d8 <I2C_MemoryTransmit_TXE_BTF+0x30>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80039bc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80039c0:	610a      	str	r2, [r1, #16]
      hi2c->EventCount++;
 80039c2:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80039c4:	3201      	adds	r2, #1
 80039c6:	6502      	str	r2, [r0, #80]	; 0x50
 80039c8:	4770      	bx	lr
  else if (hi2c->EventCount == 1U)
 80039ca:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80039cc:	2901      	cmp	r1, #1
 80039ce:	d009      	beq.n	80039e4 <I2C_MemoryTransmit_TXE_BTF+0x3c>
  else if (hi2c->EventCount == 2U)
 80039d0:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80039d2:	2902      	cmp	r1, #2
 80039d4:	d00e      	beq.n	80039f4 <I2C_MemoryTransmit_TXE_BTF+0x4c>
 80039d6:	4770      	bx	lr
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80039d8:	b2d2      	uxtb	r2, r2
 80039da:	610a      	str	r2, [r1, #16]
      hi2c->EventCount += 2U;
 80039dc:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80039de:	3202      	adds	r2, #2
 80039e0:	6502      	str	r2, [r0, #80]	; 0x50
 80039e2:	4770      	bx	lr
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80039e4:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80039e6:	6801      	ldr	r1, [r0, #0]
 80039e8:	b2d2      	uxtb	r2, r2
 80039ea:	610a      	str	r2, [r1, #16]
    hi2c->EventCount++;
 80039ec:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80039ee:	3201      	adds	r2, #1
 80039f0:	6502      	str	r2, [r0, #80]	; 0x50
 80039f2:	4770      	bx	lr
 80039f4:	b2d2      	uxtb	r2, r2
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80039f6:	2a22      	cmp	r2, #34	; 0x22
 80039f8:	d01f      	beq.n	8003a3a <I2C_MemoryTransmit_TXE_BTF+0x92>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80039fa:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 80039fc:	b289      	uxth	r1, r1
 80039fe:	b9c1      	cbnz	r1, 8003a32 <I2C_MemoryTransmit_TXE_BTF+0x8a>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a00:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8003a02:	b289      	uxth	r1, r1
 8003a04:	2900      	cmp	r1, #0
 8003a06:	d1e6      	bne.n	80039d6 <I2C_MemoryTransmit_TXE_BTF+0x2e>
 8003a08:	2a21      	cmp	r2, #33	; 0x21
 8003a0a:	d1e4      	bne.n	80039d6 <I2C_MemoryTransmit_TXE_BTF+0x2e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a0c:	6802      	ldr	r2, [r0, #0]
{
 8003a0e:	b510      	push	{r4, lr}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a10:	6854      	ldr	r4, [r2, #4]
 8003a12:	f424 64e0 	bic.w	r4, r4, #1792	; 0x700
 8003a16:	6054      	str	r4, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a18:	6814      	ldr	r4, [r2, #0]
 8003a1a:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8003a1e:	6014      	str	r4, [r2, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8003a20:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a22:	6301      	str	r1, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003a24:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a28:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003a2c:	f7fe fb5c 	bl	80020e8 <HAL_I2C_MemTxCpltCallback>
}
 8003a30:	bd10      	pop	{r4, pc}
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a32:	2a21      	cmp	r2, #33	; 0x21
 8003a34:	d00a      	beq.n	8003a4c <I2C_MemoryTransmit_TXE_BTF+0xa4>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a38:	4770      	bx	lr
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003a3a:	6801      	ldr	r1, [r0, #0]
 8003a3c:	680a      	ldr	r2, [r1, #0]
 8003a3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a42:	600a      	str	r2, [r1, #0]
      hi2c->EventCount++;
 8003a44:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8003a46:	3201      	adds	r2, #1
 8003a48:	6502      	str	r2, [r0, #80]	; 0x50
 8003a4a:	4770      	bx	lr
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a4c:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8003a4e:	6802      	ldr	r2, [r0, #0]
 8003a50:	f811 0b01 	ldrb.w	r0, [r1], #1
 8003a54:	6110      	str	r0, [r2, #16]
      hi2c->XferCount--;
 8003a56:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003a58:	6259      	str	r1, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003a5a:	3a01      	subs	r2, #1
 8003a5c:	b292      	uxth	r2, r2
 8003a5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop

08003a64 <HAL_I2C_MemRxCpltCallback>:
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop

08003a68 <HAL_I2C_ErrorCallback>:
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop

08003a6c <I2C_DMAError>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003a6c:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8003a6e:	b508      	push	{r3, lr}
  if (hi2c->hdmatx != NULL)
 8003a70:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003a72:	b10b      	cbz	r3, 8003a78 <I2C_DMAError+0xc>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003a74:	2200      	movs	r2, #0
 8003a76:	629a      	str	r2, [r3, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 8003a78:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003a7a:	b10b      	cbz	r3, 8003a80 <I2C_DMAError+0x14>
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	629a      	str	r2, [r3, #40]	; 0x28
  hi2c->XferCount       = 0U;
 8003a80:	2200      	movs	r2, #0
  hi2c->State           = HAL_I2C_STATE_READY;
 8003a82:	f04f 0c20 	mov.w	ip, #32
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a86:	6801      	ldr	r1, [r0, #0]
 8003a88:	680b      	ldr	r3, [r1, #0]
 8003a8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a8e:	600b      	str	r3, [r1, #0]
  hi2c->XferCount       = 0U;
 8003a90:	8542      	strh	r2, [r0, #42]	; 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 8003a92:	f880 c03d 	strb.w	ip, [r0, #61]	; 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 8003a96:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 8003a9a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003a9c:	f043 0310 	orr.w	r3, r3, #16
 8003aa0:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_I2C_ErrorCallback(hi2c);
 8003aa2:	f7ff ffe1 	bl	8003a68 <HAL_I2C_ErrorCallback>
}
 8003aa6:	bd08      	pop	{r3, pc}

08003aa8 <I2C_DMAXferCplt>:
{
 8003aa8:	b570      	push	{r4, r5, r6, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003aaa:	6a44      	ldr	r4, [r0, #36]	; 0x24
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003aac:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003ab0:	6823      	ldr	r3, [r4, #0]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003ab2:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003ab6:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003ab8:	b2c8      	uxtb	r0, r1
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003aba:	6859      	ldr	r1, [r3, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003abc:	b2d2      	uxtb	r2, r2
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003abe:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8003ac2:	6059      	str	r1, [r3, #4]
  if (hi2c->hdmatx != NULL)
 8003ac4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ac6:	b109      	cbz	r1, 8003acc <I2C_DMAXferCplt+0x24>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003ac8:	2600      	movs	r6, #0
 8003aca:	628e      	str	r6, [r1, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 8003acc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003ace:	b109      	cbz	r1, 8003ad4 <I2C_DMAXferCplt+0x2c>
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003ad0:	2600      	movs	r6, #0
 8003ad2:	628e      	str	r6, [r1, #40]	; 0x28
  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8003ad4:	f002 0121 	and.w	r1, r2, #33	; 0x21
 8003ad8:	2921      	cmp	r1, #33	; 0x21
 8003ada:	d039      	beq.n	8003b50 <I2C_DMAXferCplt+0xa8>
 8003adc:	f002 0122 	and.w	r1, r2, #34	; 0x22
 8003ae0:	2922      	cmp	r1, #34	; 0x22
 8003ae2:	d033      	beq.n	8003b4c <I2C_DMAXferCplt+0xa4>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8003ae4:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8003ae8:	b37a      	cbz	r2, 8003b4a <I2C_DMAXferCplt+0xa2>
    if (hi2c->XferCount == (uint16_t)1)
 8003aea:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003aec:	b292      	uxth	r2, r2
 8003aee:	2a01      	cmp	r2, #1
 8003af0:	d03d      	beq.n	8003b6e <I2C_DMAXferCplt+0xc6>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003af2:	685a      	ldr	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003af4:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003af8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003afc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003afe:	d006      	beq.n	8003b0e <I2C_DMAXferCplt+0x66>
 8003b00:	2d08      	cmp	r5, #8
 8003b02:	d004      	beq.n	8003b0e <I2C_DMAXferCplt+0x66>
 8003b04:	f1b5 4f2a 	cmp.w	r5, #2852126720	; 0xaa000000
 8003b08:	d001      	beq.n	8003b0e <I2C_DMAXferCplt+0x66>
 8003b0a:	2d20      	cmp	r5, #32
 8003b0c:	d103      	bne.n	8003b16 <I2C_DMAXferCplt+0x6e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b14:	601a      	str	r2, [r3, #0]
    hi2c->XferCount = 0U;
 8003b16:	2100      	movs	r1, #0
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b1e:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b26:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8003b28:	8561      	strh	r1, [r4, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b2c:	bb23      	cbnz	r3, 8003b78 <I2C_DMAXferCplt+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 8003b2e:	2220      	movs	r2, #32
 8003b30:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b34:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8003b38:	2a40      	cmp	r2, #64	; 0x40
 8003b3a:	d035      	beq.n	8003ba8 <I2C_DMAXferCplt+0x100>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b3c:	2212      	movs	r2, #18
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b3e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b42:	4620      	mov	r0, r4
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b44:	6322      	str	r2, [r4, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b46:	f7ff ff25 	bl	8003994 <HAL_I2C_MasterRxCpltCallback>
}
 8003b4a:	bd70      	pop	{r4, r5, r6, pc}
  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8003b4c:	2820      	cmp	r0, #32
 8003b4e:	d1c9      	bne.n	8003ae4 <I2C_DMAXferCplt+0x3c>
    hi2c->XferCount = 0U;
 8003b50:	2000      	movs	r0, #0
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b52:	6859      	ldr	r1, [r3, #4]
    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003b54:	2a29      	cmp	r2, #41	; 0x29
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b56:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8003b5a:	6059      	str	r1, [r3, #4]
    hi2c->XferCount = 0U;
 8003b5c:	8560      	strh	r0, [r4, #42]	; 0x2a
    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003b5e:	d00f      	beq.n	8003b80 <I2C_DMAXferCplt+0xd8>
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003b60:	2a2a      	cmp	r2, #42	; 0x2a
 8003b62:	d017      	beq.n	8003b94 <I2C_DMAXferCplt+0xec>
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003b6a:	605a      	str	r2, [r3, #4]
}
 8003b6c:	bd70      	pop	{r4, r5, r6, pc}
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b74:	601a      	str	r2, [r3, #0]
 8003b76:	e7bc      	b.n	8003af2 <I2C_DMAXferCplt+0x4a>
      HAL_I2C_ErrorCallback(hi2c);
 8003b78:	4620      	mov	r0, r4
 8003b7a:	f7ff ff75 	bl	8003a68 <HAL_I2C_ErrorCallback>
}
 8003b7e:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b80:	2328      	movs	r3, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003b82:	2221      	movs	r2, #33	; 0x21
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003b84:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003b86:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b88:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003b8c:	f7ff ff04 	bl	8003998 <HAL_I2C_SlaveTxCpltCallback>
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003b90:	6823      	ldr	r3, [r4, #0]
 8003b92:	e7e7      	b.n	8003b64 <I2C_DMAXferCplt+0xbc>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b94:	2328      	movs	r3, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003b96:	2222      	movs	r2, #34	; 0x22
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b98:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003b9a:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b9c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ba0:	f7ff fefc 	bl	800399c <HAL_I2C_SlaveRxCpltCallback>
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003ba4:	6823      	ldr	r3, [r4, #0]
 8003ba6:	e7dd      	b.n	8003b64 <I2C_DMAXferCplt+0xbc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003bac:	4620      	mov	r0, r4
        hi2c->PreviousState = I2C_STATE_NONE;
 8003bae:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003bb0:	f7ff ff58 	bl	8003a64 <HAL_I2C_MemRxCpltCallback>
}
 8003bb4:	bd70      	pop	{r4, r5, r6, pc}
 8003bb6:	bf00      	nop

08003bb8 <HAL_I2C_AbortCpltCallback>:
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop

08003bbc <I2C_DMAAbort>:
  __IO uint32_t count = 0U;
 8003bbc:	2200      	movs	r2, #0
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003bbe:	4b3a      	ldr	r3, [pc, #232]	; (8003ca8 <I2C_DMAAbort+0xec>)
{
 8003bc0:	b570      	push	{r4, r5, r6, lr}
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4939      	ldr	r1, [pc, #228]	; (8003cac <I2C_DMAAbort+0xf0>)
 8003bc6:	08db      	lsrs	r3, r3, #3
 8003bc8:	fba1 1303 	umull	r1, r3, r1, r3
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003bcc:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8003bce:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8003bd0:	9201      	str	r2, [sp, #4]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003bd2:	0a1b      	lsrs	r3, r3, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bd4:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003bd8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003bdc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003be0:	6802      	ldr	r2, [r0, #0]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003be2:	9301      	str	r3, [sp, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003be4:	b2c9      	uxtb	r1, r1
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003be6:	e005      	b.n	8003bf4 <I2C_DMAAbort+0x38>
    count--;
 8003be8:	9b01      	ldr	r3, [sp, #4]
 8003bea:	3b01      	subs	r3, #1
 8003bec:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003bee:	6813      	ldr	r3, [r2, #0]
 8003bf0:	059b      	lsls	r3, r3, #22
 8003bf2:	d506      	bpl.n	8003c02 <I2C_DMAAbort+0x46>
    if (count == 0U)
 8003bf4:	9b01      	ldr	r3, [sp, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1f6      	bne.n	8003be8 <I2C_DMAAbort+0x2c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bfa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003bfc:	f043 0320 	orr.w	r3, r3, #32
 8003c00:	6403      	str	r3, [r0, #64]	; 0x40
  if (hi2c->hdmatx != NULL)
 8003c02:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003c04:	b34c      	cbz	r4, 8003c5a <I2C_DMAAbort+0x9e>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003c06:	2500      	movs	r5, #0
  if (hi2c->hdmarx != NULL)
 8003c08:	6b83      	ldr	r3, [r0, #56]	; 0x38
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003c0a:	62a5      	str	r5, [r4, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 8003c0c:	b1f3      	cbz	r3, 8003c4c <I2C_DMAAbort+0x90>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c0e:	6816      	ldr	r6, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003c10:	629d      	str	r5, [r3, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c12:	f426 6680 	bic.w	r6, r6, #1024	; 0x400
 8003c16:	6016      	str	r6, [r2, #0]
  hi2c->XferCount = 0U;
 8003c18:	8545      	strh	r5, [r0, #42]	; 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003c1a:	6365      	str	r5, [r4, #52]	; 0x34
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003c1c:	2400      	movs	r4, #0
 8003c1e:	635c      	str	r4, [r3, #52]	; 0x34
  __HAL_I2C_DISABLE(hi2c);
 8003c20:	6813      	ldr	r3, [r2, #0]
 8003c22:	f023 0301 	bic.w	r3, r3, #1
 8003c26:	6013      	str	r3, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003c28:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003c2c:	2b60      	cmp	r3, #96	; 0x60
 8003c2e:	d02a      	beq.n	8003c86 <I2C_DMAAbort+0xca>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c30:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8003c34:	2928      	cmp	r1, #40	; 0x28
 8003c36:	d019      	beq.n	8003c6c <I2C_DMAAbort+0xb0>
      hi2c->State = HAL_I2C_STATE_READY;
 8003c38:	2220      	movs	r2, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c3a:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8003c3c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c40:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003c44:	f7ff ff10 	bl	8003a68 <HAL_I2C_ErrorCallback>
}
 8003c48:	b002      	add	sp, #8
 8003c4a:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c4c:	6815      	ldr	r5, [r2, #0]
 8003c4e:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8003c52:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 8003c54:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003c56:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->hdmarx != NULL)
 8003c58:	e7e2      	b.n	8003c20 <I2C_DMAAbort+0x64>
  if (hi2c->hdmarx != NULL)
 8003c5a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003c5c:	b1f3      	cbz	r3, 8003c9c <I2C_DMAAbort+0xe0>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c5e:	6815      	ldr	r5, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003c60:	629c      	str	r4, [r3, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c62:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8003c66:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 8003c68:	8544      	strh	r4, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 8003c6a:	e7d7      	b.n	8003c1c <I2C_DMAAbort+0x60>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c6c:	2400      	movs	r4, #0
      __HAL_I2C_ENABLE(hi2c);
 8003c6e:	6813      	ldr	r3, [r2, #0]
 8003c70:	f043 0301 	orr.w	r3, r3, #1
 8003c74:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c76:	6813      	ldr	r3, [r2, #0]
 8003c78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c7c:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c7e:	6304      	str	r4, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c80:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
 8003c84:	e7de      	b.n	8003c44 <I2C_DMAAbort+0x88>
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003c86:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c88:	2220      	movs	r2, #32
 8003c8a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003c8e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003c92:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8003c94:	f7ff ff90 	bl	8003bb8 <HAL_I2C_AbortCpltCallback>
}
 8003c98:	b002      	add	sp, #8
 8003c9a:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c9c:	6814      	ldr	r4, [r2, #0]
 8003c9e:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8003ca2:	6014      	str	r4, [r2, #0]
  hi2c->XferCount = 0U;
 8003ca4:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 8003ca6:	e7bb      	b.n	8003c20 <I2C_DMAAbort+0x64>
 8003ca8:	20000010 	.word	0x20000010
 8003cac:	14f8b589 	.word	0x14f8b589

08003cb0 <I2C_ITError>:
{
 8003cb0:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cb2:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003cb6:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
{
 8003cba:	4604      	mov	r4, r0
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003cbc:	2b10      	cmp	r3, #16
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cbe:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003cc0:	d039      	beq.n	8003d36 <I2C_ITError+0x86>
 8003cc2:	b2d9      	uxtb	r1, r3
 8003cc4:	2940      	cmp	r1, #64	; 0x40
 8003cc6:	d036      	beq.n	8003d36 <I2C_ITError+0x86>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003cc8:	f002 0128 	and.w	r1, r2, #40	; 0x28
 8003ccc:	2928      	cmp	r1, #40	; 0x28
 8003cce:	d03d      	beq.n	8003d4c <I2C_ITError+0x9c>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003cd0:	6823      	ldr	r3, [r4, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003cd2:	6859      	ldr	r1, [r3, #4]
 8003cd4:	0508      	lsls	r0, r1, #20
 8003cd6:	d407      	bmi.n	8003ce8 <I2C_ITError+0x38>
 8003cd8:	2a60      	cmp	r2, #96	; 0x60
 8003cda:	d005      	beq.n	8003ce8 <I2C_ITError+0x38>
      hi2c->State = HAL_I2C_STATE_READY;
 8003cdc:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cde:	2200      	movs	r2, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8003ce0:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ce8:	2200      	movs	r2, #0
 8003cea:	6322      	str	r2, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8003cf2:	d134      	bne.n	8003d5e <I2C_ITError+0xae>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003cf4:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8003cf8:	2960      	cmp	r1, #96	; 0x60
 8003cfa:	d075      	beq.n	8003de8 <I2C_ITError+0x138>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003cfc:	695a      	ldr	r2, [r3, #20]
 8003cfe:	0650      	lsls	r0, r2, #25
 8003d00:	d505      	bpl.n	8003d0e <I2C_ITError+0x5e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d02:	691a      	ldr	r2, [r3, #16]
 8003d04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d06:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003d08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8003d0e:	4620      	mov	r0, r4
 8003d10:	f7ff feaa 	bl	8003a68 <HAL_I2C_ErrorCallback>
  CurrentError = hi2c->ErrorCode;
 8003d14:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003d16:	0719      	lsls	r1, r3, #28
 8003d18:	d004      	beq.n	8003d24 <I2C_ITError+0x74>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d1a:	6822      	ldr	r2, [r4, #0]
 8003d1c:	6853      	ldr	r3, [r2, #4]
 8003d1e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003d22:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 8003d24:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003d28:	6c22      	ldr	r2, [r4, #64]	; 0x40
  CurrentState = hi2c->State;
 8003d2a:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003d2c:	0752      	lsls	r2, r2, #29
 8003d2e:	d501      	bpl.n	8003d34 <I2C_ITError+0x84>
 8003d30:	2b28      	cmp	r3, #40	; 0x28
 8003d32:	d02f      	beq.n	8003d94 <I2C_ITError+0xe4>
}
 8003d34:	bd10      	pop	{r4, pc}
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003d36:	2a22      	cmp	r2, #34	; 0x22
 8003d38:	d1c6      	bne.n	8003cc8 <I2C_ITError+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003d3a:	6823      	ldr	r3, [r4, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d42:	601a      	str	r2, [r3, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	0512      	lsls	r2, r2, #20
 8003d48:	d5c8      	bpl.n	8003cdc <I2C_ITError+0x2c>
 8003d4a:	e7cd      	b.n	8003ce8 <I2C_ITError+0x38>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d4c:	2200      	movs	r2, #0
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003d4e:	6823      	ldr	r3, [r4, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d50:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d52:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8003d5c:	d0ca      	beq.n	8003cf4 <I2C_ITError+0x44>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003d5e:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003d60:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003d62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d66:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003d68:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d01e      	beq.n	8003dae <I2C_ITError+0xfe>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003d70:	4b28      	ldr	r3, [pc, #160]	; (8003e14 <I2C_ITError+0x164>)
 8003d72:	6343      	str	r3, [r0, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003d74:	f7ff f846 	bl	8002e04 <HAL_DMA_Abort_IT>
 8003d78:	2800      	cmp	r0, #0
 8003d7a:	d0cb      	beq.n	8003d14 <I2C_ITError+0x64>
        hi2c->State = HAL_I2C_STATE_READY;
 8003d7c:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 8003d7e:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003d80:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8003d82:	6813      	ldr	r3, [r2, #0]
 8003d84:	f023 0301 	bic.w	r3, r3, #1
 8003d88:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8003d8a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003d8e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003d90:	4798      	blx	r3
 8003d92:	e7bf      	b.n	8003d14 <I2C_ITError+0x64>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d94:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d96:	2220      	movs	r2, #32
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003d98:	491f      	ldr	r1, [pc, #124]	; (8003e18 <I2C_ITError+0x168>)
    HAL_I2C_ListenCpltCallback(hi2c);
 8003d9a:	4620      	mov	r0, r4
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003d9c:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d9e:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003da0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003da4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8003da8:	f7ff fdfc 	bl	80039a4 <HAL_I2C_ListenCpltCallback>
}
 8003dac:	bd10      	pop	{r4, pc}
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003dae:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003db0:	4b18      	ldr	r3, [pc, #96]	; (8003e14 <I2C_ITError+0x164>)
 8003db2:	6343      	str	r3, [r0, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003db4:	f7ff f826 	bl	8002e04 <HAL_DMA_Abort_IT>
 8003db8:	2800      	cmp	r0, #0
 8003dba:	d0ab      	beq.n	8003d14 <I2C_ITError+0x64>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003dbc:	6823      	ldr	r3, [r4, #0]
 8003dbe:	695a      	ldr	r2, [r3, #20]
 8003dc0:	0651      	lsls	r1, r2, #25
 8003dc2:	d506      	bpl.n	8003dd2 <I2C_ITError+0x122>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc4:	691a      	ldr	r2, [r3, #16]
 8003dc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003dc8:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003dca:	6a62      	ldr	r2, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 8003dcc:	6823      	ldr	r3, [r4, #0]
          hi2c->pBuffPtr++;
 8003dce:	3201      	adds	r2, #1
 8003dd0:	6262      	str	r2, [r4, #36]	; 0x24
        hi2c->State = HAL_I2C_STATE_READY;
 8003dd2:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 8003dd4:	681a      	ldr	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003dd6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8003dd8:	f022 0201 	bic.w	r2, r2, #1
 8003ddc:	601a      	str	r2, [r3, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8003dde:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003de2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003de4:	4798      	blx	r3
 8003de6:	e795      	b.n	8003d14 <I2C_ITError+0x64>
    hi2c->State = HAL_I2C_STATE_READY;
 8003de8:	2120      	movs	r1, #32
 8003dea:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dee:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003df0:	695a      	ldr	r2, [r3, #20]
 8003df2:	0652      	lsls	r2, r2, #25
 8003df4:	d506      	bpl.n	8003e04 <I2C_ITError+0x154>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003df6:	691a      	ldr	r2, [r3, #16]
 8003df8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003dfa:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003dfc:	6a62      	ldr	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8003dfe:	6823      	ldr	r3, [r4, #0]
      hi2c->pBuffPtr++;
 8003e00:	3201      	adds	r2, #1
 8003e02:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8003e04:	681a      	ldr	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8003e06:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE(hi2c);
 8003e08:	f022 0201 	bic.w	r2, r2, #1
 8003e0c:	601a      	str	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8003e0e:	f7ff fed3 	bl	8003bb8 <HAL_I2C_AbortCpltCallback>
 8003e12:	e77f      	b.n	8003d14 <I2C_ITError+0x64>
 8003e14:	08003bbd 	.word	0x08003bbd
 8003e18:	ffff0000 	.word	0xffff0000

08003e1c <HAL_I2C_EV_IRQHandler>:
{
 8003e1c:	b570      	push	{r4, r5, r6, lr}
 8003e1e:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003e20:	6803      	ldr	r3, [r0, #0]
{
 8003e22:	b08e      	sub	sp, #56	; 0x38
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003e24:	6858      	ldr	r0, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003e26:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e28:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e2c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003e30:	2910      	cmp	r1, #16
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e32:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e34:	fa5f fc81 	uxtb.w	ip, r1
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003e38:	d024      	beq.n	8003e84 <HAL_I2C_EV_IRQHandler+0x68>
 8003e3a:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
 8003e3e:	d021      	beq.n	8003e84 <HAL_I2C_EV_IRQHandler+0x68>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e40:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003e42:	2900      	cmp	r1, #0
 8003e44:	f000 8096 	beq.w	8003f74 <HAL_I2C_EV_IRQHandler+0x158>
  uint32_t sr2itflags               = 0U;
 8003e48:	2500      	movs	r5, #0
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e4a:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e4c:	f011 0f02 	tst.w	r1, #2
 8003e50:	f3c1 0640 	ubfx	r6, r1, #1, #1
 8003e54:	d059      	beq.n	8003f0a <HAL_I2C_EV_IRQHandler+0xee>
 8003e56:	0586      	lsls	r6, r0, #22
 8003e58:	d559      	bpl.n	8003f0e <HAL_I2C_EV_IRQHandler+0xf2>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e5a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003e5c:	b102      	cbz	r2, 8003e60 <HAL_I2C_EV_IRQHandler+0x44>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e5e:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e60:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003e64:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8003e68:	2a28      	cmp	r2, #40	; 0x28
 8003e6a:	f000 821e 	beq.w	80042aa <HAL_I2C_EV_IRQHandler+0x48e>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e6e:	2200      	movs	r2, #0
 8003e70:	920c      	str	r2, [sp, #48]	; 0x30
 8003e72:	6959      	ldr	r1, [r3, #20]
 8003e74:	910c      	str	r1, [sp, #48]	; 0x30
 8003e76:	699b      	ldr	r3, [r3, #24]
    __HAL_UNLOCK(hi2c);
 8003e78:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e7c:	930c      	str	r3, [sp, #48]	; 0x30
 8003e7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
}
 8003e80:	b00e      	add	sp, #56	; 0x38
 8003e82:	bd70      	pop	{r4, r5, r6, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e84:	699e      	ldr	r6, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e86:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003e88:	f011 0f01 	tst.w	r1, #1
 8003e8c:	d11a      	bne.n	8003ec4 <HAL_I2C_EV_IRQHandler+0xa8>
 8003e8e:	f5b5 0f2a 	cmp.w	r5, #11141120	; 0xaa0000
 8003e92:	d0f5      	beq.n	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
 8003e94:	f1b5 4f2a 	cmp.w	r5, #2852126720	; 0xaa000000
 8003e98:	d0f2      	beq.n	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e9a:	070d      	lsls	r5, r1, #28
 8003e9c:	d56d      	bpl.n	8003f7a <HAL_I2C_EV_IRQHandler+0x15e>
 8003e9e:	0585      	lsls	r5, r0, #22
 8003ea0:	f140 8083 	bpl.w	8003faa <HAL_I2C_EV_IRQHandler+0x18e>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003ea4:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003ea6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ea8:	b2d2      	uxtb	r2, r2
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003eaa:	611a      	str	r2, [r3, #16]
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003eac:	2900      	cmp	r1, #0
 8003eae:	f000 81e3 	beq.w	8004278 <HAL_I2C_EV_IRQHandler+0x45c>
 8003eb2:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003eb4:	2a00      	cmp	r2, #0
 8003eb6:	f000 81df 	beq.w	8004278 <HAL_I2C_EV_IRQHandler+0x45c>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ec0:	605a      	str	r2, [r3, #4]
 8003ec2:	e7dd      	b.n	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ec4:	0585      	lsls	r5, r0, #22
 8003ec6:	d56e      	bpl.n	8003fa6 <HAL_I2C_EV_IRQHandler+0x18a>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003ec8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003eca:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 8003ece:	f000 81e9 	beq.w	80042a4 <HAL_I2C_EV_IRQHandler+0x488>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003ed2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003ed4:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003ed8:	bf04      	itt	eq
 8003eda:	2208      	moveq	r2, #8
 8003edc:	62e2      	streq	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ede:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8003ee2:	2a40      	cmp	r2, #64	; 0x40
 8003ee4:	f000 81d7 	beq.w	8004296 <HAL_I2C_EV_IRQHandler+0x47a>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ee8:	6922      	ldr	r2, [r4, #16]
 8003eea:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8003eee:	f000 81b2 	beq.w	8004256 <HAL_I2C_EV_IRQHandler+0x43a>
      if (hi2c->EventCount == 0U)
 8003ef2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003ef4:	2a00      	cmp	r2, #0
 8003ef6:	f040 81ed 	bne.w	80042d4 <HAL_I2C_EV_IRQHandler+0x4b8>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003efa:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003efc:	11d2      	asrs	r2, r2, #7
 8003efe:	f002 0206 	and.w	r2, r2, #6
 8003f02:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8003f06:	611a      	str	r2, [r3, #16]
 8003f08:	e7ba      	b.n	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f0a:	06cd      	lsls	r5, r1, #27
 8003f0c:	d47b      	bmi.n	8004006 <HAL_I2C_EV_IRQHandler+0x1ea>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003f0e:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 8003f12:	2a21      	cmp	r2, #33	; 0x21
 8003f14:	f000 80f4 	beq.w	8004100 <HAL_I2C_EV_IRQHandler+0x2e4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f18:	064e      	lsls	r6, r1, #25
 8003f1a:	f140 8131 	bpl.w	8004180 <HAL_I2C_EV_IRQHandler+0x364>
 8003f1e:	0545      	lsls	r5, r0, #21
 8003f20:	f140 812e 	bpl.w	8004180 <HAL_I2C_EV_IRQHandler+0x364>
 8003f24:	0749      	lsls	r1, r1, #29
 8003f26:	f100 812e 	bmi.w	8004186 <HAL_I2C_EV_IRQHandler+0x36a>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f2a:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8003f2e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f30:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 8003f32:	b292      	uxth	r2, r2
 8003f34:	2a00      	cmp	r2, #0
 8003f36:	d0a3      	beq.n	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f38:	691a      	ldr	r2, [r3, #16]
 8003f3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f3c:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8003f3e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8003f40:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f48:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8003f4a:	3201      	adds	r2, #1
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f4c:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 8003f4e:	6262      	str	r2, [r4, #36]	; 0x24
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d195      	bne.n	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
 8003f54:	292a      	cmp	r1, #42	; 0x2a
 8003f56:	d193      	bne.n	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f58:	2522      	movs	r5, #34	; 0x22
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f5a:	2128      	movs	r1, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f5c:	6822      	ldr	r2, [r4, #0]
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f5e:	4620      	mov	r0, r4
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f60:	6853      	ldr	r3, [r2, #4]
 8003f62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f66:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f68:	6325      	str	r5, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f6a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f6e:	f7ff fd15 	bl	800399c <HAL_I2C_SlaveRxCpltCallback>
 8003f72:	e785      	b.n	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003f74:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003f76:	6959      	ldr	r1, [r3, #20]
 8003f78:	e768      	b.n	8003e4c <HAL_I2C_EV_IRQHandler+0x30>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f7a:	078d      	lsls	r5, r1, #30
 8003f7c:	d515      	bpl.n	8003faa <HAL_I2C_EV_IRQHandler+0x18e>
 8003f7e:	0585      	lsls	r5, r0, #22
 8003f80:	d513      	bpl.n	8003faa <HAL_I2C_EV_IRQHandler+0x18e>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003f82:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003f86:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003f88:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f8a:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003f8e:	b2d2      	uxtb	r2, r2
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f90:	2922      	cmp	r1, #34	; 0x22
 8003f92:	f000 81b1 	beq.w	80042f8 <HAL_I2C_EV_IRQHandler+0x4dc>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f96:	2200      	movs	r2, #0
 8003f98:	920a      	str	r2, [sp, #40]	; 0x28
 8003f9a:	695a      	ldr	r2, [r3, #20]
 8003f9c:	920a      	str	r2, [sp, #40]	; 0x28
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	930a      	str	r3, [sp, #40]	; 0x28
 8003fa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fa4:	e76c      	b.n	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fa6:	070d      	lsls	r5, r1, #28
 8003fa8:	d5e7      	bpl.n	8003f7a <HAL_I2C_EV_IRQHandler+0x15e>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003faa:	0775      	lsls	r5, r6, #29
 8003fac:	f140 80f4 	bpl.w	8004198 <HAL_I2C_EV_IRQHandler+0x37c>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003fb0:	685d      	ldr	r5, [r3, #4]
 8003fb2:	052e      	lsls	r6, r5, #20
 8003fb4:	f53f af64 	bmi.w	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003fb8:	060d      	lsls	r5, r1, #24
 8003fba:	f140 8114 	bpl.w	80041e6 <HAL_I2C_EV_IRQHandler+0x3ca>
 8003fbe:	0546      	lsls	r6, r0, #21
 8003fc0:	f140 8111 	bpl.w	80041e6 <HAL_I2C_EV_IRQHandler+0x3ca>
 8003fc4:	074d      	lsls	r5, r1, #29
 8003fc6:	f100 8111 	bmi.w	80041ec <HAL_I2C_EV_IRQHandler+0x3d0>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fca:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003fce:	8d20      	ldrh	r0, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003fd0:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fd4:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003fd6:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003fd8:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003fda:	2800      	cmp	r0, #0
 8003fdc:	f040 8239 	bne.w	8004452 <HAL_I2C_EV_IRQHandler+0x636>
 8003fe0:	2a21      	cmp	r2, #33	; 0x21
 8003fe2:	f000 8340 	beq.w	8004666 <HAL_I2C_EV_IRQHandler+0x84a>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003fe6:	2940      	cmp	r1, #64	; 0x40
 8003fe8:	f47f af4a 	bne.w	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003fec:	2a22      	cmp	r2, #34	; 0x22
 8003fee:	f47f af47 	bne.w	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
    if (hi2c->XferCount == 0U)
 8003ff2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003ff4:	b292      	uxth	r2, r2
 8003ff6:	2a00      	cmp	r2, #0
 8003ff8:	f040 82c0 	bne.w	800457c <HAL_I2C_EV_IRQHandler+0x760>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004002:	605a      	str	r2, [r3, #4]
 8004004:	e73c      	b.n	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004006:	0585      	lsls	r5, r0, #22
 8004008:	d581      	bpl.n	8003f0e <HAL_I2C_EV_IRQHandler+0xf2>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800400a:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800400e:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004010:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004012:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004016:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004018:	960d      	str	r6, [sp, #52]	; 0x34
 800401a:	695a      	ldr	r2, [r3, #20]
 800401c:	920d      	str	r2, [sp, #52]	; 0x34
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	f042 0201 	orr.w	r2, r2, #1
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800402e:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	0511      	lsls	r1, r2, #20
 8004034:	d521      	bpl.n	800407a <HAL_I2C_EV_IRQHandler+0x25e>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004036:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 800403a:	2a22      	cmp	r2, #34	; 0x22
 800403c:	f000 8179 	beq.w	8004332 <HAL_I2C_EV_IRQHandler+0x516>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004040:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004042:	6802      	ldr	r2, [r0, #0]
 8004044:	6852      	ldr	r2, [r2, #4]
 8004046:	b292      	uxth	r2, r2
 8004048:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 800404a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800404c:	b292      	uxth	r2, r2
 800404e:	b11a      	cbz	r2, 8004058 <HAL_I2C_EV_IRQHandler+0x23c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004050:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004052:	f042 0204 	orr.w	r2, r2, #4
 8004056:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800405e:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004060:	f7fe ffae 	bl	8002fc0 <HAL_DMA_GetState>
 8004064:	2801      	cmp	r0, #1
 8004066:	d008      	beq.n	800407a <HAL_I2C_EV_IRQHandler+0x25e>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004068:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800406a:	4b99      	ldr	r3, [pc, #612]	; (80042d0 <HAL_I2C_EV_IRQHandler+0x4b4>)
 800406c:	6343      	str	r3, [r0, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800406e:	f7fe fec9 	bl	8002e04 <HAL_DMA_Abort_IT>
 8004072:	b110      	cbz	r0, 800407a <HAL_I2C_EV_IRQHandler+0x25e>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004074:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004076:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004078:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 800407a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800407c:	b29b      	uxth	r3, r3
 800407e:	b313      	cbz	r3, 80040c6 <HAL_I2C_EV_IRQHandler+0x2aa>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004080:	6823      	ldr	r3, [r4, #0]
 8004082:	695a      	ldr	r2, [r3, #20]
 8004084:	0752      	lsls	r2, r2, #29
 8004086:	d50a      	bpl.n	800409e <HAL_I2C_EV_IRQHandler+0x282>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004088:	691a      	ldr	r2, [r3, #16]
 800408a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800408c:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800408e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8004090:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004092:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8004094:	1c59      	adds	r1, r3, #1
      hi2c->XferCount--;
 8004096:	b292      	uxth	r2, r2
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004098:	6823      	ldr	r3, [r4, #0]
      hi2c->pBuffPtr++;
 800409a:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800409c:	8562      	strh	r2, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800409e:	695a      	ldr	r2, [r3, #20]
 80040a0:	0656      	lsls	r6, r2, #25
 80040a2:	d509      	bpl.n	80040b8 <HAL_I2C_EV_IRQHandler+0x29c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040a4:	691a      	ldr	r2, [r3, #16]
 80040a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040a8:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 80040aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80040ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80040ae:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 80040b0:	3201      	adds	r2, #1
      hi2c->XferCount--;
 80040b2:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 80040b4:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80040b6:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 80040b8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	b11b      	cbz	r3, 80040c6 <HAL_I2C_EV_IRQHandler+0x2aa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040c0:	f043 0304 	orr.w	r3, r3, #4
 80040c4:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80040c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f040 80de 	bne.w	800428a <HAL_I2C_EV_IRQHandler+0x46e>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80040ce:	2d2a      	cmp	r5, #42	; 0x2a
 80040d0:	f000 8150 	beq.w	8004374 <HAL_I2C_EV_IRQHandler+0x558>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80040d4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80040d8:	2b28      	cmp	r3, #40	; 0x28
 80040da:	f000 8153 	beq.w	8004384 <HAL_I2C_EV_IRQHandler+0x568>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80040de:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80040e0:	2b22      	cmp	r3, #34	; 0x22
 80040e2:	d002      	beq.n	80040ea <HAL_I2C_EV_IRQHandler+0x2ce>
 80040e4:	2d22      	cmp	r5, #34	; 0x22
 80040e6:	f47f aecb 	bne.w	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
        hi2c->PreviousState = I2C_STATE_NONE;
 80040ea:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80040ec:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80040ee:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040f0:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 80040f2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040fa:	f7ff fc4f 	bl	800399c <HAL_I2C_SlaveRxCpltCallback>
 80040fe:	e6bf      	b.n	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004100:	060d      	lsls	r5, r1, #24
 8004102:	d528      	bpl.n	8004156 <HAL_I2C_EV_IRQHandler+0x33a>
 8004104:	0546      	lsls	r6, r0, #21
 8004106:	d526      	bpl.n	8004156 <HAL_I2C_EV_IRQHandler+0x33a>
 8004108:	074d      	lsls	r5, r1, #29
 800410a:	d427      	bmi.n	800415c <HAL_I2C_EV_IRQHandler+0x340>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800410c:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8004110:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004112:	b2c0      	uxtb	r0, r0
  if (hi2c->XferCount != 0U)
 8004114:	b289      	uxth	r1, r1
 8004116:	2900      	cmp	r1, #0
 8004118:	f43f aeb2 	beq.w	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800411c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800411e:	f811 5b01 	ldrb.w	r5, [r1], #1
 8004122:	611d      	str	r5, [r3, #16]
    hi2c->pBuffPtr++;
 8004124:	6261      	str	r1, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8004126:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8004128:	3901      	subs	r1, #1
 800412a:	b289      	uxth	r1, r1
 800412c:	8561      	strh	r1, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800412e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8004130:	b289      	uxth	r1, r1
 8004132:	2900      	cmp	r1, #0
 8004134:	f47f aea4 	bne.w	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
 8004138:	2829      	cmp	r0, #41	; 0x29
 800413a:	f47f aea1 	bne.w	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800413e:	2528      	movs	r5, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004140:	6859      	ldr	r1, [r3, #4]
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004142:	4620      	mov	r0, r4
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004144:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004148:	6059      	str	r1, [r3, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800414a:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800414c:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004150:	f7ff fc22 	bl	8003998 <HAL_I2C_SlaveTxCpltCallback>
 8004154:	e694      	b.n	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004156:	0749      	lsls	r1, r1, #29
 8004158:	f57f ae92 	bpl.w	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
 800415c:	0582      	lsls	r2, r0, #22
 800415e:	f57f ae8f 	bpl.w	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
  if (hi2c->XferCount != 0U)
 8004162:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004164:	b292      	uxth	r2, r2
 8004166:	2a00      	cmp	r2, #0
 8004168:	f43f ae8a 	beq.w	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800416c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800416e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004172:	6119      	str	r1, [r3, #16]
    hi2c->XferCount--;
 8004174:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8004176:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8004178:	3b01      	subs	r3, #1
 800417a:	b29b      	uxth	r3, r3
 800417c:	8563      	strh	r3, [r4, #42]	; 0x2a
 800417e:	e67f      	b.n	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004180:	074a      	lsls	r2, r1, #29
 8004182:	f57f ae7d 	bpl.w	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
 8004186:	0586      	lsls	r6, r0, #22
 8004188:	f57f ae7a 	bpl.w	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
  if (hi2c->XferCount != 0U)
 800418c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800418e:	b292      	uxth	r2, r2
 8004190:	2a00      	cmp	r2, #0
 8004192:	f43f ae75 	beq.w	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
 8004196:	e01b      	b.n	80041d0 <HAL_I2C_EV_IRQHandler+0x3b4>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	0515      	lsls	r5, r2, #20
 800419c:	f53f ae70 	bmi.w	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041a0:	064a      	lsls	r2, r1, #25
 80041a2:	d433      	bmi.n	800420c <HAL_I2C_EV_IRQHandler+0x3f0>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041a4:	0749      	lsls	r1, r1, #29
 80041a6:	f57f ae6b 	bpl.w	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
 80041aa:	0582      	lsls	r2, r0, #22
 80041ac:	f57f ae68 	bpl.w	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041b0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 80041b2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80041b4:	b292      	uxth	r2, r2
 80041b6:	2a04      	cmp	r2, #4
 80041b8:	f000 8118 	beq.w	80043ec <HAL_I2C_EV_IRQHandler+0x5d0>
  else if (hi2c->XferCount == 3U)
 80041bc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80041be:	b292      	uxth	r2, r2
 80041c0:	2a03      	cmp	r2, #3
 80041c2:	f000 8158 	beq.w	8004476 <HAL_I2C_EV_IRQHandler+0x65a>
  else if (hi2c->XferCount == 2U)
 80041c6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80041c8:	b292      	uxth	r2, r2
 80041ca:	2a02      	cmp	r2, #2
 80041cc:	f000 8184 	beq.w	80044d8 <HAL_I2C_EV_IRQHandler+0x6bc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d0:	691a      	ldr	r2, [r3, #16]
 80041d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041d4:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 80041d6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80041d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80041da:	3b01      	subs	r3, #1
    hi2c->pBuffPtr++;
 80041dc:	3201      	adds	r2, #1
    hi2c->XferCount--;
 80041de:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 80041e0:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80041e2:	8563      	strh	r3, [r4, #42]	; 0x2a
      }
 80041e4:	e64c      	b.n	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041e6:	0749      	lsls	r1, r1, #29
 80041e8:	f57f ae4a 	bpl.w	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
 80041ec:	0586      	lsls	r6, r0, #22
 80041ee:	f57f ae47 	bpl.w	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80041f2:	2a21      	cmp	r2, #33	; 0x21
 80041f4:	f000 8102 	beq.w	80043fc <HAL_I2C_EV_IRQHandler+0x5e0>
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80041f8:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
 80041fc:	f47f ae40 	bne.w	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004200:	4620      	mov	r0, r4
}
 8004202:	b00e      	add	sp, #56	; 0x38
 8004204:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004208:	f7ff bbce 	b.w	80039a8 <I2C_MemoryTransmit_TXE_BTF>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800420c:	0546      	lsls	r6, r0, #21
 800420e:	d5c9      	bpl.n	80041a4 <HAL_I2C_EV_IRQHandler+0x388>
 8004210:	074d      	lsls	r5, r1, #29
 8004212:	f3c1 0280 	ubfx	r2, r1, #2, #1
 8004216:	d4c8      	bmi.n	80041aa <HAL_I2C_EV_IRQHandler+0x38e>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004218:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 800421c:	2922      	cmp	r1, #34	; 0x22
 800421e:	f47f ae2f 	bne.w	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
    tmp = hi2c->XferCount;
 8004222:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8004224:	b289      	uxth	r1, r1
    if (tmp > 3U)
 8004226:	2903      	cmp	r1, #3
 8004228:	f240 81ae 	bls.w	8004588 <HAL_I2C_EV_IRQHandler+0x76c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800422c:	691a      	ldr	r2, [r3, #16]
 800422e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004230:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8004232:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8004234:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004236:	3b01      	subs	r3, #1
 8004238:	b29b      	uxth	r3, r3
 800423a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 800423c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800423e:	3201      	adds	r2, #1
      if (hi2c->XferCount == (uint16_t)3)
 8004240:	b29b      	uxth	r3, r3
 8004242:	2b03      	cmp	r3, #3
      hi2c->pBuffPtr++;
 8004244:	6262      	str	r2, [r4, #36]	; 0x24
      if (hi2c->XferCount == (uint16_t)3)
 8004246:	f47f ae1b 	bne.w	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800424a:	6822      	ldr	r2, [r4, #0]
 800424c:	6853      	ldr	r3, [r2, #4]
 800424e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004252:	6053      	str	r3, [r2, #4]
 8004254:	e614      	b.n	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004256:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800425a:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800425c:	6c62      	ldr	r2, [r4, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800425e:	bf16      	itet	ne
 8004260:	f042 0201 	orrne.w	r2, r2, #1
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004264:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004268:	b2d2      	uxtbne	r2, r2
 800426a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800426c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800426e:	b11a      	cbz	r2, 8004278 <HAL_I2C_EV_IRQHandler+0x45c>
 8004270:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004272:	2a00      	cmp	r2, #0
 8004274:	f47f ae21 	bne.w	8003eba <HAL_I2C_EV_IRQHandler+0x9e>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004278:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800427a:	2a00      	cmp	r2, #0
 800427c:	f43f ae00 	beq.w	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
 8004280:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004282:	2a00      	cmp	r2, #0
 8004284:	f47f ae19 	bne.w	8003eba <HAL_I2C_EV_IRQHandler+0x9e>
 8004288:	e5fa      	b.n	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
    I2C_ITError(hi2c);
 800428a:	4620      	mov	r0, r4
}
 800428c:	b00e      	add	sp, #56	; 0x38
 800428e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    I2C_ITError(hi2c);
 8004292:	f7ff bd0d 	b.w	8003cb0 <I2C_ITError>
    if (hi2c->EventCount == 0U)
 8004296:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004298:	bb42      	cbnz	r2, 80042ec <HAL_I2C_EV_IRQHandler+0x4d0>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800429a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800429c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042a0:	611a      	str	r2, [r3, #16]
 80042a2:	e5ed      	b.n	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80042a4:	2201      	movs	r2, #1
 80042a6:	62e2      	str	r2, [r4, #44]	; 0x2c
 80042a8:	e619      	b.n	8003ede <HAL_I2C_EV_IRQHandler+0xc2>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80042aa:	685a      	ldr	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80042ac:	ea6f 0195 	mvn.w	r1, r5, lsr #2
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80042b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042b4:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hi2c);
 80042b6:	2300      	movs	r3, #0
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80042b8:	062e      	lsls	r6, r5, #24
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80042ba:	4620      	mov	r0, r4
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80042bc:	bf54      	ite	pl
 80042be:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80042c0:	8b22      	ldrhmi	r2, [r4, #24]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80042c2:	f001 0101 	and.w	r1, r1, #1
    __HAL_UNLOCK(hi2c);
 80042c6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80042ca:	f7ff fb69 	bl	80039a0 <HAL_I2C_AddrCallback>
 80042ce:	e5d7      	b.n	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
 80042d0:	08003bbd 	.word	0x08003bbd
      else if (hi2c->EventCount == 1U)
 80042d4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80042d6:	2a01      	cmp	r2, #1
 80042d8:	f47f add2 	bne.w	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80042dc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80042de:	11d2      	asrs	r2, r2, #7
 80042e0:	f002 0206 	and.w	r2, r2, #6
 80042e4:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 80042e8:	611a      	str	r2, [r3, #16]
 80042ea:	e5c9      	b.n	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80042ec:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80042ee:	f042 0201 	orr.w	r2, r2, #1
 80042f2:	b2d2      	uxtb	r2, r2
 80042f4:	611a      	str	r2, [r3, #16]
 80042f6:	e5c3      	b.n	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80042f8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80042fa:	b911      	cbnz	r1, 8004302 <HAL_I2C_EV_IRQHandler+0x4e6>
 80042fc:	2a40      	cmp	r2, #64	; 0x40
 80042fe:	f000 80a1 	beq.w	8004444 <HAL_I2C_EV_IRQHandler+0x628>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004302:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004304:	b922      	cbnz	r2, 8004310 <HAL_I2C_EV_IRQHandler+0x4f4>
 8004306:	6921      	ldr	r1, [r4, #16]
 8004308:	f5b1 4f40 	cmp.w	r1, #49152	; 0xc000
 800430c:	f000 80a5 	beq.w	800445a <HAL_I2C_EV_IRQHandler+0x63e>
      if (hi2c->XferCount == 0U)
 8004310:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004312:	b292      	uxth	r2, r2
 8004314:	2a00      	cmp	r2, #0
 8004316:	d142      	bne.n	800439e <HAL_I2C_EV_IRQHandler+0x582>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004318:	9202      	str	r2, [sp, #8]
 800431a:	695a      	ldr	r2, [r3, #20]
 800431c:	9202      	str	r2, [sp, #8]
 800431e:	699a      	ldr	r2, [r3, #24]
 8004320:	9202      	str	r2, [sp, #8]
 8004322:	9a02      	ldr	r2, [sp, #8]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800432a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 800432c:	2300      	movs	r3, #0
 800432e:	6523      	str	r3, [r4, #80]	; 0x50
 8004330:	e5a6      	b.n	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004332:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004334:	6802      	ldr	r2, [r0, #0]
 8004336:	6852      	ldr	r2, [r2, #4]
 8004338:	b292      	uxth	r2, r2
 800433a:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 800433c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800433e:	b292      	uxth	r2, r2
 8004340:	b11a      	cbz	r2, 800434a <HAL_I2C_EV_IRQHandler+0x52e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004342:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004344:	f042 0204 	orr.w	r2, r2, #4
 8004348:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004350:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004352:	f7fe fe35 	bl	8002fc0 <HAL_DMA_GetState>
 8004356:	2801      	cmp	r0, #1
 8004358:	f43f ae8f 	beq.w	800407a <HAL_I2C_EV_IRQHandler+0x25e>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800435c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800435e:	4ba6      	ldr	r3, [pc, #664]	; (80045f8 <HAL_I2C_EV_IRQHandler+0x7dc>)
 8004360:	6343      	str	r3, [r0, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004362:	f7fe fd4f 	bl	8002e04 <HAL_DMA_Abort_IT>
 8004366:	2800      	cmp	r0, #0
 8004368:	f43f ae87 	beq.w	800407a <HAL_I2C_EV_IRQHandler+0x25e>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800436c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800436e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004370:	4798      	blx	r3
 8004372:	e682      	b.n	800407a <HAL_I2C_EV_IRQHandler+0x25e>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004374:	2228      	movs	r2, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_NONE;
 8004376:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004378:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800437a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800437e:	f7ff fb0d 	bl	800399c <HAL_I2C_SlaveRxCpltCallback>
 8004382:	e6a7      	b.n	80040d4 <HAL_I2C_EV_IRQHandler+0x2b8>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004384:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8004386:	2220      	movs	r2, #32
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004388:	499c      	ldr	r1, [pc, #624]	; (80045fc <HAL_I2C_EV_IRQHandler+0x7e0>)
      HAL_I2C_ListenCpltCallback(hi2c);
 800438a:	4620      	mov	r0, r4
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800438c:	62e1      	str	r1, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800438e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004390:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004394:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004398:	f7ff fb04 	bl	80039a4 <HAL_I2C_ListenCpltCallback>
 800439c:	e570      	b.n	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
      else if (hi2c->XferCount == 1U)
 800439e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80043a0:	b292      	uxth	r2, r2
 80043a2:	2a01      	cmp	r2, #1
 80043a4:	d076      	beq.n	8004494 <HAL_I2C_EV_IRQHandler+0x678>
      else if (hi2c->XferCount == 2U)
 80043a6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80043a8:	b292      	uxth	r2, r2
 80043aa:	2a02      	cmp	r2, #2
 80043ac:	f000 812e 	beq.w	800460c <HAL_I2C_EV_IRQHandler+0x7f0>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043b6:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80043b8:	685a      	ldr	r2, [r3, #4]
 80043ba:	0512      	lsls	r2, r2, #20
 80043bc:	d50e      	bpl.n	80043dc <HAL_I2C_EV_IRQHandler+0x5c0>
 80043be:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 80043c2:	d007      	beq.n	80043d4 <HAL_I2C_EV_IRQHandler+0x5b8>
 80043c4:	3801      	subs	r0, #1
 80043c6:	281f      	cmp	r0, #31
 80043c8:	d808      	bhi.n	80043dc <HAL_I2C_EV_IRQHandler+0x5c0>
 80043ca:	4a8d      	ldr	r2, [pc, #564]	; (8004600 <HAL_I2C_EV_IRQHandler+0x7e4>)
 80043cc:	fa22 f000 	lsr.w	r0, r2, r0
 80043d0:	07c6      	lsls	r6, r0, #31
 80043d2:	d503      	bpl.n	80043dc <HAL_I2C_EV_IRQHandler+0x5c0>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043da:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043dc:	2200      	movs	r2, #0
 80043de:	9209      	str	r2, [sp, #36]	; 0x24
 80043e0:	695a      	ldr	r2, [r3, #20]
 80043e2:	9209      	str	r2, [sp, #36]	; 0x24
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	9309      	str	r3, [sp, #36]	; 0x24
 80043e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043ea:	e79f      	b.n	800432c <HAL_I2C_EV_IRQHandler+0x510>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043ec:	685a      	ldr	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043f4:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 80043fa:	e6ec      	b.n	80041d6 <HAL_I2C_EV_IRQHandler+0x3ba>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80043fc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80043fe:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004402:	2a21      	cmp	r2, #33	; 0x21
 8004404:	f47f ad3c 	bne.w	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
    if (hi2c->XferCount != 0U)
 8004408:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800440a:	b292      	uxth	r2, r2
 800440c:	2a00      	cmp	r2, #0
 800440e:	f47f aead 	bne.w	800416c <HAL_I2C_EV_IRQHandler+0x350>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004412:	2908      	cmp	r1, #8
 8004414:	f000 809a 	beq.w	800454c <HAL_I2C_EV_IRQHandler+0x730>
 8004418:	2920      	cmp	r1, #32
 800441a:	f000 8097 	beq.w	800454c <HAL_I2C_EV_IRQHandler+0x730>
 800441e:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8004422:	f000 8093 	beq.w	800454c <HAL_I2C_EV_IRQHandler+0x730>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004426:	2611      	movs	r6, #17
        hi2c->State = HAL_I2C_STATE_READY;
 8004428:	2520      	movs	r5, #32
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800442a:	4620      	mov	r0, r4
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800442c:	6859      	ldr	r1, [r3, #4]
 800442e:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8004432:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004434:	6326      	str	r6, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004436:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800443a:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800443e:	f7ff faa7 	bl	8003990 <HAL_I2C_MasterTxCpltCallback>
 8004442:	e51d      	b.n	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004444:	9100      	str	r1, [sp, #0]
 8004446:	695a      	ldr	r2, [r3, #20]
 8004448:	9200      	str	r2, [sp, #0]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	9b00      	ldr	r3, [sp, #0]
 8004450:	e516      	b.n	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004452:	2a21      	cmp	r2, #33	; 0x21
 8004454:	f43f adcd 	beq.w	8003ff2 <HAL_I2C_EV_IRQHandler+0x1d6>
 8004458:	e5c5      	b.n	8003fe6 <HAL_I2C_EV_IRQHandler+0x1ca>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800445a:	9201      	str	r2, [sp, #4]
 800445c:	695a      	ldr	r2, [r3, #20]
 800445e:	9201      	str	r2, [sp, #4]
 8004460:	699a      	ldr	r2, [r3, #24]
 8004462:	9201      	str	r2, [sp, #4]
 8004464:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800446c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800446e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004470:	3301      	adds	r3, #1
 8004472:	6523      	str	r3, [r4, #80]	; 0x50
 8004474:	e504      	b.n	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004476:	685a      	ldr	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004478:	2904      	cmp	r1, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800447a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800447e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004480:	f43f aea6 	beq.w	80041d0 <HAL_I2C_EV_IRQHandler+0x3b4>
 8004484:	2902      	cmp	r1, #2
 8004486:	f43f aea3 	beq.w	80041d0 <HAL_I2C_EV_IRQHandler+0x3b4>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	e69d      	b.n	80041d0 <HAL_I2C_EV_IRQHandler+0x3b4>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004494:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8004498:	f000 8104 	beq.w	80046a4 <HAL_I2C_EV_IRQHandler+0x888>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800449c:	2808      	cmp	r0, #8
 800449e:	f000 80d2 	beq.w	8004646 <HAL_I2C_EV_IRQHandler+0x82a>
 80044a2:	2820      	cmp	r0, #32
 80044a4:	f000 80cf 	beq.w	8004646 <HAL_I2C_EV_IRQHandler+0x82a>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80044a8:	2d12      	cmp	r5, #18
 80044aa:	f000 8145 	beq.w	8004738 <HAL_I2C_EV_IRQHandler+0x91c>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80044ae:	2810      	cmp	r0, #16
 80044b0:	f200 8144 	bhi.w	800473c <HAL_I2C_EV_IRQHandler+0x920>
 80044b4:	4a53      	ldr	r2, [pc, #332]	; (8004604 <HAL_I2C_EV_IRQHandler+0x7e8>)
 80044b6:	fa22 f000 	lsr.w	r0, r2, r0
 80044ba:	07c2      	lsls	r2, r0, #31
 80044bc:	f140 813e 	bpl.w	800473c <HAL_I2C_EV_IRQHandler+0x920>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044c6:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044c8:	2200      	movs	r2, #0
 80044ca:	9205      	str	r2, [sp, #20]
 80044cc:	695a      	ldr	r2, [r3, #20]
 80044ce:	9205      	str	r2, [sp, #20]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	9305      	str	r3, [sp, #20]
 80044d4:	9b05      	ldr	r3, [sp, #20]
 80044d6:	e729      	b.n	800432c <HAL_I2C_EV_IRQHandler+0x510>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80044d8:	2901      	cmp	r1, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044da:	681a      	ldr	r2, [r3, #0]
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80044dc:	f000 80de 	beq.w	800469c <HAL_I2C_EV_IRQHandler+0x880>
 80044e0:	2910      	cmp	r1, #16
 80044e2:	f000 80db 	beq.w	800469c <HAL_I2C_EV_IRQHandler+0x880>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80044e6:	2904      	cmp	r1, #4
 80044e8:	f000 8117 	beq.w	800471a <HAL_I2C_EV_IRQHandler+0x8fe>
 80044ec:	2902      	cmp	r1, #2
 80044ee:	f000 8114 	beq.w	800471a <HAL_I2C_EV_IRQHandler+0x8fe>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044f6:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80044f8:	2020      	movs	r0, #32
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044fa:	691a      	ldr	r2, [r3, #16]
 80044fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044fe:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8004500:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004502:	6822      	ldr	r2, [r4, #0]
    hi2c->XferCount--;
 8004504:	3b01      	subs	r3, #1
 8004506:	b29b      	uxth	r3, r3
 8004508:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 800450a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800450c:	6912      	ldr	r2, [r2, #16]
    hi2c->pBuffPtr++;
 800450e:	1c59      	adds	r1, r3, #1
 8004510:	6261      	str	r1, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004512:	705a      	strb	r2, [r3, #1]
    hi2c->XferCount--;
 8004514:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004516:	6821      	ldr	r1, [r4, #0]
    hi2c->XferCount--;
 8004518:	3b01      	subs	r3, #1
 800451a:	b29b      	uxth	r3, r3
 800451c:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800451e:	684b      	ldr	r3, [r1, #4]
    hi2c->pBuffPtr++;
 8004520:	6a62      	ldr	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    hi2c->pBuffPtr++;
 8004526:	3201      	adds	r2, #1
 8004528:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800452a:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800452c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004530:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8004534:	2b40      	cmp	r3, #64	; 0x40
 8004536:	f000 80c9 	beq.w	80046cc <HAL_I2C_EV_IRQHandler+0x8b0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800453a:	2200      	movs	r2, #0
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800453c:	2312      	movs	r3, #18
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800453e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004542:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004544:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004546:	f7ff fa25 	bl	8003994 <HAL_I2C_MasterRxCpltCallback>
 800454a:	e499      	b.n	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
        hi2c->PreviousState = I2C_STATE_NONE;
 800454c:	2200      	movs	r2, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800454e:	2020      	movs	r0, #32
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004550:	6859      	ldr	r1, [r3, #4]
 8004552:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8004556:	6059      	str	r1, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004558:	6819      	ldr	r1, [r3, #0]
 800455a:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800455e:	6019      	str	r1, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004560:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004562:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004566:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800456a:	4620      	mov	r0, r4
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800456c:	2b40      	cmp	r3, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800456e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004572:	f47f af64 	bne.w	800443e <HAL_I2C_EV_IRQHandler+0x622>
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004576:	f7fd fdb7 	bl	80020e8 <HAL_I2C_MemTxCpltCallback>
 800457a:	e481      	b.n	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800457c:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8004580:	2a40      	cmp	r2, #64	; 0x40
 8004582:	f47f adf3 	bne.w	800416c <HAL_I2C_EV_IRQHandler+0x350>
 8004586:	e63b      	b.n	8004200 <HAL_I2C_EV_IRQHandler+0x3e4>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004588:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800458a:	2802      	cmp	r0, #2
 800458c:	f43f ac78 	beq.w	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
 8004590:	2901      	cmp	r1, #1
 8004592:	f63f ac75 	bhi.w	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004596:	f246 11a8 	movw	r1, #25000	; 0x61a8
 800459a:	481b      	ldr	r0, [pc, #108]	; (8004608 <HAL_I2C_EV_IRQHandler+0x7ec>)
  __IO uint32_t count = 0U;
 800459c:	920b      	str	r2, [sp, #44]	; 0x2c
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800459e:	6802      	ldr	r2, [r0, #0]
 80045a0:	fbb2 f2f1 	udiv	r2, r2, r1
 80045a4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80045a8:	920b      	str	r2, [sp, #44]	; 0x2c
 80045aa:	e004      	b.n	80045b6 <HAL_I2C_EV_IRQHandler+0x79a>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 80045b2:	f000 80c8 	beq.w	8004746 <HAL_I2C_EV_IRQHandler+0x92a>
    count--;
 80045b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80045b8:	3a01      	subs	r2, #1
 80045ba:	920b      	str	r2, [sp, #44]	; 0x2c
    if (count == 0U)
 80045bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80045be:	2900      	cmp	r1, #0
 80045c0:	d1f4      	bne.n	80045ac <HAL_I2C_EV_IRQHandler+0x790>
        hi2c->State = HAL_I2C_STATE_READY;
 80045c2:	2520      	movs	r5, #32
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045c4:	6c22      	ldr	r2, [r4, #64]	; 0x40
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045c8:	f042 0220 	orr.w	r2, r2, #32
 80045cc:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045d4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	7003      	strb	r3, [r0, #0]
        hi2c->XferCount--;
 80045da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 80045dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80045de:	3b01      	subs	r3, #1
        hi2c->pBuffPtr++;
 80045e0:	3201      	adds	r2, #1
        hi2c->XferCount--;
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	8563      	strh	r3, [r4, #42]	; 0x2a
        HAL_I2C_ErrorCallback(hi2c);
 80045e6:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 80045e8:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        hi2c->pBuffPtr++;
 80045ec:	6262      	str	r2, [r4, #36]	; 0x24
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ee:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80045f2:	f7ff fa39 	bl	8003a68 <HAL_I2C_ErrorCallback>
 80045f6:	e443      	b.n	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
 80045f8:	08003bbd 	.word	0x08003bbd
 80045fc:	ffff0000 	.word	0xffff0000
 8004600:	80008081 	.word	0x80008081
 8004604:	00010014 	.word	0x00010014
 8004608:	20000010 	.word	0x20000010
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800460c:	2810      	cmp	r0, #16
 800460e:	d966      	bls.n	80046de <HAL_I2C_EV_IRQHandler+0x8c2>
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004610:	2100      	movs	r1, #0
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004618:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800461a:	9107      	str	r1, [sp, #28]
 800461c:	695a      	ldr	r2, [r3, #20]
 800461e:	9207      	str	r2, [sp, #28]
 8004620:	699a      	ldr	r2, [r3, #24]
 8004622:	9207      	str	r2, [sp, #28]
 8004624:	9a07      	ldr	r2, [sp, #28]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800462c:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	0516      	lsls	r6, r2, #20
 8004632:	f57f ae7b 	bpl.w	800432c <HAL_I2C_EV_IRQHandler+0x510>
 8004636:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 800463a:	d164      	bne.n	8004706 <HAL_I2C_EV_IRQHandler+0x8ea>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004642:	605a      	str	r2, [r3, #4]
 8004644:	e672      	b.n	800432c <HAL_I2C_EV_IRQHandler+0x510>
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004646:	2100      	movs	r1, #0
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800464e:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004650:	9106      	str	r1, [sp, #24]
 8004652:	695a      	ldr	r2, [r3, #20]
 8004654:	9206      	str	r2, [sp, #24]
 8004656:	699a      	ldr	r2, [r3, #24]
 8004658:	9206      	str	r2, [sp, #24]
 800465a:	9a06      	ldr	r2, [sp, #24]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	e662      	b.n	800432c <HAL_I2C_EV_IRQHandler+0x510>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004666:	2d08      	cmp	r5, #8
 8004668:	f43f af70 	beq.w	800454c <HAL_I2C_EV_IRQHandler+0x730>
 800466c:	2d20      	cmp	r5, #32
 800466e:	f43f af6d 	beq.w	800454c <HAL_I2C_EV_IRQHandler+0x730>
 8004672:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 8004676:	f43f af69 	beq.w	800454c <HAL_I2C_EV_IRQHandler+0x730>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800467a:	2611      	movs	r6, #17
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800467c:	2500      	movs	r5, #0
      hi2c->State = HAL_I2C_STATE_READY;
 800467e:	2120      	movs	r1, #32
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004680:	685a      	ldr	r2, [r3, #4]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004682:	4620      	mov	r0, r4
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004684:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004688:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800468a:	6326      	str	r6, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800468c:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004690:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004694:	f7ff f97c 	bl	8003990 <HAL_I2C_MasterTxCpltCallback>
 8004698:	f7ff bbf2 	b.w	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800469c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046a0:	601a      	str	r2, [r3, #0]
 80046a2:	e729      	b.n	80044f8 <HAL_I2C_EV_IRQHandler+0x6dc>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046aa:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 80046b2:	d036      	beq.n	8004722 <HAL_I2C_EV_IRQHandler+0x906>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046b4:	2100      	movs	r1, #0
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046bc:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046be:	9103      	str	r1, [sp, #12]
 80046c0:	695a      	ldr	r2, [r3, #20]
 80046c2:	9203      	str	r2, [sp, #12]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	9303      	str	r3, [sp, #12]
 80046c8:	9b03      	ldr	r3, [sp, #12]
 80046ca:	e62f      	b.n	800432c <HAL_I2C_EV_IRQHandler+0x510>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046cc:	2300      	movs	r3, #0
      HAL_I2C_MemRxCpltCallback(hi2c);
 80046ce:	4620      	mov	r0, r4
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80046d4:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80046d6:	f7ff f9c5 	bl	8003a64 <HAL_I2C_MemRxCpltCallback>
 80046da:	f7ff bbd1 	b.w	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80046de:	4a2f      	ldr	r2, [pc, #188]	; (800479c <HAL_I2C_EV_IRQHandler+0x980>)
 80046e0:	40c2      	lsrs	r2, r0
 80046e2:	43d2      	mvns	r2, r2
 80046e4:	f012 0201 	ands.w	r2, r2, #1
 80046e8:	d192      	bne.n	8004610 <HAL_I2C_EV_IRQHandler+0x7f4>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ea:	6819      	ldr	r1, [r3, #0]
 80046ec:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80046f0:	6019      	str	r1, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046f2:	9208      	str	r2, [sp, #32]
 80046f4:	695a      	ldr	r2, [r3, #20]
 80046f6:	9208      	str	r2, [sp, #32]
 80046f8:	699a      	ldr	r2, [r3, #24]
 80046fa:	9208      	str	r2, [sp, #32]
 80046fc:	9a08      	ldr	r2, [sp, #32]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	0515      	lsls	r5, r2, #20
 8004702:	f57f ae13 	bpl.w	800432c <HAL_I2C_EV_IRQHandler+0x510>
 8004706:	3801      	subs	r0, #1
 8004708:	281f      	cmp	r0, #31
 800470a:	f63f ae0f 	bhi.w	800432c <HAL_I2C_EV_IRQHandler+0x510>
 800470e:	4a24      	ldr	r2, [pc, #144]	; (80047a0 <HAL_I2C_EV_IRQHandler+0x984>)
 8004710:	40c2      	lsrs	r2, r0
 8004712:	07d1      	lsls	r1, r2, #31
 8004714:	f57f ae0a 	bpl.w	800432c <HAL_I2C_EV_IRQHandler+0x510>
 8004718:	e790      	b.n	800463c <HAL_I2C_EV_IRQHandler+0x820>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800471a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800471e:	601a      	str	r2, [r3, #0]
 8004720:	e6ea      	b.n	80044f8 <HAL_I2C_EV_IRQHandler+0x6dc>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004722:	9204      	str	r2, [sp, #16]
 8004724:	695a      	ldr	r2, [r3, #20]
 8004726:	9204      	str	r2, [sp, #16]
 8004728:	699a      	ldr	r2, [r3, #24]
 800472a:	9204      	str	r2, [sp, #16]
 800472c:	9a04      	ldr	r2, [sp, #16]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	e5f9      	b.n	800432c <HAL_I2C_EV_IRQHandler+0x510>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004738:	2801      	cmp	r0, #1
 800473a:	d184      	bne.n	8004646 <HAL_I2C_EV_IRQHandler+0x82a>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	e6c0      	b.n	80044c8 <HAL_I2C_EV_IRQHandler+0x6ac>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004746:	6819      	ldr	r1, [r3, #0]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004748:	6a60      	ldr	r0, [r4, #36]	; 0x24
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800474a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800474e:	6019      	str	r1, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004750:	6859      	ldr	r1, [r3, #4]
 8004752:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8004756:	6059      	str	r1, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	7003      	strb	r3, [r0, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 800475c:	2020      	movs	r0, #32
        hi2c->XferCount--;
 800475e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8004760:	6a61      	ldr	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8004762:	3b01      	subs	r3, #1
 8004764:	b29b      	uxth	r3, r3
 8004766:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004768:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800476c:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
        hi2c->pBuffPtr++;
 8004770:	3101      	adds	r1, #1
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004772:	2b40      	cmp	r3, #64	; 0x40
        hi2c->pBuffPtr++;
 8004774:	6261      	str	r1, [r4, #36]	; 0x24
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004776:	d008      	beq.n	800478a <HAL_I2C_EV_IRQHandler+0x96e>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004778:	2312      	movs	r3, #18
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800477a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800477e:	4620      	mov	r0, r4
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004780:	6323      	str	r3, [r4, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004782:	f7ff f907 	bl	8003994 <HAL_I2C_MasterRxCpltCallback>
 8004786:	f7ff bb7b 	b.w	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800478a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          HAL_I2C_MemRxCpltCallback(hi2c);
 800478e:	4620      	mov	r0, r4
          hi2c->PreviousState = I2C_STATE_NONE;
 8004790:	6322      	str	r2, [r4, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004792:	f7ff f967 	bl	8003a64 <HAL_I2C_MemRxCpltCallback>
 8004796:	f7ff bb73 	b.w	8003e80 <HAL_I2C_EV_IRQHandler+0x64>
 800479a:	bf00      	nop
 800479c:	00010014 	.word	0x00010014
 80047a0:	80008081 	.word	0x80008081

080047a4 <HAL_I2C_GetState>:
  return hi2c->State;
 80047a4:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop

080047ac <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047ac:	2800      	cmp	r0, #0
 80047ae:	f000 81b6 	beq.w	8004b1e <HAL_RCC_OscConfig+0x372>
{
 80047b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047b6:	6803      	ldr	r3, [r0, #0]
 80047b8:	4604      	mov	r4, r0
 80047ba:	07dd      	lsls	r5, r3, #31
{
 80047bc:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047be:	d535      	bpl.n	800482c <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80047c0:	499a      	ldr	r1, [pc, #616]	; (8004a2c <HAL_RCC_OscConfig+0x280>)
 80047c2:	684a      	ldr	r2, [r1, #4]
 80047c4:	f002 020c 	and.w	r2, r2, #12
 80047c8:	2a04      	cmp	r2, #4
 80047ca:	f000 80ef 	beq.w	80049ac <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80047ce:	684a      	ldr	r2, [r1, #4]
 80047d0:	f002 020c 	and.w	r2, r2, #12
 80047d4:	2a08      	cmp	r2, #8
 80047d6:	f000 80e5 	beq.w	80049a4 <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047da:	6863      	ldr	r3, [r4, #4]
 80047dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047e0:	d010      	beq.n	8004804 <HAL_RCC_OscConfig+0x58>
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 810c 	beq.w	8004a00 <HAL_RCC_OscConfig+0x254>
 80047e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047ec:	f000 8182 	beq.w	8004af4 <HAL_RCC_OscConfig+0x348>
 80047f0:	4b8e      	ldr	r3, [pc, #568]	; (8004a2c <HAL_RCC_OscConfig+0x280>)
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80047f8:	601a      	str	r2, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004800:	601a      	str	r2, [r3, #0]
 8004802:	e004      	b.n	800480e <HAL_RCC_OscConfig+0x62>
 8004804:	4a89      	ldr	r2, [pc, #548]	; (8004a2c <HAL_RCC_OscConfig+0x280>)
 8004806:	6813      	ldr	r3, [r2, #0]
 8004808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800480c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800480e:	f7fd fedf 	bl	80025d0 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004812:	4e86      	ldr	r6, [pc, #536]	; (8004a2c <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 8004814:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004816:	e005      	b.n	8004824 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004818:	f7fd feda 	bl	80025d0 <HAL_GetTick>
 800481c:	1b40      	subs	r0, r0, r5
 800481e:	2864      	cmp	r0, #100	; 0x64
 8004820:	f200 80ea 	bhi.w	80049f8 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004824:	6833      	ldr	r3, [r6, #0]
 8004826:	039a      	lsls	r2, r3, #14
 8004828:	d5f6      	bpl.n	8004818 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800482a:	6823      	ldr	r3, [r4, #0]
 800482c:	079f      	lsls	r7, r3, #30
 800482e:	d528      	bpl.n	8004882 <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004830:	4a7e      	ldr	r2, [pc, #504]	; (8004a2c <HAL_RCC_OscConfig+0x280>)
 8004832:	6851      	ldr	r1, [r2, #4]
 8004834:	f011 0f0c 	tst.w	r1, #12
 8004838:	f000 808d 	beq.w	8004956 <HAL_RCC_OscConfig+0x1aa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800483c:	6851      	ldr	r1, [r2, #4]
 800483e:	f001 010c 	and.w	r1, r1, #12
 8004842:	2908      	cmp	r1, #8
 8004844:	f000 8083 	beq.w	800494e <HAL_RCC_OscConfig+0x1a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004848:	6923      	ldr	r3, [r4, #16]
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 8118 	beq.w	8004a80 <HAL_RCC_OscConfig+0x2d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004850:	2201      	movs	r2, #1
 8004852:	4b77      	ldr	r3, [pc, #476]	; (8004a30 <HAL_RCC_OscConfig+0x284>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004854:	4e75      	ldr	r6, [pc, #468]	; (8004a2c <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_ENABLE();
 8004856:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004858:	f7fd feba 	bl	80025d0 <HAL_GetTick>
 800485c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800485e:	e005      	b.n	800486c <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004860:	f7fd feb6 	bl	80025d0 <HAL_GetTick>
 8004864:	1b40      	subs	r0, r0, r5
 8004866:	2802      	cmp	r0, #2
 8004868:	f200 80c6 	bhi.w	80049f8 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800486c:	6833      	ldr	r3, [r6, #0]
 800486e:	0798      	lsls	r0, r3, #30
 8004870:	d5f6      	bpl.n	8004860 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004872:	6833      	ldr	r3, [r6, #0]
 8004874:	6962      	ldr	r2, [r4, #20]
 8004876:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800487a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800487e:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004880:	6823      	ldr	r3, [r4, #0]
 8004882:	071a      	lsls	r2, r3, #28
 8004884:	d41f      	bmi.n	80048c6 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004886:	075d      	lsls	r5, r3, #29
 8004888:	d542      	bpl.n	8004910 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800488a:	4b68      	ldr	r3, [pc, #416]	; (8004a2c <HAL_RCC_OscConfig+0x280>)
 800488c:	69da      	ldr	r2, [r3, #28]
 800488e:	00d0      	lsls	r0, r2, #3
 8004890:	d57d      	bpl.n	800498e <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 8004892:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004894:	4e67      	ldr	r6, [pc, #412]	; (8004a34 <HAL_RCC_OscConfig+0x288>)
 8004896:	6833      	ldr	r3, [r6, #0]
 8004898:	05d9      	lsls	r1, r3, #23
 800489a:	f140 809d 	bpl.w	80049d8 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800489e:	68e3      	ldr	r3, [r4, #12]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	f000 80fe 	beq.w	8004aa2 <HAL_RCC_OscConfig+0x2f6>
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f000 80ca 	beq.w	8004a40 <HAL_RCC_OscConfig+0x294>
 80048ac:	2b05      	cmp	r3, #5
 80048ae:	4b5f      	ldr	r3, [pc, #380]	; (8004a2c <HAL_RCC_OscConfig+0x280>)
 80048b0:	6a1a      	ldr	r2, [r3, #32]
 80048b2:	f000 812c 	beq.w	8004b0e <HAL_RCC_OscConfig+0x362>
 80048b6:	f022 0201 	bic.w	r2, r2, #1
 80048ba:	621a      	str	r2, [r3, #32]
 80048bc:	6a1a      	ldr	r2, [r3, #32]
 80048be:	f022 0204 	bic.w	r2, r2, #4
 80048c2:	621a      	str	r2, [r3, #32]
 80048c4:	e0f2      	b.n	8004aac <HAL_RCC_OscConfig+0x300>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048c6:	69a3      	ldr	r3, [r4, #24]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d04f      	beq.n	800496c <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_LSI_ENABLE();
 80048cc:	2201      	movs	r2, #1
 80048ce:	4b58      	ldr	r3, [pc, #352]	; (8004a30 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048d0:	4e56      	ldr	r6, [pc, #344]	; (8004a2c <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_ENABLE();
 80048d2:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80048d6:	f7fd fe7b 	bl	80025d0 <HAL_GetTick>
 80048da:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048dc:	e005      	b.n	80048ea <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048de:	f7fd fe77 	bl	80025d0 <HAL_GetTick>
 80048e2:	1b40      	subs	r0, r0, r5
 80048e4:	2802      	cmp	r0, #2
 80048e6:	f200 8087 	bhi.w	80049f8 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ea:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80048ec:	079b      	lsls	r3, r3, #30
 80048ee:	d5f6      	bpl.n	80048de <HAL_RCC_OscConfig+0x132>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80048f0:	4b51      	ldr	r3, [pc, #324]	; (8004a38 <HAL_RCC_OscConfig+0x28c>)
 80048f2:	4a52      	ldr	r2, [pc, #328]	; (8004a3c <HAL_RCC_OscConfig+0x290>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	fba2 2303 	umull	r2, r3, r2, r3
 80048fa:	0a5b      	lsrs	r3, r3, #9
 80048fc:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80048fe:	bf00      	nop
  }
  while (Delay --);
 8004900:	9b01      	ldr	r3, [sp, #4]
 8004902:	1e5a      	subs	r2, r3, #1
 8004904:	9201      	str	r2, [sp, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1f9      	bne.n	80048fe <HAL_RCC_OscConfig+0x152>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800490a:	6823      	ldr	r3, [r4, #0]
 800490c:	075d      	lsls	r5, r3, #29
 800490e:	d4bc      	bmi.n	800488a <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004910:	69e0      	ldr	r0, [r4, #28]
 8004912:	b1c0      	cbz	r0, 8004946 <HAL_RCC_OscConfig+0x19a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004914:	4d45      	ldr	r5, [pc, #276]	; (8004a2c <HAL_RCC_OscConfig+0x280>)
 8004916:	686b      	ldr	r3, [r5, #4]
 8004918:	f003 030c 	and.w	r3, r3, #12
 800491c:	2b08      	cmp	r3, #8
 800491e:	f000 80d8 	beq.w	8004ad2 <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 8004922:	2200      	movs	r2, #0
 8004924:	4b42      	ldr	r3, [pc, #264]	; (8004a30 <HAL_RCC_OscConfig+0x284>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004926:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004928:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800492a:	f000 80fa 	beq.w	8004b22 <HAL_RCC_OscConfig+0x376>
        tickstart = HAL_GetTick();
 800492e:	f7fd fe4f 	bl	80025d0 <HAL_GetTick>
 8004932:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004934:	e004      	b.n	8004940 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004936:	f7fd fe4b 	bl	80025d0 <HAL_GetTick>
 800493a:	1b00      	subs	r0, r0, r4
 800493c:	2802      	cmp	r0, #2
 800493e:	d85b      	bhi.n	80049f8 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004940:	682b      	ldr	r3, [r5, #0]
 8004942:	019b      	lsls	r3, r3, #6
 8004944:	d4f7      	bmi.n	8004936 <HAL_RCC_OscConfig+0x18a>
  return HAL_OK;
 8004946:	2000      	movs	r0, #0
}
 8004948:	b002      	add	sp, #8
 800494a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800494e:	6852      	ldr	r2, [r2, #4]
 8004950:	03d6      	lsls	r6, r2, #15
 8004952:	f53f af79 	bmi.w	8004848 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004956:	4a35      	ldr	r2, [pc, #212]	; (8004a2c <HAL_RCC_OscConfig+0x280>)
 8004958:	6812      	ldr	r2, [r2, #0]
 800495a:	0795      	lsls	r5, r2, #30
 800495c:	d530      	bpl.n	80049c0 <HAL_RCC_OscConfig+0x214>
 800495e:	6922      	ldr	r2, [r4, #16]
 8004960:	2a01      	cmp	r2, #1
 8004962:	d02d      	beq.n	80049c0 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 8004964:	2001      	movs	r0, #1
}
 8004966:	b002      	add	sp, #8
 8004968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 800496c:	4a30      	ldr	r2, [pc, #192]	; (8004a30 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800496e:	4e2f      	ldr	r6, [pc, #188]	; (8004a2c <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_DISABLE();
 8004970:	f8c2 3480 	str.w	r3, [r2, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8004974:	f7fd fe2c 	bl	80025d0 <HAL_GetTick>
 8004978:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800497a:	e004      	b.n	8004986 <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800497c:	f7fd fe28 	bl	80025d0 <HAL_GetTick>
 8004980:	1b40      	subs	r0, r0, r5
 8004982:	2802      	cmp	r0, #2
 8004984:	d838      	bhi.n	80049f8 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004986:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004988:	079f      	lsls	r7, r3, #30
 800498a:	d4f7      	bmi.n	800497c <HAL_RCC_OscConfig+0x1d0>
 800498c:	e7bd      	b.n	800490a <HAL_RCC_OscConfig+0x15e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800498e:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8004990:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004992:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004996:	61da      	str	r2, [r3, #28]
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800499e:	9300      	str	r3, [sp, #0]
 80049a0:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 80049a2:	e777      	b.n	8004894 <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80049a4:	684a      	ldr	r2, [r1, #4]
 80049a6:	03d0      	lsls	r0, r2, #15
 80049a8:	f57f af17 	bpl.w	80047da <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049ac:	4a1f      	ldr	r2, [pc, #124]	; (8004a2c <HAL_RCC_OscConfig+0x280>)
 80049ae:	6812      	ldr	r2, [r2, #0]
 80049b0:	0391      	lsls	r1, r2, #14
 80049b2:	f57f af3b 	bpl.w	800482c <HAL_RCC_OscConfig+0x80>
 80049b6:	6862      	ldr	r2, [r4, #4]
 80049b8:	2a00      	cmp	r2, #0
 80049ba:	f47f af37 	bne.w	800482c <HAL_RCC_OscConfig+0x80>
 80049be:	e7d1      	b.n	8004964 <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049c0:	491a      	ldr	r1, [pc, #104]	; (8004a2c <HAL_RCC_OscConfig+0x280>)
 80049c2:	6960      	ldr	r0, [r4, #20]
 80049c4:	680a      	ldr	r2, [r1, #0]
 80049c6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80049ca:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80049ce:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049d0:	071a      	lsls	r2, r3, #28
 80049d2:	f57f af58 	bpl.w	8004886 <HAL_RCC_OscConfig+0xda>
 80049d6:	e776      	b.n	80048c6 <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049d8:	6833      	ldr	r3, [r6, #0]
 80049da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049de:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80049e0:	f7fd fdf6 	bl	80025d0 <HAL_GetTick>
 80049e4:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049e6:	6833      	ldr	r3, [r6, #0]
 80049e8:	05da      	lsls	r2, r3, #23
 80049ea:	f53f af58 	bmi.w	800489e <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ee:	f7fd fdef 	bl	80025d0 <HAL_GetTick>
 80049f2:	1bc0      	subs	r0, r0, r7
 80049f4:	2864      	cmp	r0, #100	; 0x64
 80049f6:	d9f6      	bls.n	80049e6 <HAL_RCC_OscConfig+0x23a>
            return HAL_TIMEOUT;
 80049f8:	2003      	movs	r0, #3
}
 80049fa:	b002      	add	sp, #8
 80049fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a00:	4d0a      	ldr	r5, [pc, #40]	; (8004a2c <HAL_RCC_OscConfig+0x280>)
 8004a02:	682b      	ldr	r3, [r5, #0]
 8004a04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a08:	602b      	str	r3, [r5, #0]
 8004a0a:	682b      	ldr	r3, [r5, #0]
 8004a0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a10:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004a12:	f7fd fddd 	bl	80025d0 <HAL_GetTick>
 8004a16:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a18:	e004      	b.n	8004a24 <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a1a:	f7fd fdd9 	bl	80025d0 <HAL_GetTick>
 8004a1e:	1b80      	subs	r0, r0, r6
 8004a20:	2864      	cmp	r0, #100	; 0x64
 8004a22:	d8e9      	bhi.n	80049f8 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a24:	682b      	ldr	r3, [r5, #0]
 8004a26:	039b      	lsls	r3, r3, #14
 8004a28:	d4f7      	bmi.n	8004a1a <HAL_RCC_OscConfig+0x26e>
 8004a2a:	e6fe      	b.n	800482a <HAL_RCC_OscConfig+0x7e>
 8004a2c:	40021000 	.word	0x40021000
 8004a30:	42420000 	.word	0x42420000
 8004a34:	40007000 	.word	0x40007000
 8004a38:	20000010 	.word	0x20000010
 8004a3c:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a40:	4e50      	ldr	r6, [pc, #320]	; (8004b84 <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a42:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a46:	6a33      	ldr	r3, [r6, #32]
 8004a48:	f023 0301 	bic.w	r3, r3, #1
 8004a4c:	6233      	str	r3, [r6, #32]
 8004a4e:	6a33      	ldr	r3, [r6, #32]
 8004a50:	f023 0304 	bic.w	r3, r3, #4
 8004a54:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8004a56:	f7fd fdbb 	bl	80025d0 <HAL_GetTick>
 8004a5a:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a5c:	e004      	b.n	8004a68 <HAL_RCC_OscConfig+0x2bc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a5e:	f7fd fdb7 	bl	80025d0 <HAL_GetTick>
 8004a62:	1bc0      	subs	r0, r0, r7
 8004a64:	4540      	cmp	r0, r8
 8004a66:	d8c7      	bhi.n	80049f8 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a68:	6a33      	ldr	r3, [r6, #32]
 8004a6a:	0798      	lsls	r0, r3, #30
 8004a6c:	d4f7      	bmi.n	8004a5e <HAL_RCC_OscConfig+0x2b2>
    if (pwrclkchanged == SET)
 8004a6e:	2d00      	cmp	r5, #0
 8004a70:	f43f af4e 	beq.w	8004910 <HAL_RCC_OscConfig+0x164>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a74:	4a43      	ldr	r2, [pc, #268]	; (8004b84 <HAL_RCC_OscConfig+0x3d8>)
 8004a76:	69d3      	ldr	r3, [r2, #28]
 8004a78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a7c:	61d3      	str	r3, [r2, #28]
 8004a7e:	e747      	b.n	8004910 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8004a80:	4a41      	ldr	r2, [pc, #260]	; (8004b88 <HAL_RCC_OscConfig+0x3dc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a82:	4e40      	ldr	r6, [pc, #256]	; (8004b84 <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_HSI_DISABLE();
 8004a84:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004a86:	f7fd fda3 	bl	80025d0 <HAL_GetTick>
 8004a8a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a8c:	e004      	b.n	8004a98 <HAL_RCC_OscConfig+0x2ec>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a8e:	f7fd fd9f 	bl	80025d0 <HAL_GetTick>
 8004a92:	1b40      	subs	r0, r0, r5
 8004a94:	2802      	cmp	r0, #2
 8004a96:	d8af      	bhi.n	80049f8 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a98:	6833      	ldr	r3, [r6, #0]
 8004a9a:	0799      	lsls	r1, r3, #30
 8004a9c:	d4f7      	bmi.n	8004a8e <HAL_RCC_OscConfig+0x2e2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a9e:	6823      	ldr	r3, [r4, #0]
 8004aa0:	e6ef      	b.n	8004882 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004aa2:	4a38      	ldr	r2, [pc, #224]	; (8004b84 <HAL_RCC_OscConfig+0x3d8>)
 8004aa4:	6a13      	ldr	r3, [r2, #32]
 8004aa6:	f043 0301 	orr.w	r3, r3, #1
 8004aaa:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8004aac:	f7fd fd90 	bl	80025d0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ab0:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004ab4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ab6:	4f33      	ldr	r7, [pc, #204]	; (8004b84 <HAL_RCC_OscConfig+0x3d8>)
 8004ab8:	e004      	b.n	8004ac4 <HAL_RCC_OscConfig+0x318>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aba:	f7fd fd89 	bl	80025d0 <HAL_GetTick>
 8004abe:	1b80      	subs	r0, r0, r6
 8004ac0:	4540      	cmp	r0, r8
 8004ac2:	d899      	bhi.n	80049f8 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac4:	6a3b      	ldr	r3, [r7, #32]
 8004ac6:	079b      	lsls	r3, r3, #30
 8004ac8:	d5f7      	bpl.n	8004aba <HAL_RCC_OscConfig+0x30e>
    if (pwrclkchanged == SET)
 8004aca:	2d00      	cmp	r5, #0
 8004acc:	f43f af20 	beq.w	8004910 <HAL_RCC_OscConfig+0x164>
 8004ad0:	e7d0      	b.n	8004a74 <HAL_RCC_OscConfig+0x2c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ad2:	2801      	cmp	r0, #1
 8004ad4:	f43f af38 	beq.w	8004948 <HAL_RCC_OscConfig+0x19c>
        pll_config = RCC->CFGR;
 8004ad8:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ada:	6a22      	ldr	r2, [r4, #32]
 8004adc:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8004ae0:	4291      	cmp	r1, r2
 8004ae2:	f47f af3f 	bne.w	8004964 <HAL_RCC_OscConfig+0x1b8>
 8004ae6:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004ae8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 8004aec:	1a18      	subs	r0, r3, r0
 8004aee:	bf18      	it	ne
 8004af0:	2001      	movne	r0, #1
 8004af2:	e729      	b.n	8004948 <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004af4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004af8:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004b0a:	601a      	str	r2, [r3, #0]
 8004b0c:	e67f      	b.n	800480e <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b0e:	f042 0204 	orr.w	r2, r2, #4
 8004b12:	621a      	str	r2, [r3, #32]
 8004b14:	6a1a      	ldr	r2, [r3, #32]
 8004b16:	f042 0201 	orr.w	r2, r2, #1
 8004b1a:	621a      	str	r2, [r3, #32]
 8004b1c:	e7c6      	b.n	8004aac <HAL_RCC_OscConfig+0x300>
    return HAL_ERROR;
 8004b1e:	2001      	movs	r0, #1
}
 8004b20:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8004b22:	f7fd fd55 	bl	80025d0 <HAL_GetTick>
 8004b26:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b28:	e005      	b.n	8004b36 <HAL_RCC_OscConfig+0x38a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b2a:	f7fd fd51 	bl	80025d0 <HAL_GetTick>
 8004b2e:	1b80      	subs	r0, r0, r6
 8004b30:	2802      	cmp	r0, #2
 8004b32:	f63f af61 	bhi.w	80049f8 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b36:	682b      	ldr	r3, [r5, #0]
 8004b38:	0199      	lsls	r1, r3, #6
 8004b3a:	d4f6      	bmi.n	8004b2a <HAL_RCC_OscConfig+0x37e>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004b3c:	6a23      	ldr	r3, [r4, #32]
 8004b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b42:	d105      	bne.n	8004b50 <HAL_RCC_OscConfig+0x3a4>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b44:	686a      	ldr	r2, [r5, #4]
 8004b46:	68a1      	ldr	r1, [r4, #8]
 8004b48:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004b50:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b52:	4d0c      	ldr	r5, [pc, #48]	; (8004b84 <HAL_RCC_OscConfig+0x3d8>)
 8004b54:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004b56:	686a      	ldr	r2, [r5, #4]
 8004b58:	430b      	orrs	r3, r1
 8004b5a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8004b5e:	490a      	ldr	r1, [pc, #40]	; (8004b88 <HAL_RCC_OscConfig+0x3dc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b60:	4313      	orrs	r3, r2
 8004b62:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004b64:	6608      	str	r0, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8004b66:	f7fd fd33 	bl	80025d0 <HAL_GetTick>
 8004b6a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b6c:	e005      	b.n	8004b7a <HAL_RCC_OscConfig+0x3ce>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b6e:	f7fd fd2f 	bl	80025d0 <HAL_GetTick>
 8004b72:	1b00      	subs	r0, r0, r4
 8004b74:	2802      	cmp	r0, #2
 8004b76:	f63f af3f 	bhi.w	80049f8 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b7a:	682b      	ldr	r3, [r5, #0]
 8004b7c:	019a      	lsls	r2, r3, #6
 8004b7e:	d5f6      	bpl.n	8004b6e <HAL_RCC_OscConfig+0x3c2>
 8004b80:	e6e1      	b.n	8004946 <HAL_RCC_OscConfig+0x19a>
 8004b82:	bf00      	nop
 8004b84:	40021000 	.word	0x40021000
 8004b88:	42420000 	.word	0x42420000

08004b8c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004b8c:	2800      	cmp	r0, #0
 8004b8e:	f000 80b1 	beq.w	8004cf4 <HAL_RCC_ClockConfig+0x168>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b92:	4a5e      	ldr	r2, [pc, #376]	; (8004d0c <HAL_RCC_ClockConfig+0x180>)
{
 8004b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b98:	6813      	ldr	r3, [r2, #0]
 8004b9a:	4604      	mov	r4, r0
 8004b9c:	f003 0307 	and.w	r3, r3, #7
 8004ba0:	428b      	cmp	r3, r1
 8004ba2:	460d      	mov	r5, r1
{
 8004ba4:	b086      	sub	sp, #24
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ba6:	d20d      	bcs.n	8004bc4 <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ba8:	6813      	ldr	r3, [r2, #0]
 8004baa:	f023 0307 	bic.w	r3, r3, #7
 8004bae:	430b      	orrs	r3, r1
 8004bb0:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bb2:	6813      	ldr	r3, [r2, #0]
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	428b      	cmp	r3, r1
 8004bba:	d003      	beq.n	8004bc4 <HAL_RCC_ClockConfig+0x38>
    return HAL_ERROR;
 8004bbc:	2001      	movs	r0, #1
}
 8004bbe:	b006      	add	sp, #24
 8004bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bc4:	6823      	ldr	r3, [r4, #0]
 8004bc6:	079e      	lsls	r6, r3, #30
 8004bc8:	d514      	bpl.n	8004bf4 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bca:	0758      	lsls	r0, r3, #29
 8004bcc:	d504      	bpl.n	8004bd8 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bce:	4950      	ldr	r1, [pc, #320]	; (8004d10 <HAL_RCC_ClockConfig+0x184>)
 8004bd0:	684a      	ldr	r2, [r1, #4]
 8004bd2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004bd6:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bd8:	0719      	lsls	r1, r3, #28
 8004bda:	d504      	bpl.n	8004be6 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bdc:	494c      	ldr	r1, [pc, #304]	; (8004d10 <HAL_RCC_ClockConfig+0x184>)
 8004bde:	684a      	ldr	r2, [r1, #4]
 8004be0:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8004be4:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004be6:	494a      	ldr	r1, [pc, #296]	; (8004d10 <HAL_RCC_ClockConfig+0x184>)
 8004be8:	68a0      	ldr	r0, [r4, #8]
 8004bea:	684a      	ldr	r2, [r1, #4]
 8004bec:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004bf0:	4302      	orrs	r2, r0
 8004bf2:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bf4:	07da      	lsls	r2, r3, #31
 8004bf6:	d520      	bpl.n	8004c3a <HAL_RCC_ClockConfig+0xae>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bf8:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bfa:	4b45      	ldr	r3, [pc, #276]	; (8004d10 <HAL_RCC_ClockConfig+0x184>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bfc:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bfe:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c00:	d07a      	beq.n	8004cf8 <HAL_RCC_ClockConfig+0x16c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c02:	2a02      	cmp	r2, #2
 8004c04:	d073      	beq.n	8004cee <HAL_RCC_ClockConfig+0x162>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c06:	079e      	lsls	r6, r3, #30
 8004c08:	d5d8      	bpl.n	8004bbc <HAL_RCC_ClockConfig+0x30>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c0a:	4e41      	ldr	r6, [pc, #260]	; (8004d10 <HAL_RCC_ClockConfig+0x184>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c0c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c10:	6873      	ldr	r3, [r6, #4]
 8004c12:	f023 0303 	bic.w	r3, r3, #3
 8004c16:	4313      	orrs	r3, r2
 8004c18:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8004c1a:	f7fd fcd9 	bl	80025d0 <HAL_GetTick>
 8004c1e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c20:	e004      	b.n	8004c2c <HAL_RCC_ClockConfig+0xa0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c22:	f7fd fcd5 	bl	80025d0 <HAL_GetTick>
 8004c26:	1bc0      	subs	r0, r0, r7
 8004c28:	4540      	cmp	r0, r8
 8004c2a:	d868      	bhi.n	8004cfe <HAL_RCC_ClockConfig+0x172>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c2c:	6873      	ldr	r3, [r6, #4]
 8004c2e:	6862      	ldr	r2, [r4, #4]
 8004c30:	f003 030c 	and.w	r3, r3, #12
 8004c34:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004c38:	d1f3      	bne.n	8004c22 <HAL_RCC_ClockConfig+0x96>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c3a:	4a34      	ldr	r2, [pc, #208]	; (8004d0c <HAL_RCC_ClockConfig+0x180>)
 8004c3c:	6813      	ldr	r3, [r2, #0]
 8004c3e:	f003 0307 	and.w	r3, r3, #7
 8004c42:	42ab      	cmp	r3, r5
 8004c44:	d909      	bls.n	8004c5a <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c46:	6813      	ldr	r3, [r2, #0]
 8004c48:	f023 0307 	bic.w	r3, r3, #7
 8004c4c:	432b      	orrs	r3, r5
 8004c4e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c50:	6813      	ldr	r3, [r2, #0]
 8004c52:	f003 0307 	and.w	r3, r3, #7
 8004c56:	42ab      	cmp	r3, r5
 8004c58:	d1b0      	bne.n	8004bbc <HAL_RCC_ClockConfig+0x30>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c5a:	6823      	ldr	r3, [r4, #0]
 8004c5c:	0758      	lsls	r0, r3, #29
 8004c5e:	d506      	bpl.n	8004c6e <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c60:	492b      	ldr	r1, [pc, #172]	; (8004d10 <HAL_RCC_ClockConfig+0x184>)
 8004c62:	68e0      	ldr	r0, [r4, #12]
 8004c64:	684a      	ldr	r2, [r1, #4]
 8004c66:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c6a:	4302      	orrs	r2, r0
 8004c6c:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c6e:	0719      	lsls	r1, r3, #28
 8004c70:	d507      	bpl.n	8004c82 <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c72:	4a27      	ldr	r2, [pc, #156]	; (8004d10 <HAL_RCC_ClockConfig+0x184>)
 8004c74:	6921      	ldr	r1, [r4, #16]
 8004c76:	6853      	ldr	r3, [r2, #4]
 8004c78:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004c7c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004c80:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004c82:	f240 2401 	movw	r4, #513	; 0x201
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004c86:	4b23      	ldr	r3, [pc, #140]	; (8004d14 <HAL_RCC_ClockConfig+0x188>)
 8004c88:	ad06      	add	r5, sp, #24
 8004c8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c8c:	e905 000f 	stmdb	r5, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8004c90:	491f      	ldr	r1, [pc, #124]	; (8004d10 <HAL_RCC_ClockConfig+0x184>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004c92:	f8ad 4004 	strh.w	r4, [sp, #4]
  tmpreg = RCC->CFGR;
 8004c96:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004c98:	f002 030c 	and.w	r3, r2, #12
 8004c9c:	2b08      	cmp	r3, #8
 8004c9e:	d011      	beq.n	8004cc4 <HAL_RCC_ClockConfig+0x138>
      sysclockfreq = HSE_VALUE;
 8004ca0:	4b1d      	ldr	r3, [pc, #116]	; (8004d18 <HAL_RCC_ClockConfig+0x18c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ca2:	4a1b      	ldr	r2, [pc, #108]	; (8004d10 <HAL_RCC_ClockConfig+0x184>)
 8004ca4:	481d      	ldr	r0, [pc, #116]	; (8004d1c <HAL_RCC_ClockConfig+0x190>)
 8004ca6:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8004ca8:	491d      	ldr	r1, [pc, #116]	; (8004d20 <HAL_RCC_ClockConfig+0x194>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004caa:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004cae:	5c80      	ldrb	r0, [r0, r2]
 8004cb0:	4a1c      	ldr	r2, [pc, #112]	; (8004d24 <HAL_RCC_ClockConfig+0x198>)
 8004cb2:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 8004cb4:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004cb6:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8004cb8:	f7fd fc48 	bl	800254c <HAL_InitTick>
  return HAL_OK;
 8004cbc:	2000      	movs	r0, #0
}
 8004cbe:	b006      	add	sp, #24
 8004cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004cc4:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8004cc8:	3318      	adds	r3, #24
 8004cca:	446b      	add	r3, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ccc:	03d2      	lsls	r2, r2, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004cce:	f813 3c10 	ldrb.w	r3, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004cd2:	d516      	bpl.n	8004d02 <HAL_RCC_ClockConfig+0x176>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004cd4:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004cd6:	4910      	ldr	r1, [pc, #64]	; (8004d18 <HAL_RCC_ClockConfig+0x18c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004cd8:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004cdc:	fb01 f303 	mul.w	r3, r1, r3
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ce0:	3218      	adds	r2, #24
 8004ce2:	446a      	add	r2, sp
 8004ce4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004ce8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cec:	e7d9      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cee:	019f      	lsls	r7, r3, #6
 8004cf0:	d48b      	bmi.n	8004c0a <HAL_RCC_ClockConfig+0x7e>
 8004cf2:	e763      	b.n	8004bbc <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 8004cf4:	2001      	movs	r0, #1
}
 8004cf6:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cf8:	039b      	lsls	r3, r3, #14
 8004cfa:	d486      	bmi.n	8004c0a <HAL_RCC_ClockConfig+0x7e>
 8004cfc:	e75e      	b.n	8004bbc <HAL_RCC_ClockConfig+0x30>
        return HAL_TIMEOUT;
 8004cfe:	2003      	movs	r0, #3
 8004d00:	e75d      	b.n	8004bbe <HAL_RCC_ClockConfig+0x32>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d02:	4a09      	ldr	r2, [pc, #36]	; (8004d28 <HAL_RCC_ClockConfig+0x19c>)
 8004d04:	fb02 f303 	mul.w	r3, r2, r3
 8004d08:	e7cb      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x116>
 8004d0a:	bf00      	nop
 8004d0c:	40022000 	.word	0x40022000
 8004d10:	40021000 	.word	0x40021000
 8004d14:	08009ee0 	.word	0x08009ee0
 8004d18:	007a1200 	.word	0x007a1200
 8004d1c:	08009ec8 	.word	0x08009ec8
 8004d20:	20000018 	.word	0x20000018
 8004d24:	20000010 	.word	0x20000010
 8004d28:	003d0900 	.word	0x003d0900

08004d2c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d2c:	4b04      	ldr	r3, [pc, #16]	; (8004d40 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8004d2e:	4a05      	ldr	r2, [pc, #20]	; (8004d44 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	4905      	ldr	r1, [pc, #20]	; (8004d48 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004d34:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004d38:	5ccb      	ldrb	r3, [r1, r3]
 8004d3a:	6810      	ldr	r0, [r2, #0]
}
 8004d3c:	40d8      	lsrs	r0, r3
 8004d3e:	4770      	bx	lr
 8004d40:	40021000 	.word	0x40021000
 8004d44:	20000010 	.word	0x20000010
 8004d48:	08009ed8 	.word	0x08009ed8

08004d4c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d4c:	4b04      	ldr	r3, [pc, #16]	; (8004d60 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8004d4e:	4a05      	ldr	r2, [pc, #20]	; (8004d64 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	4905      	ldr	r1, [pc, #20]	; (8004d68 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004d54:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004d58:	5ccb      	ldrb	r3, [r1, r3]
 8004d5a:	6810      	ldr	r0, [r2, #0]
}
 8004d5c:	40d8      	lsrs	r0, r3
 8004d5e:	4770      	bx	lr
 8004d60:	40021000 	.word	0x40021000
 8004d64:	20000010 	.word	0x20000010
 8004d68:	08009ed8 	.word	0x08009ed8

08004d6c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d70:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004d72:	6800      	ldr	r0, [r0, #0]
{
 8004d74:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004d76:	07c1      	lsls	r1, r0, #31
 8004d78:	d52c      	bpl.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x68>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d7a:	4b3a      	ldr	r3, [pc, #232]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004d7c:	69da      	ldr	r2, [r3, #28]
 8004d7e:	00d2      	lsls	r2, r2, #3
 8004d80:	d53f      	bpl.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d82:	4d39      	ldr	r5, [pc, #228]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    FlagStatus pwrclkchanged = RESET;
 8004d84:	2600      	movs	r6, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d86:	682b      	ldr	r3, [r5, #0]
 8004d88:	05df      	lsls	r7, r3, #23
 8004d8a:	d548      	bpl.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d8c:	4d35      	ldr	r5, [pc, #212]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004d8e:	6a2b      	ldr	r3, [r5, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d90:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004d94:	d011      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004d96:	6861      	ldr	r1, [r4, #4]
 8004d98:	f401 7240 	and.w	r2, r1, #768	; 0x300
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d00d      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004da0:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004da2:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004da4:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8004da6:	4a31      	ldr	r2, [pc, #196]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004da8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dac:	f8c2 7440 	str.w	r7, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004db0:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004db4:	6229      	str	r1, [r5, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004db6:	07d9      	lsls	r1, r3, #31
 8004db8:	d444      	bmi.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dba:	6861      	ldr	r1, [r4, #4]
 8004dbc:	4a29      	ldr	r2, [pc, #164]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004dbe:	6a13      	ldr	r3, [r2, #32]
 8004dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dc4:	430b      	orrs	r3, r1
 8004dc6:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004dc8:	b11e      	cbz	r6, 8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dca:	69d3      	ldr	r3, [r2, #28]
 8004dcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dd0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004dd2:	6820      	ldr	r0, [r4, #0]
 8004dd4:	0783      	lsls	r3, r0, #30
 8004dd6:	d506      	bpl.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004dd8:	4922      	ldr	r1, [pc, #136]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004dda:	68a3      	ldr	r3, [r4, #8]
 8004ddc:	684a      	ldr	r2, [r1, #4]
 8004dde:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004de2:	431a      	orrs	r2, r3
 8004de4:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004de6:	f010 0010 	ands.w	r0, r0, #16
 8004dea:	d007      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x90>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004dec:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004dee:	4a1d      	ldr	r2, [pc, #116]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004df0:	68e1      	ldr	r1, [r4, #12]
 8004df2:	6853      	ldr	r3, [r2, #4]
 8004df4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004df8:	430b      	orrs	r3, r1
 8004dfa:	6053      	str	r3, [r2, #4]
}
 8004dfc:	b002      	add	sp, #8
 8004dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e02:	69da      	ldr	r2, [r3, #28]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e04:	4d18      	ldr	r5, [pc, #96]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e06:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004e0a:	61da      	str	r2, [r3, #28]
 8004e0c:	69db      	ldr	r3, [r3, #28]
      pwrclkchanged = SET;
 8004e0e:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e14:	9301      	str	r3, [sp, #4]
 8004e16:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e18:	682b      	ldr	r3, [r5, #0]
 8004e1a:	05df      	lsls	r7, r3, #23
 8004e1c:	d4b6      	bmi.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e1e:	682b      	ldr	r3, [r5, #0]
 8004e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e24:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004e26:	f7fd fbd3 	bl	80025d0 <HAL_GetTick>
 8004e2a:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e2c:	682b      	ldr	r3, [r5, #0]
 8004e2e:	05d8      	lsls	r0, r3, #23
 8004e30:	d4ac      	bmi.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e32:	f7fd fbcd 	bl	80025d0 <HAL_GetTick>
 8004e36:	1bc3      	subs	r3, r0, r7
 8004e38:	2b64      	cmp	r3, #100	; 0x64
 8004e3a:	d9f7      	bls.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8004e3c:	2003      	movs	r0, #3
}
 8004e3e:	b002      	add	sp, #8
 8004e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tickstart = HAL_GetTick();
 8004e44:	f7fd fbc4 	bl	80025d0 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e48:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004e4c:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e4e:	e004      	b.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0xee>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e50:	f7fd fbbe 	bl	80025d0 <HAL_GetTick>
 8004e54:	1bc0      	subs	r0, r0, r7
 8004e56:	4540      	cmp	r0, r8
 8004e58:	d8f0      	bhi.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0xd0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e5a:	6a2b      	ldr	r3, [r5, #32]
 8004e5c:	079a      	lsls	r2, r3, #30
 8004e5e:	d5f7      	bpl.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8004e60:	e7ab      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004e62:	bf00      	nop
 8004e64:	40021000 	.word	0x40021000
 8004e68:	40007000 	.word	0x40007000
 8004e6c:	42420000 	.word	0x42420000

08004e70 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e70:	4684      	mov	ip, r0
 8004e72:	b500      	push	{lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004e74:	4b36      	ldr	r3, [pc, #216]	; (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
{
 8004e76:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004e78:	f10d 0e18 	add.w	lr, sp, #24
 8004e7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e7e:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
{
 8004e82:	4660      	mov	r0, ip
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004e84:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004e88:	2802      	cmp	r0, #2
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004e8a:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 8004e8e:	d007      	beq.n	8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>
 8004e90:	2810      	cmp	r0, #16
 8004e92:	d02a      	beq.n	8004eea <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8004e94:	2801      	cmp	r0, #1
 8004e96:	d010      	beq.n	8004eba <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
  uint32_t temp_reg = 0U, frequency = 0U;
 8004e98:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 8004e9a:	b007      	add	sp, #28
 8004e9c:	f85d fb04 	ldr.w	pc, [sp], #4
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004ea0:	f7ff ff54 	bl	8004d4c <HAL_RCC_GetPCLK2Freq>
 8004ea4:	4b2b      	ldr	r3, [pc, #172]	; (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8004eac:	3301      	adds	r3, #1
 8004eae:	005b      	lsls	r3, r3, #1
 8004eb0:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8004eb4:	b007      	add	sp, #28
 8004eb6:	f85d fb04 	ldr.w	pc, [sp], #4
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004eba:	f240 3202 	movw	r2, #770	; 0x302
      temp_reg = RCC->BDCR;
 8004ebe:	4925      	ldr	r1, [pc, #148]	; (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8004ec0:	6a0b      	ldr	r3, [r1, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004ec2:	401a      	ands	r2, r3
 8004ec4:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 8004ec8:	d033      	beq.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ece:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ed2:	d031      	beq.n	8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004ed4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ed8:	d1de      	bne.n	8004e98 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
        frequency = HSE_VALUE / 128U;
 8004eda:	f24f 4324 	movw	r3, #62500	; 0xf424
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004ede:	6808      	ldr	r0, [r1, #0]
        frequency = HSE_VALUE / 128U;
 8004ee0:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8004ee4:	bf18      	it	ne
 8004ee6:	4618      	movne	r0, r3
 8004ee8:	e7d7      	b.n	8004e9a <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
      temp_reg = RCC->CFGR;
 8004eea:	4b1a      	ldr	r3, [pc, #104]	; (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8004eec:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004eee:	6818      	ldr	r0, [r3, #0]
 8004ef0:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8004ef4:	d0d1      	beq.n	8004e9a <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004ef6:	f3c2 4183 	ubfx	r1, r2, #18, #4
 8004efa:	3118      	adds	r1, #24
 8004efc:	4469      	add	r1, sp
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004efe:	03d2      	lsls	r2, r2, #15
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004f00:	f811 0c10 	ldrb.w	r0, [r1, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f04:	d520      	bpl.n	8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004f06:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004f08:	4a13      	ldr	r2, [pc, #76]	; (8004f58 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004f0a:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8004f0e:	3318      	adds	r3, #24
 8004f10:	446b      	add	r3, sp
 8004f12:	f813 3c14 	ldrb.w	r3, [r3, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f1a:	fb03 f000 	mul.w	r0, r3, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004f1e:	4b0d      	ldr	r3, [pc, #52]	; (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	025b      	lsls	r3, r3, #9
 8004f24:	d4b9      	bmi.n	8004e9a <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
          frequency = (pllclk * 2) / 3;
 8004f26:	4b0d      	ldr	r3, [pc, #52]	; (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 8004f28:	0040      	lsls	r0, r0, #1
 8004f2a:	fba3 3000 	umull	r3, r0, r3, r0
 8004f2e:	0840      	lsrs	r0, r0, #1
 8004f30:	e7b3      	b.n	8004e9a <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
        frequency = LSE_VALUE;
 8004f32:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004f36:	e7b0      	b.n	8004e9a <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
        frequency = LSI_VALUE;
 8004f38:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004f3c:	6a48      	ldr	r0, [r1, #36]	; 0x24
        frequency = LSI_VALUE;
 8004f3e:	f010 0002 	ands.w	r0, r0, #2
 8004f42:	bf18      	it	ne
 8004f44:	4618      	movne	r0, r3
 8004f46:	e7a8      	b.n	8004e9a <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004f48:	4b05      	ldr	r3, [pc, #20]	; (8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
 8004f4a:	fb03 f000 	mul.w	r0, r3, r0
 8004f4e:	e7e6      	b.n	8004f1e <HAL_RCCEx_GetPeriphCLKFreq+0xae>
 8004f50:	08009ee0 	.word	0x08009ee0
 8004f54:	40021000 	.word	0x40021000
 8004f58:	007a1200 	.word	0x007a1200
 8004f5c:	aaaaaaab 	.word	0xaaaaaaab
 8004f60:	003d0900 	.word	0x003d0900

08004f64 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f64:	2800      	cmp	r0, #0
 8004f66:	d066      	beq.n	8005036 <HAL_TIM_Base_Init+0xd2>
{
 8004f68:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f6a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004f6e:	4604      	mov	r4, r0
 8004f70:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d045      	beq.n	8005004 <HAL_TIM_Base_Init+0xa0>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f78:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f7a:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f7c:	492f      	ldr	r1, [pc, #188]	; (800503c <HAL_TIM_Base_Init+0xd8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004f7e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f82:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8004f84:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f86:	d042      	beq.n	800500e <HAL_TIM_Base_Init+0xaa>
 8004f88:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004f8c:	d011      	beq.n	8004fb2 <HAL_TIM_Base_Init+0x4e>
 8004f8e:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8004f92:	428a      	cmp	r2, r1
 8004f94:	d00d      	beq.n	8004fb2 <HAL_TIM_Base_Init+0x4e>
 8004f96:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004f9a:	428a      	cmp	r2, r1
 8004f9c:	d009      	beq.n	8004fb2 <HAL_TIM_Base_Init+0x4e>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f9e:	69a0      	ldr	r0, [r4, #24]
 8004fa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fa4:	4303      	orrs	r3, r0

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fa6:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 8004fa8:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004faa:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fac:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004fae:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fb0:	e010      	b.n	8004fd4 <HAL_TIM_Base_Init+0x70>
    tmpcr1 |= Structure->CounterMode;
 8004fb2:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fb8:	6920      	ldr	r0, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 8004fba:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fc0:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fc2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fc8:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fca:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8004fcc:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8004fce:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fd0:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004fd2:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fd8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fdc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004fe0:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004fe4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004fe8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ff0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ff4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004ff8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004ffc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005000:	2000      	movs	r0, #0
}
 8005002:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005004:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005008:	f7fd fa64 	bl	80024d4 <HAL_TIM_Base_MspInit>
 800500c:	e7b4      	b.n	8004f78 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 800500e:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005014:	6921      	ldr	r1, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 8005016:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800501c:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800501e:	69a1      	ldr	r1, [r4, #24]
 8005020:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005024:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8005026:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005028:	68e3      	ldr	r3, [r4, #12]
 800502a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800502c:	6863      	ldr	r3, [r4, #4]
 800502e:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005030:	6963      	ldr	r3, [r4, #20]
 8005032:	6313      	str	r3, [r2, #48]	; 0x30
 8005034:	e7ce      	b.n	8004fd4 <HAL_TIM_Base_Init+0x70>
    return HAL_ERROR;
 8005036:	2001      	movs	r0, #1
}
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	40012c00 	.word	0x40012c00

08005040 <HAL_TIM_PWM_MspInit>:
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop

08005044 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005044:	2800      	cmp	r0, #0
 8005046:	d066      	beq.n	8005116 <HAL_TIM_PWM_Init+0xd2>
{
 8005048:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800504a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800504e:	4604      	mov	r4, r0
 8005050:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005054:	2b00      	cmp	r3, #0
 8005056:	d045      	beq.n	80050e4 <HAL_TIM_PWM_Init+0xa0>
  htim->State = HAL_TIM_STATE_BUSY;
 8005058:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800505a:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800505c:	492f      	ldr	r1, [pc, #188]	; (800511c <HAL_TIM_PWM_Init+0xd8>)
  htim->State = HAL_TIM_STATE_BUSY;
 800505e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005062:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8005064:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005066:	d042      	beq.n	80050ee <HAL_TIM_PWM_Init+0xaa>
 8005068:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800506c:	d011      	beq.n	8005092 <HAL_TIM_PWM_Init+0x4e>
 800506e:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8005072:	428a      	cmp	r2, r1
 8005074:	d00d      	beq.n	8005092 <HAL_TIM_PWM_Init+0x4e>
 8005076:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800507a:	428a      	cmp	r2, r1
 800507c:	d009      	beq.n	8005092 <HAL_TIM_PWM_Init+0x4e>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800507e:	69a0      	ldr	r0, [r4, #24]
 8005080:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005084:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005086:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 8005088:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 800508a:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800508c:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800508e:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005090:	e010      	b.n	80050b4 <HAL_TIM_PWM_Init+0x70>
    tmpcr1 |= Structure->CounterMode;
 8005092:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005098:	6920      	ldr	r0, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 800509a:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800509c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050a0:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050a2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050a8:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050aa:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80050ac:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80050ae:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050b0:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80050b2:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80050b4:	2301      	movs	r3, #1
 80050b6:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050b8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050bc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80050c0:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80050c4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80050c8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050d4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80050d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80050dc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80050e0:	2000      	movs	r0, #0
}
 80050e2:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80050e4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80050e8:	f7ff ffaa 	bl	8005040 <HAL_TIM_PWM_MspInit>
 80050ec:	e7b4      	b.n	8005058 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 80050ee:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050f4:	6921      	ldr	r1, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 80050f6:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 80050f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050fc:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050fe:	69a1      	ldr	r1, [r4, #24]
 8005100:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005104:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8005106:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005108:	68e3      	ldr	r3, [r4, #12]
 800510a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800510c:	6863      	ldr	r3, [r4, #4]
 800510e:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005110:	6963      	ldr	r3, [r4, #20]
 8005112:	6313      	str	r3, [r2, #48]	; 0x30
 8005114:	e7ce      	b.n	80050b4 <HAL_TIM_PWM_Init+0x70>
    return HAL_ERROR;
 8005116:	2001      	movs	r0, #1
}
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	40012c00 	.word	0x40012c00

08005120 <HAL_TIM_PWM_Start>:
 8005120:	bb41      	cbnz	r1, 8005174 <HAL_TIM_PWM_Start+0x54>
 8005122:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8005126:	2b01      	cmp	r3, #1
 8005128:	d138      	bne.n	800519c <HAL_TIM_PWM_Start+0x7c>
 800512a:	2302      	movs	r3, #2
 800512c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8005130:	2201      	movs	r2, #1
 8005132:	6803      	ldr	r3, [r0, #0]
 8005134:	f001 011f 	and.w	r1, r1, #31
 8005138:	6a18      	ldr	r0, [r3, #32]
 800513a:	fa02 f101 	lsl.w	r1, r2, r1
 800513e:	ea20 0001 	bic.w	r0, r0, r1
 8005142:	b410      	push	{r4}
 8005144:	6218      	str	r0, [r3, #32]
 8005146:	6a1a      	ldr	r2, [r3, #32]
 8005148:	4c21      	ldr	r4, [pc, #132]	; (80051d0 <HAL_TIM_PWM_Start+0xb0>)
 800514a:	4311      	orrs	r1, r2
 800514c:	42a3      	cmp	r3, r4
 800514e:	6219      	str	r1, [r3, #32]
 8005150:	d026      	beq.n	80051a0 <HAL_TIM_PWM_Start+0x80>
 8005152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005156:	d027      	beq.n	80051a8 <HAL_TIM_PWM_Start+0x88>
 8005158:	4a1e      	ldr	r2, [pc, #120]	; (80051d4 <HAL_TIM_PWM_Start+0xb4>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d024      	beq.n	80051a8 <HAL_TIM_PWM_Start+0x88>
 800515e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005162:	4293      	cmp	r3, r2
 8005164:	d020      	beq.n	80051a8 <HAL_TIM_PWM_Start+0x88>
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	2000      	movs	r0, #0
 800516a:	f042 0201 	orr.w	r2, r2, #1
 800516e:	bc10      	pop	{r4}
 8005170:	601a      	str	r2, [r3, #0]
 8005172:	4770      	bx	lr
 8005174:	2904      	cmp	r1, #4
 8005176:	d01f      	beq.n	80051b8 <HAL_TIM_PWM_Start+0x98>
 8005178:	2908      	cmp	r1, #8
 800517a:	d00b      	beq.n	8005194 <HAL_TIM_PWM_Start+0x74>
 800517c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005180:	2b01      	cmp	r3, #1
 8005182:	d10b      	bne.n	800519c <HAL_TIM_PWM_Start+0x7c>
 8005184:	2904      	cmp	r1, #4
 8005186:	d01b      	beq.n	80051c0 <HAL_TIM_PWM_Start+0xa0>
 8005188:	2908      	cmp	r1, #8
 800518a:	d01d      	beq.n	80051c8 <HAL_TIM_PWM_Start+0xa8>
 800518c:	2302      	movs	r3, #2
 800518e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8005192:	e7cd      	b.n	8005130 <HAL_TIM_PWM_Start+0x10>
 8005194:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005198:	2b01      	cmp	r3, #1
 800519a:	d015      	beq.n	80051c8 <HAL_TIM_PWM_Start+0xa8>
 800519c:	2001      	movs	r0, #1
 800519e:	4770      	bx	lr
 80051a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051a6:	645a      	str	r2, [r3, #68]	; 0x44
 80051a8:	689a      	ldr	r2, [r3, #8]
 80051aa:	f002 0207 	and.w	r2, r2, #7
 80051ae:	2a06      	cmp	r2, #6
 80051b0:	d1d9      	bne.n	8005166 <HAL_TIM_PWM_Start+0x46>
 80051b2:	2000      	movs	r0, #0
 80051b4:	bc10      	pop	{r4}
 80051b6:	4770      	bx	lr
 80051b8:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d1ed      	bne.n	800519c <HAL_TIM_PWM_Start+0x7c>
 80051c0:	2302      	movs	r3, #2
 80051c2:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 80051c6:	e7b3      	b.n	8005130 <HAL_TIM_PWM_Start+0x10>
 80051c8:	2302      	movs	r3, #2
 80051ca:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80051ce:	e7af      	b.n	8005130 <HAL_TIM_PWM_Start+0x10>
 80051d0:	40012c00 	.word	0x40012c00
 80051d4:	40000400 	.word	0x40000400

080051d8 <HAL_TIM_PWM_ConfigChannel>:
{
 80051d8:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80051da:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 80051de:	2801      	cmp	r0, #1
 80051e0:	f000 80c0 	beq.w	8005364 <HAL_TIM_PWM_ConfigChannel+0x18c>
 80051e4:	2001      	movs	r0, #1
{
 80051e6:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 80051e8:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  switch (Channel)
 80051ec:	2a0c      	cmp	r2, #12
 80051ee:	d82d      	bhi.n	800524c <HAL_TIM_PWM_ConfigChannel+0x74>
 80051f0:	e8df f002 	tbb	[pc, r2]
 80051f4:	2c2c2c07 	.word	0x2c2c2c07
 80051f8:	2c2c2c60 	.word	0x2c2c2c60
 80051fc:	2c2c2c8d 	.word	0x2c2c2c8d
 8005200:	32          	.byte	0x32
 8005201:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005202:	681a      	ldr	r2, [r3, #0]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005204:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005206:	6a10      	ldr	r0, [r2, #32]
 8005208:	f020 0001 	bic.w	r0, r0, #1
 800520c:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 800520e:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8005210:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8005212:	6994      	ldr	r4, [r2, #24]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005214:	f020 0002 	bic.w	r0, r0, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005218:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800521c:	4334      	orrs	r4, r6
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800521e:	688e      	ldr	r6, [r1, #8]
 8005220:	4330      	orrs	r0, r6

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005222:	4e6a      	ldr	r6, [pc, #424]	; (80053cc <HAL_TIM_PWM_ConfigChannel+0x1f4>)
 8005224:	42b2      	cmp	r2, r6
 8005226:	f000 809f 	beq.w	8005368 <HAL_TIM_PWM_ConfigChannel+0x190>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800522a:	6055      	str	r5, [r2, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800522c:	684d      	ldr	r5, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800522e:	6194      	str	r4, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005230:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR1 = OC_Config->Pulse;
 8005232:	6355      	str	r5, [r2, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005234:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005236:	6990      	ldr	r0, [r2, #24]
 8005238:	f040 0008 	orr.w	r0, r0, #8
 800523c:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800523e:	6990      	ldr	r0, [r2, #24]
 8005240:	f020 0004 	bic.w	r0, r0, #4
 8005244:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005246:	6991      	ldr	r1, [r2, #24]
 8005248:	4321      	orrs	r1, r4
 800524a:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 800524c:	2200      	movs	r2, #0
 800524e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  return HAL_OK;
 8005252:	4610      	mov	r0, r2
}
 8005254:	bcf0      	pop	{r4, r5, r6, r7}
 8005256:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005258:	681a      	ldr	r2, [r3, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800525a:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800525c:	6a10      	ldr	r0, [r2, #32]
 800525e:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8005262:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8005264:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8005266:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8005268:	69d4      	ldr	r4, [r2, #28]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800526a:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800526e:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005272:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005276:	688e      	ldr	r6, [r1, #8]
 8005278:	ea40 3006 	orr.w	r0, r0, r6, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800527c:	4e53      	ldr	r6, [pc, #332]	; (80053cc <HAL_TIM_PWM_ConfigChannel+0x1f4>)
 800527e:	42b2      	cmp	r2, r6
 8005280:	f000 808e 	beq.w	80053a0 <HAL_TIM_PWM_ConfigChannel+0x1c8>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005284:	6055      	str	r5, [r2, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005286:	684d      	ldr	r5, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005288:	61d4      	str	r4, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800528a:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR4 = OC_Config->Pulse;
 800528c:	6415      	str	r5, [r2, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800528e:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005290:	69d0      	ldr	r0, [r2, #28]
 8005292:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8005296:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005298:	69d0      	ldr	r0, [r2, #28]
 800529a:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 800529e:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052a0:	69d1      	ldr	r1, [r2, #28]
 80052a2:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 80052a6:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  return HAL_OK;
 80052ae:	4610      	mov	r0, r2
}
 80052b0:	bcf0      	pop	{r4, r5, r6, r7}
 80052b2:	4770      	bx	lr
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052b4:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052b6:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052b8:	6a10      	ldr	r0, [r2, #32]
 80052ba:	f020 0010 	bic.w	r0, r0, #16
 80052be:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 80052c0:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80052c2:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 80052c4:	6994      	ldr	r4, [r2, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 80052c6:	f020 0020 	bic.w	r0, r0, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052ca:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052ce:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052d2:	688e      	ldr	r6, [r1, #8]
 80052d4:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052d8:	4e3c      	ldr	r6, [pc, #240]	; (80053cc <HAL_TIM_PWM_ConfigChannel+0x1f4>)
 80052da:	42b2      	cmp	r2, r6
 80052dc:	d051      	beq.n	8005382 <HAL_TIM_PWM_ConfigChannel+0x1aa>
  TIMx->CR2 = tmpcr2;
 80052de:	6055      	str	r5, [r2, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80052e0:	684d      	ldr	r5, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80052e2:	6194      	str	r4, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052e4:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR2 = OC_Config->Pulse;
 80052e6:	6395      	str	r5, [r2, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80052e8:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052ea:	6990      	ldr	r0, [r2, #24]
 80052ec:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 80052f0:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052f2:	6990      	ldr	r0, [r2, #24]
 80052f4:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 80052f8:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052fa:	6991      	ldr	r1, [r2, #24]
 80052fc:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 8005300:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 8005302:	2200      	movs	r2, #0
 8005304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  return HAL_OK;
 8005308:	4610      	mov	r0, r2
}
 800530a:	bcf0      	pop	{r4, r5, r6, r7}
 800530c:	4770      	bx	lr
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800530e:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= OC_Config->OCMode;
 8005310:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005312:	6a10      	ldr	r0, [r2, #32]
 8005314:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8005318:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 800531a:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 800531c:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 800531e:	69d4      	ldr	r4, [r2, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8005320:	f420 7000 	bic.w	r0, r0, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005324:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005328:	4334      	orrs	r4, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800532a:	688e      	ldr	r6, [r1, #8]
 800532c:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005330:	4e26      	ldr	r6, [pc, #152]	; (80053cc <HAL_TIM_PWM_ConfigChannel+0x1f4>)
 8005332:	42b2      	cmp	r2, r6
 8005334:	d03a      	beq.n	80053ac <HAL_TIM_PWM_ConfigChannel+0x1d4>
  TIMx->CR2 = tmpcr2;
 8005336:	6055      	str	r5, [r2, #4]
  TIMx->CCR3 = OC_Config->Pulse;
 8005338:	684d      	ldr	r5, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800533a:	61d4      	str	r4, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800533c:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR3 = OC_Config->Pulse;
 800533e:	63d5      	str	r5, [r2, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8005340:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005342:	69d0      	ldr	r0, [r2, #28]
 8005344:	f040 0008 	orr.w	r0, r0, #8
 8005348:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800534a:	69d0      	ldr	r0, [r2, #28]
 800534c:	f020 0004 	bic.w	r0, r0, #4
 8005350:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005352:	69d1      	ldr	r1, [r2, #28]
 8005354:	4321      	orrs	r1, r4
 8005356:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 8005358:	2200      	movs	r2, #0
 800535a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  return HAL_OK;
 800535e:	4610      	mov	r0, r2
}
 8005360:	bcf0      	pop	{r4, r5, r6, r7}
 8005362:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005364:	2002      	movs	r0, #2
}
 8005366:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8005368:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800536a:	f020 0008 	bic.w	r0, r0, #8
    tmpccer |= OC_Config->OCNPolarity;
 800536e:	4330      	orrs	r0, r6
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005370:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8005374:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
 8005378:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 800537a:	f020 0004 	bic.w	r0, r0, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800537e:	4335      	orrs	r5, r6
 8005380:	e753      	b.n	800522a <HAL_TIM_PWM_ConfigChannel+0x52>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005382:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005384:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005388:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800538c:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005390:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
 8005394:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 8005396:	f020 0040 	bic.w	r0, r0, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800539a:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
 800539e:	e79e      	b.n	80052de <HAL_TIM_PWM_ConfigChannel+0x106>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053a0:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053a2:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053a6:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 80053aa:	e76b      	b.n	8005284 <HAL_TIM_PWM_ConfigChannel+0xac>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053ac:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80053ae:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053b2:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053b6:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053ba:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
 80053be:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 80053c0:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053c4:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
 80053c8:	e7b5      	b.n	8005336 <HAL_TIM_PWM_ConfigChannel+0x15e>
 80053ca:	bf00      	nop
 80053cc:	40012c00 	.word	0x40012c00

080053d0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80053d0:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80053d4:	2a01      	cmp	r2, #1
 80053d6:	d075      	beq.n	80054c4 <HAL_TIM_ConfigClockSource+0xf4>
{
 80053d8:	b430      	push	{r4, r5}
 80053da:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80053dc:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80053de:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 80053e0:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(htim);
 80053e2:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80053e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80053ea:	6884      	ldr	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80053ec:	680a      	ldr	r2, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053ee:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 80053f2:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 80053f6:	2a60      	cmp	r2, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 80053f8:	6084      	str	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80053fa:	d065      	beq.n	80054c8 <HAL_TIM_ConfigClockSource+0xf8>
 80053fc:	d831      	bhi.n	8005462 <HAL_TIM_ConfigClockSource+0x92>
 80053fe:	2a40      	cmp	r2, #64	; 0x40
 8005400:	d048      	beq.n	8005494 <HAL_TIM_ConfigClockSource+0xc4>
 8005402:	d921      	bls.n	8005448 <HAL_TIM_ConfigClockSource+0x78>
 8005404:	2a50      	cmp	r2, #80	; 0x50
 8005406:	d116      	bne.n	8005436 <HAL_TIM_ConfigClockSource+0x66>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005408:	684c      	ldr	r4, [r1, #4]
 800540a:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800540c:	6a01      	ldr	r1, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800540e:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8005412:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005414:	6a04      	ldr	r4, [r0, #32]
 8005416:	f024 0401 	bic.w	r4, r4, #1
 800541a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800541c:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800541e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005422:	ea42 1205 	orr.w	r2, r2, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005426:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005428:	6201      	str	r1, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800542a:	6882      	ldr	r2, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800542c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005430:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005434:	6082      	str	r2, [r0, #8]
  __HAL_UNLOCK(htim);
 8005436:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8005438:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800543a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 800543e:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
  return HAL_OK;
 8005442:	4610      	mov	r0, r2
}
 8005444:	bc30      	pop	{r4, r5}
 8005446:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8005448:	2a20      	cmp	r2, #32
 800544a:	d002      	beq.n	8005452 <HAL_TIM_ConfigClockSource+0x82>
 800544c:	d91e      	bls.n	800548c <HAL_TIM_ConfigClockSource+0xbc>
 800544e:	2a30      	cmp	r2, #48	; 0x30
 8005450:	d1f1      	bne.n	8005436 <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr = TIMx->SMCR;
 8005452:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005454:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005458:	430a      	orrs	r2, r1
 800545a:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 800545e:	6082      	str	r2, [r0, #8]
}
 8005460:	e7e9      	b.n	8005436 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8005462:	2a70      	cmp	r2, #112	; 0x70
 8005464:	d049      	beq.n	80054fa <HAL_TIM_ConfigClockSource+0x12a>
 8005466:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800546a:	d1e4      	bne.n	8005436 <HAL_TIM_ConfigClockSource+0x66>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800546c:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8005470:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005472:	432a      	orrs	r2, r5
 8005474:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005476:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800547a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800547e:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005480:	6082      	str	r2, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005482:	6882      	ldr	r2, [r0, #8]
 8005484:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005488:	6082      	str	r2, [r0, #8]
      break;
 800548a:	e7d4      	b.n	8005436 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 800548c:	f032 0110 	bics.w	r1, r2, #16
 8005490:	d1d1      	bne.n	8005436 <HAL_TIM_ConfigClockSource+0x66>
 8005492:	e7de      	b.n	8005452 <HAL_TIM_ConfigClockSource+0x82>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005494:	684c      	ldr	r4, [r1, #4]
 8005496:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8005498:	6a01      	ldr	r1, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800549a:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800549e:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054a0:	6a04      	ldr	r4, [r0, #32]
 80054a2:	f024 0401 	bic.w	r4, r4, #1
 80054a6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054a8:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054aa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054ae:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80054b2:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80054b4:	6201      	str	r1, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80054b6:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80054b8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054bc:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80054c0:	6082      	str	r2, [r0, #8]
}
 80054c2:	e7b8      	b.n	8005436 <HAL_TIM_ConfigClockSource+0x66>
  __HAL_LOCK(htim);
 80054c4:	2002      	movs	r0, #2
}
 80054c6:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054c8:	6a04      	ldr	r4, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054ca:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054cc:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054d0:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054d2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054d4:	6981      	ldr	r1, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054d6:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054da:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
  tmpccer = TIMx->CCER;
 80054de:	6a02      	ldr	r2, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 80054e0:	6181      	str	r1, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80054e6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCER = tmpccer;
 80054ea:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80054ec:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80054ee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054f2:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80054f6:	6082      	str	r2, [r0, #8]
}
 80054f8:	e79d      	b.n	8005436 <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054fa:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80054fe:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005500:	432a      	orrs	r2, r5
 8005502:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005504:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005508:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800550c:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 800550e:	6082      	str	r2, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 8005510:	6882      	ldr	r2, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005512:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8005516:	6082      	str	r2, [r0, #8]
      break;
 8005518:	e78d      	b.n	8005436 <HAL_TIM_ConfigClockSource+0x66>
 800551a:	bf00      	nop

0800551c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800551c:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8005520:	2a01      	cmp	r2, #1
 8005522:	d027      	beq.n	8005574 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8005524:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005526:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005528:	681a      	ldr	r2, [r3, #0]
{
 800552a:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 800552c:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8005530:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005532:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005534:	4d10      	ldr	r5, [pc, #64]	; (8005578 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8005536:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800553a:	4320      	orrs	r0, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800553c:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 800553e:	6894      	ldr	r4, [r2, #8]
  htim->Instance->CR2 = tmpcr2;
 8005540:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005542:	d009      	beq.n	8005558 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8005544:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005548:	d006      	beq.n	8005558 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800554a:	480c      	ldr	r0, [pc, #48]	; (800557c <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 800554c:	4282      	cmp	r2, r0
 800554e:	d003      	beq.n	8005558 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8005550:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8005554:	4282      	cmp	r2, r0
 8005556:	d104      	bne.n	8005562 <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005558:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800555a:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800555e:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005560:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8005562:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8005564:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8005566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 800556a:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d

  return HAL_OK;
 800556e:	4610      	mov	r0, r2
}
 8005570:	bc30      	pop	{r4, r5}
 8005572:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005574:	2002      	movs	r0, #2
}
 8005576:	4770      	bx	lr
 8005578:	40012c00 	.word	0x40012c00
 800557c:	40000400 	.word	0x40000400

08005580 <__errno>:
 8005580:	4b01      	ldr	r3, [pc, #4]	; (8005588 <__errno+0x8>)
 8005582:	6818      	ldr	r0, [r3, #0]
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	2000001c 	.word	0x2000001c

0800558c <__libc_init_array>:
 800558c:	b570      	push	{r4, r5, r6, lr}
 800558e:	2600      	movs	r6, #0
 8005590:	4d0c      	ldr	r5, [pc, #48]	; (80055c4 <__libc_init_array+0x38>)
 8005592:	4c0d      	ldr	r4, [pc, #52]	; (80055c8 <__libc_init_array+0x3c>)
 8005594:	1b64      	subs	r4, r4, r5
 8005596:	10a4      	asrs	r4, r4, #2
 8005598:	42a6      	cmp	r6, r4
 800559a:	d109      	bne.n	80055b0 <__libc_init_array+0x24>
 800559c:	f002 fefc 	bl	8008398 <_init>
 80055a0:	2600      	movs	r6, #0
 80055a2:	4d0a      	ldr	r5, [pc, #40]	; (80055cc <__libc_init_array+0x40>)
 80055a4:	4c0a      	ldr	r4, [pc, #40]	; (80055d0 <__libc_init_array+0x44>)
 80055a6:	1b64      	subs	r4, r4, r5
 80055a8:	10a4      	asrs	r4, r4, #2
 80055aa:	42a6      	cmp	r6, r4
 80055ac:	d105      	bne.n	80055ba <__libc_init_array+0x2e>
 80055ae:	bd70      	pop	{r4, r5, r6, pc}
 80055b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80055b4:	4798      	blx	r3
 80055b6:	3601      	adds	r6, #1
 80055b8:	e7ee      	b.n	8005598 <__libc_init_array+0xc>
 80055ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80055be:	4798      	blx	r3
 80055c0:	3601      	adds	r6, #1
 80055c2:	e7f2      	b.n	80055aa <__libc_init_array+0x1e>
 80055c4:	0800a2cc 	.word	0x0800a2cc
 80055c8:	0800a2cc 	.word	0x0800a2cc
 80055cc:	0800a2cc 	.word	0x0800a2cc
 80055d0:	0800a2d0 	.word	0x0800a2d0

080055d4 <memset>:
 80055d4:	4603      	mov	r3, r0
 80055d6:	4402      	add	r2, r0
 80055d8:	4293      	cmp	r3, r2
 80055da:	d100      	bne.n	80055de <memset+0xa>
 80055dc:	4770      	bx	lr
 80055de:	f803 1b01 	strb.w	r1, [r3], #1
 80055e2:	e7f9      	b.n	80055d8 <memset+0x4>

080055e4 <__cvt>:
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055ea:	461f      	mov	r7, r3
 80055ec:	bfbb      	ittet	lt
 80055ee:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80055f2:	461f      	movlt	r7, r3
 80055f4:	2300      	movge	r3, #0
 80055f6:	232d      	movlt	r3, #45	; 0x2d
 80055f8:	b088      	sub	sp, #32
 80055fa:	4614      	mov	r4, r2
 80055fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80055fe:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005600:	7013      	strb	r3, [r2, #0]
 8005602:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005604:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005608:	f023 0820 	bic.w	r8, r3, #32
 800560c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005610:	d005      	beq.n	800561e <__cvt+0x3a>
 8005612:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005616:	d100      	bne.n	800561a <__cvt+0x36>
 8005618:	3501      	adds	r5, #1
 800561a:	2302      	movs	r3, #2
 800561c:	e000      	b.n	8005620 <__cvt+0x3c>
 800561e:	2303      	movs	r3, #3
 8005620:	aa07      	add	r2, sp, #28
 8005622:	9204      	str	r2, [sp, #16]
 8005624:	aa06      	add	r2, sp, #24
 8005626:	e9cd a202 	strd	sl, r2, [sp, #8]
 800562a:	e9cd 3500 	strd	r3, r5, [sp]
 800562e:	4622      	mov	r2, r4
 8005630:	463b      	mov	r3, r7
 8005632:	f000 fce5 	bl	8006000 <_dtoa_r>
 8005636:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800563a:	4606      	mov	r6, r0
 800563c:	d102      	bne.n	8005644 <__cvt+0x60>
 800563e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005640:	07db      	lsls	r3, r3, #31
 8005642:	d522      	bpl.n	800568a <__cvt+0xa6>
 8005644:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005648:	eb06 0905 	add.w	r9, r6, r5
 800564c:	d110      	bne.n	8005670 <__cvt+0x8c>
 800564e:	7833      	ldrb	r3, [r6, #0]
 8005650:	2b30      	cmp	r3, #48	; 0x30
 8005652:	d10a      	bne.n	800566a <__cvt+0x86>
 8005654:	2200      	movs	r2, #0
 8005656:	2300      	movs	r3, #0
 8005658:	4620      	mov	r0, r4
 800565a:	4639      	mov	r1, r7
 800565c:	f7fb f9a4 	bl	80009a8 <__aeabi_dcmpeq>
 8005660:	b918      	cbnz	r0, 800566a <__cvt+0x86>
 8005662:	f1c5 0501 	rsb	r5, r5, #1
 8005666:	f8ca 5000 	str.w	r5, [sl]
 800566a:	f8da 3000 	ldr.w	r3, [sl]
 800566e:	4499      	add	r9, r3
 8005670:	2200      	movs	r2, #0
 8005672:	2300      	movs	r3, #0
 8005674:	4620      	mov	r0, r4
 8005676:	4639      	mov	r1, r7
 8005678:	f7fb f996 	bl	80009a8 <__aeabi_dcmpeq>
 800567c:	b108      	cbz	r0, 8005682 <__cvt+0x9e>
 800567e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005682:	2230      	movs	r2, #48	; 0x30
 8005684:	9b07      	ldr	r3, [sp, #28]
 8005686:	454b      	cmp	r3, r9
 8005688:	d307      	bcc.n	800569a <__cvt+0xb6>
 800568a:	4630      	mov	r0, r6
 800568c:	9b07      	ldr	r3, [sp, #28]
 800568e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005690:	1b9b      	subs	r3, r3, r6
 8005692:	6013      	str	r3, [r2, #0]
 8005694:	b008      	add	sp, #32
 8005696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800569a:	1c59      	adds	r1, r3, #1
 800569c:	9107      	str	r1, [sp, #28]
 800569e:	701a      	strb	r2, [r3, #0]
 80056a0:	e7f0      	b.n	8005684 <__cvt+0xa0>

080056a2 <__exponent>:
 80056a2:	4603      	mov	r3, r0
 80056a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056a6:	2900      	cmp	r1, #0
 80056a8:	f803 2b02 	strb.w	r2, [r3], #2
 80056ac:	bfb6      	itet	lt
 80056ae:	222d      	movlt	r2, #45	; 0x2d
 80056b0:	222b      	movge	r2, #43	; 0x2b
 80056b2:	4249      	neglt	r1, r1
 80056b4:	2909      	cmp	r1, #9
 80056b6:	7042      	strb	r2, [r0, #1]
 80056b8:	dd2b      	ble.n	8005712 <__exponent+0x70>
 80056ba:	f10d 0407 	add.w	r4, sp, #7
 80056be:	46a4      	mov	ip, r4
 80056c0:	270a      	movs	r7, #10
 80056c2:	fb91 f6f7 	sdiv	r6, r1, r7
 80056c6:	460a      	mov	r2, r1
 80056c8:	46a6      	mov	lr, r4
 80056ca:	fb07 1516 	mls	r5, r7, r6, r1
 80056ce:	2a63      	cmp	r2, #99	; 0x63
 80056d0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80056d4:	4631      	mov	r1, r6
 80056d6:	f104 34ff 	add.w	r4, r4, #4294967295
 80056da:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80056de:	dcf0      	bgt.n	80056c2 <__exponent+0x20>
 80056e0:	3130      	adds	r1, #48	; 0x30
 80056e2:	f1ae 0502 	sub.w	r5, lr, #2
 80056e6:	f804 1c01 	strb.w	r1, [r4, #-1]
 80056ea:	4629      	mov	r1, r5
 80056ec:	1c44      	adds	r4, r0, #1
 80056ee:	4561      	cmp	r1, ip
 80056f0:	d30a      	bcc.n	8005708 <__exponent+0x66>
 80056f2:	f10d 0209 	add.w	r2, sp, #9
 80056f6:	eba2 020e 	sub.w	r2, r2, lr
 80056fa:	4565      	cmp	r5, ip
 80056fc:	bf88      	it	hi
 80056fe:	2200      	movhi	r2, #0
 8005700:	4413      	add	r3, r2
 8005702:	1a18      	subs	r0, r3, r0
 8005704:	b003      	add	sp, #12
 8005706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005708:	f811 2b01 	ldrb.w	r2, [r1], #1
 800570c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005710:	e7ed      	b.n	80056ee <__exponent+0x4c>
 8005712:	2330      	movs	r3, #48	; 0x30
 8005714:	3130      	adds	r1, #48	; 0x30
 8005716:	7083      	strb	r3, [r0, #2]
 8005718:	70c1      	strb	r1, [r0, #3]
 800571a:	1d03      	adds	r3, r0, #4
 800571c:	e7f1      	b.n	8005702 <__exponent+0x60>
	...

08005720 <_printf_float>:
 8005720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005724:	b091      	sub	sp, #68	; 0x44
 8005726:	460c      	mov	r4, r1
 8005728:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800572c:	4616      	mov	r6, r2
 800572e:	461f      	mov	r7, r3
 8005730:	4605      	mov	r5, r0
 8005732:	f001 fa53 	bl	8006bdc <_localeconv_r>
 8005736:	6803      	ldr	r3, [r0, #0]
 8005738:	4618      	mov	r0, r3
 800573a:	9309      	str	r3, [sp, #36]	; 0x24
 800573c:	f7fa fd08 	bl	8000150 <strlen>
 8005740:	2300      	movs	r3, #0
 8005742:	930e      	str	r3, [sp, #56]	; 0x38
 8005744:	f8d8 3000 	ldr.w	r3, [r8]
 8005748:	900a      	str	r0, [sp, #40]	; 0x28
 800574a:	3307      	adds	r3, #7
 800574c:	f023 0307 	bic.w	r3, r3, #7
 8005750:	f103 0208 	add.w	r2, r3, #8
 8005754:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005758:	f8d4 b000 	ldr.w	fp, [r4]
 800575c:	f8c8 2000 	str.w	r2, [r8]
 8005760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005764:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005768:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800576c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005770:	930b      	str	r3, [sp, #44]	; 0x2c
 8005772:	f04f 32ff 	mov.w	r2, #4294967295
 8005776:	4640      	mov	r0, r8
 8005778:	4b9c      	ldr	r3, [pc, #624]	; (80059ec <_printf_float+0x2cc>)
 800577a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800577c:	f7fb f946 	bl	8000a0c <__aeabi_dcmpun>
 8005780:	bb70      	cbnz	r0, 80057e0 <_printf_float+0xc0>
 8005782:	f04f 32ff 	mov.w	r2, #4294967295
 8005786:	4640      	mov	r0, r8
 8005788:	4b98      	ldr	r3, [pc, #608]	; (80059ec <_printf_float+0x2cc>)
 800578a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800578c:	f7fb f920 	bl	80009d0 <__aeabi_dcmple>
 8005790:	bb30      	cbnz	r0, 80057e0 <_printf_float+0xc0>
 8005792:	2200      	movs	r2, #0
 8005794:	2300      	movs	r3, #0
 8005796:	4640      	mov	r0, r8
 8005798:	4651      	mov	r1, sl
 800579a:	f7fb f90f 	bl	80009bc <__aeabi_dcmplt>
 800579e:	b110      	cbz	r0, 80057a6 <_printf_float+0x86>
 80057a0:	232d      	movs	r3, #45	; 0x2d
 80057a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057a6:	4b92      	ldr	r3, [pc, #584]	; (80059f0 <_printf_float+0x2d0>)
 80057a8:	4892      	ldr	r0, [pc, #584]	; (80059f4 <_printf_float+0x2d4>)
 80057aa:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80057ae:	bf94      	ite	ls
 80057b0:	4698      	movls	r8, r3
 80057b2:	4680      	movhi	r8, r0
 80057b4:	2303      	movs	r3, #3
 80057b6:	f04f 0a00 	mov.w	sl, #0
 80057ba:	6123      	str	r3, [r4, #16]
 80057bc:	f02b 0304 	bic.w	r3, fp, #4
 80057c0:	6023      	str	r3, [r4, #0]
 80057c2:	4633      	mov	r3, r6
 80057c4:	4621      	mov	r1, r4
 80057c6:	4628      	mov	r0, r5
 80057c8:	9700      	str	r7, [sp, #0]
 80057ca:	aa0f      	add	r2, sp, #60	; 0x3c
 80057cc:	f000 f9d4 	bl	8005b78 <_printf_common>
 80057d0:	3001      	adds	r0, #1
 80057d2:	f040 8090 	bne.w	80058f6 <_printf_float+0x1d6>
 80057d6:	f04f 30ff 	mov.w	r0, #4294967295
 80057da:	b011      	add	sp, #68	; 0x44
 80057dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057e0:	4642      	mov	r2, r8
 80057e2:	4653      	mov	r3, sl
 80057e4:	4640      	mov	r0, r8
 80057e6:	4651      	mov	r1, sl
 80057e8:	f7fb f910 	bl	8000a0c <__aeabi_dcmpun>
 80057ec:	b148      	cbz	r0, 8005802 <_printf_float+0xe2>
 80057ee:	f1ba 0f00 	cmp.w	sl, #0
 80057f2:	bfb8      	it	lt
 80057f4:	232d      	movlt	r3, #45	; 0x2d
 80057f6:	4880      	ldr	r0, [pc, #512]	; (80059f8 <_printf_float+0x2d8>)
 80057f8:	bfb8      	it	lt
 80057fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80057fe:	4b7f      	ldr	r3, [pc, #508]	; (80059fc <_printf_float+0x2dc>)
 8005800:	e7d3      	b.n	80057aa <_printf_float+0x8a>
 8005802:	6863      	ldr	r3, [r4, #4]
 8005804:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005808:	1c5a      	adds	r2, r3, #1
 800580a:	d142      	bne.n	8005892 <_printf_float+0x172>
 800580c:	2306      	movs	r3, #6
 800580e:	6063      	str	r3, [r4, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	9206      	str	r2, [sp, #24]
 8005814:	aa0e      	add	r2, sp, #56	; 0x38
 8005816:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800581a:	aa0d      	add	r2, sp, #52	; 0x34
 800581c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005820:	9203      	str	r2, [sp, #12]
 8005822:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005826:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800582a:	6023      	str	r3, [r4, #0]
 800582c:	6863      	ldr	r3, [r4, #4]
 800582e:	4642      	mov	r2, r8
 8005830:	9300      	str	r3, [sp, #0]
 8005832:	4628      	mov	r0, r5
 8005834:	4653      	mov	r3, sl
 8005836:	910b      	str	r1, [sp, #44]	; 0x2c
 8005838:	f7ff fed4 	bl	80055e4 <__cvt>
 800583c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800583e:	4680      	mov	r8, r0
 8005840:	2947      	cmp	r1, #71	; 0x47
 8005842:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005844:	d108      	bne.n	8005858 <_printf_float+0x138>
 8005846:	1cc8      	adds	r0, r1, #3
 8005848:	db02      	blt.n	8005850 <_printf_float+0x130>
 800584a:	6863      	ldr	r3, [r4, #4]
 800584c:	4299      	cmp	r1, r3
 800584e:	dd40      	ble.n	80058d2 <_printf_float+0x1b2>
 8005850:	f1a9 0902 	sub.w	r9, r9, #2
 8005854:	fa5f f989 	uxtb.w	r9, r9
 8005858:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800585c:	d81f      	bhi.n	800589e <_printf_float+0x17e>
 800585e:	464a      	mov	r2, r9
 8005860:	3901      	subs	r1, #1
 8005862:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005866:	910d      	str	r1, [sp, #52]	; 0x34
 8005868:	f7ff ff1b 	bl	80056a2 <__exponent>
 800586c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800586e:	4682      	mov	sl, r0
 8005870:	1813      	adds	r3, r2, r0
 8005872:	2a01      	cmp	r2, #1
 8005874:	6123      	str	r3, [r4, #16]
 8005876:	dc02      	bgt.n	800587e <_printf_float+0x15e>
 8005878:	6822      	ldr	r2, [r4, #0]
 800587a:	07d2      	lsls	r2, r2, #31
 800587c:	d501      	bpl.n	8005882 <_printf_float+0x162>
 800587e:	3301      	adds	r3, #1
 8005880:	6123      	str	r3, [r4, #16]
 8005882:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005886:	2b00      	cmp	r3, #0
 8005888:	d09b      	beq.n	80057c2 <_printf_float+0xa2>
 800588a:	232d      	movs	r3, #45	; 0x2d
 800588c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005890:	e797      	b.n	80057c2 <_printf_float+0xa2>
 8005892:	2947      	cmp	r1, #71	; 0x47
 8005894:	d1bc      	bne.n	8005810 <_printf_float+0xf0>
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1ba      	bne.n	8005810 <_printf_float+0xf0>
 800589a:	2301      	movs	r3, #1
 800589c:	e7b7      	b.n	800580e <_printf_float+0xee>
 800589e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80058a2:	d118      	bne.n	80058d6 <_printf_float+0x1b6>
 80058a4:	2900      	cmp	r1, #0
 80058a6:	6863      	ldr	r3, [r4, #4]
 80058a8:	dd0b      	ble.n	80058c2 <_printf_float+0x1a2>
 80058aa:	6121      	str	r1, [r4, #16]
 80058ac:	b913      	cbnz	r3, 80058b4 <_printf_float+0x194>
 80058ae:	6822      	ldr	r2, [r4, #0]
 80058b0:	07d0      	lsls	r0, r2, #31
 80058b2:	d502      	bpl.n	80058ba <_printf_float+0x19a>
 80058b4:	3301      	adds	r3, #1
 80058b6:	440b      	add	r3, r1
 80058b8:	6123      	str	r3, [r4, #16]
 80058ba:	f04f 0a00 	mov.w	sl, #0
 80058be:	65a1      	str	r1, [r4, #88]	; 0x58
 80058c0:	e7df      	b.n	8005882 <_printf_float+0x162>
 80058c2:	b913      	cbnz	r3, 80058ca <_printf_float+0x1aa>
 80058c4:	6822      	ldr	r2, [r4, #0]
 80058c6:	07d2      	lsls	r2, r2, #31
 80058c8:	d501      	bpl.n	80058ce <_printf_float+0x1ae>
 80058ca:	3302      	adds	r3, #2
 80058cc:	e7f4      	b.n	80058b8 <_printf_float+0x198>
 80058ce:	2301      	movs	r3, #1
 80058d0:	e7f2      	b.n	80058b8 <_printf_float+0x198>
 80058d2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80058d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058d8:	4299      	cmp	r1, r3
 80058da:	db05      	blt.n	80058e8 <_printf_float+0x1c8>
 80058dc:	6823      	ldr	r3, [r4, #0]
 80058de:	6121      	str	r1, [r4, #16]
 80058e0:	07d8      	lsls	r0, r3, #31
 80058e2:	d5ea      	bpl.n	80058ba <_printf_float+0x19a>
 80058e4:	1c4b      	adds	r3, r1, #1
 80058e6:	e7e7      	b.n	80058b8 <_printf_float+0x198>
 80058e8:	2900      	cmp	r1, #0
 80058ea:	bfcc      	ite	gt
 80058ec:	2201      	movgt	r2, #1
 80058ee:	f1c1 0202 	rsble	r2, r1, #2
 80058f2:	4413      	add	r3, r2
 80058f4:	e7e0      	b.n	80058b8 <_printf_float+0x198>
 80058f6:	6823      	ldr	r3, [r4, #0]
 80058f8:	055a      	lsls	r2, r3, #21
 80058fa:	d407      	bmi.n	800590c <_printf_float+0x1ec>
 80058fc:	6923      	ldr	r3, [r4, #16]
 80058fe:	4642      	mov	r2, r8
 8005900:	4631      	mov	r1, r6
 8005902:	4628      	mov	r0, r5
 8005904:	47b8      	blx	r7
 8005906:	3001      	adds	r0, #1
 8005908:	d12b      	bne.n	8005962 <_printf_float+0x242>
 800590a:	e764      	b.n	80057d6 <_printf_float+0xb6>
 800590c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005910:	f240 80dd 	bls.w	8005ace <_printf_float+0x3ae>
 8005914:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005918:	2200      	movs	r2, #0
 800591a:	2300      	movs	r3, #0
 800591c:	f7fb f844 	bl	80009a8 <__aeabi_dcmpeq>
 8005920:	2800      	cmp	r0, #0
 8005922:	d033      	beq.n	800598c <_printf_float+0x26c>
 8005924:	2301      	movs	r3, #1
 8005926:	4631      	mov	r1, r6
 8005928:	4628      	mov	r0, r5
 800592a:	4a35      	ldr	r2, [pc, #212]	; (8005a00 <_printf_float+0x2e0>)
 800592c:	47b8      	blx	r7
 800592e:	3001      	adds	r0, #1
 8005930:	f43f af51 	beq.w	80057d6 <_printf_float+0xb6>
 8005934:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005938:	429a      	cmp	r2, r3
 800593a:	db02      	blt.n	8005942 <_printf_float+0x222>
 800593c:	6823      	ldr	r3, [r4, #0]
 800593e:	07d8      	lsls	r0, r3, #31
 8005940:	d50f      	bpl.n	8005962 <_printf_float+0x242>
 8005942:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005946:	4631      	mov	r1, r6
 8005948:	4628      	mov	r0, r5
 800594a:	47b8      	blx	r7
 800594c:	3001      	adds	r0, #1
 800594e:	f43f af42 	beq.w	80057d6 <_printf_float+0xb6>
 8005952:	f04f 0800 	mov.w	r8, #0
 8005956:	f104 091a 	add.w	r9, r4, #26
 800595a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800595c:	3b01      	subs	r3, #1
 800595e:	4543      	cmp	r3, r8
 8005960:	dc09      	bgt.n	8005976 <_printf_float+0x256>
 8005962:	6823      	ldr	r3, [r4, #0]
 8005964:	079b      	lsls	r3, r3, #30
 8005966:	f100 8102 	bmi.w	8005b6e <_printf_float+0x44e>
 800596a:	68e0      	ldr	r0, [r4, #12]
 800596c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800596e:	4298      	cmp	r0, r3
 8005970:	bfb8      	it	lt
 8005972:	4618      	movlt	r0, r3
 8005974:	e731      	b.n	80057da <_printf_float+0xba>
 8005976:	2301      	movs	r3, #1
 8005978:	464a      	mov	r2, r9
 800597a:	4631      	mov	r1, r6
 800597c:	4628      	mov	r0, r5
 800597e:	47b8      	blx	r7
 8005980:	3001      	adds	r0, #1
 8005982:	f43f af28 	beq.w	80057d6 <_printf_float+0xb6>
 8005986:	f108 0801 	add.w	r8, r8, #1
 800598a:	e7e6      	b.n	800595a <_printf_float+0x23a>
 800598c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800598e:	2b00      	cmp	r3, #0
 8005990:	dc38      	bgt.n	8005a04 <_printf_float+0x2e4>
 8005992:	2301      	movs	r3, #1
 8005994:	4631      	mov	r1, r6
 8005996:	4628      	mov	r0, r5
 8005998:	4a19      	ldr	r2, [pc, #100]	; (8005a00 <_printf_float+0x2e0>)
 800599a:	47b8      	blx	r7
 800599c:	3001      	adds	r0, #1
 800599e:	f43f af1a 	beq.w	80057d6 <_printf_float+0xb6>
 80059a2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80059a6:	4313      	orrs	r3, r2
 80059a8:	d102      	bne.n	80059b0 <_printf_float+0x290>
 80059aa:	6823      	ldr	r3, [r4, #0]
 80059ac:	07d9      	lsls	r1, r3, #31
 80059ae:	d5d8      	bpl.n	8005962 <_printf_float+0x242>
 80059b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059b4:	4631      	mov	r1, r6
 80059b6:	4628      	mov	r0, r5
 80059b8:	47b8      	blx	r7
 80059ba:	3001      	adds	r0, #1
 80059bc:	f43f af0b 	beq.w	80057d6 <_printf_float+0xb6>
 80059c0:	f04f 0900 	mov.w	r9, #0
 80059c4:	f104 0a1a 	add.w	sl, r4, #26
 80059c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059ca:	425b      	negs	r3, r3
 80059cc:	454b      	cmp	r3, r9
 80059ce:	dc01      	bgt.n	80059d4 <_printf_float+0x2b4>
 80059d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059d2:	e794      	b.n	80058fe <_printf_float+0x1de>
 80059d4:	2301      	movs	r3, #1
 80059d6:	4652      	mov	r2, sl
 80059d8:	4631      	mov	r1, r6
 80059da:	4628      	mov	r0, r5
 80059dc:	47b8      	blx	r7
 80059de:	3001      	adds	r0, #1
 80059e0:	f43f aef9 	beq.w	80057d6 <_printf_float+0xb6>
 80059e4:	f109 0901 	add.w	r9, r9, #1
 80059e8:	e7ee      	b.n	80059c8 <_printf_float+0x2a8>
 80059ea:	bf00      	nop
 80059ec:	7fefffff 	.word	0x7fefffff
 80059f0:	08009ef8 	.word	0x08009ef8
 80059f4:	08009efc 	.word	0x08009efc
 80059f8:	08009f04 	.word	0x08009f04
 80059fc:	08009f00 	.word	0x08009f00
 8005a00:	08009f08 	.word	0x08009f08
 8005a04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	bfa8      	it	ge
 8005a0c:	461a      	movge	r2, r3
 8005a0e:	2a00      	cmp	r2, #0
 8005a10:	4691      	mov	r9, r2
 8005a12:	dc37      	bgt.n	8005a84 <_printf_float+0x364>
 8005a14:	f04f 0b00 	mov.w	fp, #0
 8005a18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a1c:	f104 021a 	add.w	r2, r4, #26
 8005a20:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005a24:	ebaa 0309 	sub.w	r3, sl, r9
 8005a28:	455b      	cmp	r3, fp
 8005a2a:	dc33      	bgt.n	8005a94 <_printf_float+0x374>
 8005a2c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005a30:	429a      	cmp	r2, r3
 8005a32:	db3b      	blt.n	8005aac <_printf_float+0x38c>
 8005a34:	6823      	ldr	r3, [r4, #0]
 8005a36:	07da      	lsls	r2, r3, #31
 8005a38:	d438      	bmi.n	8005aac <_printf_float+0x38c>
 8005a3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a3c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005a3e:	eba3 020a 	sub.w	r2, r3, sl
 8005a42:	eba3 0901 	sub.w	r9, r3, r1
 8005a46:	4591      	cmp	r9, r2
 8005a48:	bfa8      	it	ge
 8005a4a:	4691      	movge	r9, r2
 8005a4c:	f1b9 0f00 	cmp.w	r9, #0
 8005a50:	dc34      	bgt.n	8005abc <_printf_float+0x39c>
 8005a52:	f04f 0800 	mov.w	r8, #0
 8005a56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a5a:	f104 0a1a 	add.w	sl, r4, #26
 8005a5e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005a62:	1a9b      	subs	r3, r3, r2
 8005a64:	eba3 0309 	sub.w	r3, r3, r9
 8005a68:	4543      	cmp	r3, r8
 8005a6a:	f77f af7a 	ble.w	8005962 <_printf_float+0x242>
 8005a6e:	2301      	movs	r3, #1
 8005a70:	4652      	mov	r2, sl
 8005a72:	4631      	mov	r1, r6
 8005a74:	4628      	mov	r0, r5
 8005a76:	47b8      	blx	r7
 8005a78:	3001      	adds	r0, #1
 8005a7a:	f43f aeac 	beq.w	80057d6 <_printf_float+0xb6>
 8005a7e:	f108 0801 	add.w	r8, r8, #1
 8005a82:	e7ec      	b.n	8005a5e <_printf_float+0x33e>
 8005a84:	4613      	mov	r3, r2
 8005a86:	4631      	mov	r1, r6
 8005a88:	4642      	mov	r2, r8
 8005a8a:	4628      	mov	r0, r5
 8005a8c:	47b8      	blx	r7
 8005a8e:	3001      	adds	r0, #1
 8005a90:	d1c0      	bne.n	8005a14 <_printf_float+0x2f4>
 8005a92:	e6a0      	b.n	80057d6 <_printf_float+0xb6>
 8005a94:	2301      	movs	r3, #1
 8005a96:	4631      	mov	r1, r6
 8005a98:	4628      	mov	r0, r5
 8005a9a:	920b      	str	r2, [sp, #44]	; 0x2c
 8005a9c:	47b8      	blx	r7
 8005a9e:	3001      	adds	r0, #1
 8005aa0:	f43f ae99 	beq.w	80057d6 <_printf_float+0xb6>
 8005aa4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005aa6:	f10b 0b01 	add.w	fp, fp, #1
 8005aaa:	e7b9      	b.n	8005a20 <_printf_float+0x300>
 8005aac:	4631      	mov	r1, r6
 8005aae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ab2:	4628      	mov	r0, r5
 8005ab4:	47b8      	blx	r7
 8005ab6:	3001      	adds	r0, #1
 8005ab8:	d1bf      	bne.n	8005a3a <_printf_float+0x31a>
 8005aba:	e68c      	b.n	80057d6 <_printf_float+0xb6>
 8005abc:	464b      	mov	r3, r9
 8005abe:	4631      	mov	r1, r6
 8005ac0:	4628      	mov	r0, r5
 8005ac2:	eb08 020a 	add.w	r2, r8, sl
 8005ac6:	47b8      	blx	r7
 8005ac8:	3001      	adds	r0, #1
 8005aca:	d1c2      	bne.n	8005a52 <_printf_float+0x332>
 8005acc:	e683      	b.n	80057d6 <_printf_float+0xb6>
 8005ace:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ad0:	2a01      	cmp	r2, #1
 8005ad2:	dc01      	bgt.n	8005ad8 <_printf_float+0x3b8>
 8005ad4:	07db      	lsls	r3, r3, #31
 8005ad6:	d537      	bpl.n	8005b48 <_printf_float+0x428>
 8005ad8:	2301      	movs	r3, #1
 8005ada:	4642      	mov	r2, r8
 8005adc:	4631      	mov	r1, r6
 8005ade:	4628      	mov	r0, r5
 8005ae0:	47b8      	blx	r7
 8005ae2:	3001      	adds	r0, #1
 8005ae4:	f43f ae77 	beq.w	80057d6 <_printf_float+0xb6>
 8005ae8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005aec:	4631      	mov	r1, r6
 8005aee:	4628      	mov	r0, r5
 8005af0:	47b8      	blx	r7
 8005af2:	3001      	adds	r0, #1
 8005af4:	f43f ae6f 	beq.w	80057d6 <_printf_float+0xb6>
 8005af8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005afc:	2200      	movs	r2, #0
 8005afe:	2300      	movs	r3, #0
 8005b00:	f7fa ff52 	bl	80009a8 <__aeabi_dcmpeq>
 8005b04:	b9d8      	cbnz	r0, 8005b3e <_printf_float+0x41e>
 8005b06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b08:	f108 0201 	add.w	r2, r8, #1
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	4631      	mov	r1, r6
 8005b10:	4628      	mov	r0, r5
 8005b12:	47b8      	blx	r7
 8005b14:	3001      	adds	r0, #1
 8005b16:	d10e      	bne.n	8005b36 <_printf_float+0x416>
 8005b18:	e65d      	b.n	80057d6 <_printf_float+0xb6>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	464a      	mov	r2, r9
 8005b1e:	4631      	mov	r1, r6
 8005b20:	4628      	mov	r0, r5
 8005b22:	47b8      	blx	r7
 8005b24:	3001      	adds	r0, #1
 8005b26:	f43f ae56 	beq.w	80057d6 <_printf_float+0xb6>
 8005b2a:	f108 0801 	add.w	r8, r8, #1
 8005b2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b30:	3b01      	subs	r3, #1
 8005b32:	4543      	cmp	r3, r8
 8005b34:	dcf1      	bgt.n	8005b1a <_printf_float+0x3fa>
 8005b36:	4653      	mov	r3, sl
 8005b38:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005b3c:	e6e0      	b.n	8005900 <_printf_float+0x1e0>
 8005b3e:	f04f 0800 	mov.w	r8, #0
 8005b42:	f104 091a 	add.w	r9, r4, #26
 8005b46:	e7f2      	b.n	8005b2e <_printf_float+0x40e>
 8005b48:	2301      	movs	r3, #1
 8005b4a:	4642      	mov	r2, r8
 8005b4c:	e7df      	b.n	8005b0e <_printf_float+0x3ee>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	464a      	mov	r2, r9
 8005b52:	4631      	mov	r1, r6
 8005b54:	4628      	mov	r0, r5
 8005b56:	47b8      	blx	r7
 8005b58:	3001      	adds	r0, #1
 8005b5a:	f43f ae3c 	beq.w	80057d6 <_printf_float+0xb6>
 8005b5e:	f108 0801 	add.w	r8, r8, #1
 8005b62:	68e3      	ldr	r3, [r4, #12]
 8005b64:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005b66:	1a5b      	subs	r3, r3, r1
 8005b68:	4543      	cmp	r3, r8
 8005b6a:	dcf0      	bgt.n	8005b4e <_printf_float+0x42e>
 8005b6c:	e6fd      	b.n	800596a <_printf_float+0x24a>
 8005b6e:	f04f 0800 	mov.w	r8, #0
 8005b72:	f104 0919 	add.w	r9, r4, #25
 8005b76:	e7f4      	b.n	8005b62 <_printf_float+0x442>

08005b78 <_printf_common>:
 8005b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b7c:	4616      	mov	r6, r2
 8005b7e:	4699      	mov	r9, r3
 8005b80:	688a      	ldr	r2, [r1, #8]
 8005b82:	690b      	ldr	r3, [r1, #16]
 8005b84:	4607      	mov	r7, r0
 8005b86:	4293      	cmp	r3, r2
 8005b88:	bfb8      	it	lt
 8005b8a:	4613      	movlt	r3, r2
 8005b8c:	6033      	str	r3, [r6, #0]
 8005b8e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b92:	460c      	mov	r4, r1
 8005b94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b98:	b10a      	cbz	r2, 8005b9e <_printf_common+0x26>
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	6033      	str	r3, [r6, #0]
 8005b9e:	6823      	ldr	r3, [r4, #0]
 8005ba0:	0699      	lsls	r1, r3, #26
 8005ba2:	bf42      	ittt	mi
 8005ba4:	6833      	ldrmi	r3, [r6, #0]
 8005ba6:	3302      	addmi	r3, #2
 8005ba8:	6033      	strmi	r3, [r6, #0]
 8005baa:	6825      	ldr	r5, [r4, #0]
 8005bac:	f015 0506 	ands.w	r5, r5, #6
 8005bb0:	d106      	bne.n	8005bc0 <_printf_common+0x48>
 8005bb2:	f104 0a19 	add.w	sl, r4, #25
 8005bb6:	68e3      	ldr	r3, [r4, #12]
 8005bb8:	6832      	ldr	r2, [r6, #0]
 8005bba:	1a9b      	subs	r3, r3, r2
 8005bbc:	42ab      	cmp	r3, r5
 8005bbe:	dc28      	bgt.n	8005c12 <_printf_common+0x9a>
 8005bc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005bc4:	1e13      	subs	r3, r2, #0
 8005bc6:	6822      	ldr	r2, [r4, #0]
 8005bc8:	bf18      	it	ne
 8005bca:	2301      	movne	r3, #1
 8005bcc:	0692      	lsls	r2, r2, #26
 8005bce:	d42d      	bmi.n	8005c2c <_printf_common+0xb4>
 8005bd0:	4649      	mov	r1, r9
 8005bd2:	4638      	mov	r0, r7
 8005bd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bd8:	47c0      	blx	r8
 8005bda:	3001      	adds	r0, #1
 8005bdc:	d020      	beq.n	8005c20 <_printf_common+0xa8>
 8005bde:	6823      	ldr	r3, [r4, #0]
 8005be0:	68e5      	ldr	r5, [r4, #12]
 8005be2:	f003 0306 	and.w	r3, r3, #6
 8005be6:	2b04      	cmp	r3, #4
 8005be8:	bf18      	it	ne
 8005bea:	2500      	movne	r5, #0
 8005bec:	6832      	ldr	r2, [r6, #0]
 8005bee:	f04f 0600 	mov.w	r6, #0
 8005bf2:	68a3      	ldr	r3, [r4, #8]
 8005bf4:	bf08      	it	eq
 8005bf6:	1aad      	subeq	r5, r5, r2
 8005bf8:	6922      	ldr	r2, [r4, #16]
 8005bfa:	bf08      	it	eq
 8005bfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c00:	4293      	cmp	r3, r2
 8005c02:	bfc4      	itt	gt
 8005c04:	1a9b      	subgt	r3, r3, r2
 8005c06:	18ed      	addgt	r5, r5, r3
 8005c08:	341a      	adds	r4, #26
 8005c0a:	42b5      	cmp	r5, r6
 8005c0c:	d11a      	bne.n	8005c44 <_printf_common+0xcc>
 8005c0e:	2000      	movs	r0, #0
 8005c10:	e008      	b.n	8005c24 <_printf_common+0xac>
 8005c12:	2301      	movs	r3, #1
 8005c14:	4652      	mov	r2, sl
 8005c16:	4649      	mov	r1, r9
 8005c18:	4638      	mov	r0, r7
 8005c1a:	47c0      	blx	r8
 8005c1c:	3001      	adds	r0, #1
 8005c1e:	d103      	bne.n	8005c28 <_printf_common+0xb0>
 8005c20:	f04f 30ff 	mov.w	r0, #4294967295
 8005c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c28:	3501      	adds	r5, #1
 8005c2a:	e7c4      	b.n	8005bb6 <_printf_common+0x3e>
 8005c2c:	2030      	movs	r0, #48	; 0x30
 8005c2e:	18e1      	adds	r1, r4, r3
 8005c30:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c34:	1c5a      	adds	r2, r3, #1
 8005c36:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c3a:	4422      	add	r2, r4
 8005c3c:	3302      	adds	r3, #2
 8005c3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c42:	e7c5      	b.n	8005bd0 <_printf_common+0x58>
 8005c44:	2301      	movs	r3, #1
 8005c46:	4622      	mov	r2, r4
 8005c48:	4649      	mov	r1, r9
 8005c4a:	4638      	mov	r0, r7
 8005c4c:	47c0      	blx	r8
 8005c4e:	3001      	adds	r0, #1
 8005c50:	d0e6      	beq.n	8005c20 <_printf_common+0xa8>
 8005c52:	3601      	adds	r6, #1
 8005c54:	e7d9      	b.n	8005c0a <_printf_common+0x92>
	...

08005c58 <_printf_i>:
 8005c58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c5c:	7e0f      	ldrb	r7, [r1, #24]
 8005c5e:	4691      	mov	r9, r2
 8005c60:	2f78      	cmp	r7, #120	; 0x78
 8005c62:	4680      	mov	r8, r0
 8005c64:	460c      	mov	r4, r1
 8005c66:	469a      	mov	sl, r3
 8005c68:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c6e:	d807      	bhi.n	8005c80 <_printf_i+0x28>
 8005c70:	2f62      	cmp	r7, #98	; 0x62
 8005c72:	d80a      	bhi.n	8005c8a <_printf_i+0x32>
 8005c74:	2f00      	cmp	r7, #0
 8005c76:	f000 80d9 	beq.w	8005e2c <_printf_i+0x1d4>
 8005c7a:	2f58      	cmp	r7, #88	; 0x58
 8005c7c:	f000 80a4 	beq.w	8005dc8 <_printf_i+0x170>
 8005c80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c88:	e03a      	b.n	8005d00 <_printf_i+0xa8>
 8005c8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c8e:	2b15      	cmp	r3, #21
 8005c90:	d8f6      	bhi.n	8005c80 <_printf_i+0x28>
 8005c92:	a101      	add	r1, pc, #4	; (adr r1, 8005c98 <_printf_i+0x40>)
 8005c94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c98:	08005cf1 	.word	0x08005cf1
 8005c9c:	08005d05 	.word	0x08005d05
 8005ca0:	08005c81 	.word	0x08005c81
 8005ca4:	08005c81 	.word	0x08005c81
 8005ca8:	08005c81 	.word	0x08005c81
 8005cac:	08005c81 	.word	0x08005c81
 8005cb0:	08005d05 	.word	0x08005d05
 8005cb4:	08005c81 	.word	0x08005c81
 8005cb8:	08005c81 	.word	0x08005c81
 8005cbc:	08005c81 	.word	0x08005c81
 8005cc0:	08005c81 	.word	0x08005c81
 8005cc4:	08005e13 	.word	0x08005e13
 8005cc8:	08005d35 	.word	0x08005d35
 8005ccc:	08005df5 	.word	0x08005df5
 8005cd0:	08005c81 	.word	0x08005c81
 8005cd4:	08005c81 	.word	0x08005c81
 8005cd8:	08005e35 	.word	0x08005e35
 8005cdc:	08005c81 	.word	0x08005c81
 8005ce0:	08005d35 	.word	0x08005d35
 8005ce4:	08005c81 	.word	0x08005c81
 8005ce8:	08005c81 	.word	0x08005c81
 8005cec:	08005dfd 	.word	0x08005dfd
 8005cf0:	682b      	ldr	r3, [r5, #0]
 8005cf2:	1d1a      	adds	r2, r3, #4
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	602a      	str	r2, [r5, #0]
 8005cf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d00:	2301      	movs	r3, #1
 8005d02:	e0a4      	b.n	8005e4e <_printf_i+0x1f6>
 8005d04:	6820      	ldr	r0, [r4, #0]
 8005d06:	6829      	ldr	r1, [r5, #0]
 8005d08:	0606      	lsls	r6, r0, #24
 8005d0a:	f101 0304 	add.w	r3, r1, #4
 8005d0e:	d50a      	bpl.n	8005d26 <_printf_i+0xce>
 8005d10:	680e      	ldr	r6, [r1, #0]
 8005d12:	602b      	str	r3, [r5, #0]
 8005d14:	2e00      	cmp	r6, #0
 8005d16:	da03      	bge.n	8005d20 <_printf_i+0xc8>
 8005d18:	232d      	movs	r3, #45	; 0x2d
 8005d1a:	4276      	negs	r6, r6
 8005d1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d20:	230a      	movs	r3, #10
 8005d22:	485e      	ldr	r0, [pc, #376]	; (8005e9c <_printf_i+0x244>)
 8005d24:	e019      	b.n	8005d5a <_printf_i+0x102>
 8005d26:	680e      	ldr	r6, [r1, #0]
 8005d28:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d2c:	602b      	str	r3, [r5, #0]
 8005d2e:	bf18      	it	ne
 8005d30:	b236      	sxthne	r6, r6
 8005d32:	e7ef      	b.n	8005d14 <_printf_i+0xbc>
 8005d34:	682b      	ldr	r3, [r5, #0]
 8005d36:	6820      	ldr	r0, [r4, #0]
 8005d38:	1d19      	adds	r1, r3, #4
 8005d3a:	6029      	str	r1, [r5, #0]
 8005d3c:	0601      	lsls	r1, r0, #24
 8005d3e:	d501      	bpl.n	8005d44 <_printf_i+0xec>
 8005d40:	681e      	ldr	r6, [r3, #0]
 8005d42:	e002      	b.n	8005d4a <_printf_i+0xf2>
 8005d44:	0646      	lsls	r6, r0, #25
 8005d46:	d5fb      	bpl.n	8005d40 <_printf_i+0xe8>
 8005d48:	881e      	ldrh	r6, [r3, #0]
 8005d4a:	2f6f      	cmp	r7, #111	; 0x6f
 8005d4c:	bf0c      	ite	eq
 8005d4e:	2308      	moveq	r3, #8
 8005d50:	230a      	movne	r3, #10
 8005d52:	4852      	ldr	r0, [pc, #328]	; (8005e9c <_printf_i+0x244>)
 8005d54:	2100      	movs	r1, #0
 8005d56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d5a:	6865      	ldr	r5, [r4, #4]
 8005d5c:	2d00      	cmp	r5, #0
 8005d5e:	bfa8      	it	ge
 8005d60:	6821      	ldrge	r1, [r4, #0]
 8005d62:	60a5      	str	r5, [r4, #8]
 8005d64:	bfa4      	itt	ge
 8005d66:	f021 0104 	bicge.w	r1, r1, #4
 8005d6a:	6021      	strge	r1, [r4, #0]
 8005d6c:	b90e      	cbnz	r6, 8005d72 <_printf_i+0x11a>
 8005d6e:	2d00      	cmp	r5, #0
 8005d70:	d04d      	beq.n	8005e0e <_printf_i+0x1b6>
 8005d72:	4615      	mov	r5, r2
 8005d74:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d78:	fb03 6711 	mls	r7, r3, r1, r6
 8005d7c:	5dc7      	ldrb	r7, [r0, r7]
 8005d7e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d82:	4637      	mov	r7, r6
 8005d84:	42bb      	cmp	r3, r7
 8005d86:	460e      	mov	r6, r1
 8005d88:	d9f4      	bls.n	8005d74 <_printf_i+0x11c>
 8005d8a:	2b08      	cmp	r3, #8
 8005d8c:	d10b      	bne.n	8005da6 <_printf_i+0x14e>
 8005d8e:	6823      	ldr	r3, [r4, #0]
 8005d90:	07de      	lsls	r6, r3, #31
 8005d92:	d508      	bpl.n	8005da6 <_printf_i+0x14e>
 8005d94:	6923      	ldr	r3, [r4, #16]
 8005d96:	6861      	ldr	r1, [r4, #4]
 8005d98:	4299      	cmp	r1, r3
 8005d9a:	bfde      	ittt	le
 8005d9c:	2330      	movle	r3, #48	; 0x30
 8005d9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005da2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005da6:	1b52      	subs	r2, r2, r5
 8005da8:	6122      	str	r2, [r4, #16]
 8005daa:	464b      	mov	r3, r9
 8005dac:	4621      	mov	r1, r4
 8005dae:	4640      	mov	r0, r8
 8005db0:	f8cd a000 	str.w	sl, [sp]
 8005db4:	aa03      	add	r2, sp, #12
 8005db6:	f7ff fedf 	bl	8005b78 <_printf_common>
 8005dba:	3001      	adds	r0, #1
 8005dbc:	d14c      	bne.n	8005e58 <_printf_i+0x200>
 8005dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc2:	b004      	add	sp, #16
 8005dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dc8:	4834      	ldr	r0, [pc, #208]	; (8005e9c <_printf_i+0x244>)
 8005dca:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005dce:	6829      	ldr	r1, [r5, #0]
 8005dd0:	6823      	ldr	r3, [r4, #0]
 8005dd2:	f851 6b04 	ldr.w	r6, [r1], #4
 8005dd6:	6029      	str	r1, [r5, #0]
 8005dd8:	061d      	lsls	r5, r3, #24
 8005dda:	d514      	bpl.n	8005e06 <_printf_i+0x1ae>
 8005ddc:	07df      	lsls	r7, r3, #31
 8005dde:	bf44      	itt	mi
 8005de0:	f043 0320 	orrmi.w	r3, r3, #32
 8005de4:	6023      	strmi	r3, [r4, #0]
 8005de6:	b91e      	cbnz	r6, 8005df0 <_printf_i+0x198>
 8005de8:	6823      	ldr	r3, [r4, #0]
 8005dea:	f023 0320 	bic.w	r3, r3, #32
 8005dee:	6023      	str	r3, [r4, #0]
 8005df0:	2310      	movs	r3, #16
 8005df2:	e7af      	b.n	8005d54 <_printf_i+0xfc>
 8005df4:	6823      	ldr	r3, [r4, #0]
 8005df6:	f043 0320 	orr.w	r3, r3, #32
 8005dfa:	6023      	str	r3, [r4, #0]
 8005dfc:	2378      	movs	r3, #120	; 0x78
 8005dfe:	4828      	ldr	r0, [pc, #160]	; (8005ea0 <_printf_i+0x248>)
 8005e00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e04:	e7e3      	b.n	8005dce <_printf_i+0x176>
 8005e06:	0659      	lsls	r1, r3, #25
 8005e08:	bf48      	it	mi
 8005e0a:	b2b6      	uxthmi	r6, r6
 8005e0c:	e7e6      	b.n	8005ddc <_printf_i+0x184>
 8005e0e:	4615      	mov	r5, r2
 8005e10:	e7bb      	b.n	8005d8a <_printf_i+0x132>
 8005e12:	682b      	ldr	r3, [r5, #0]
 8005e14:	6826      	ldr	r6, [r4, #0]
 8005e16:	1d18      	adds	r0, r3, #4
 8005e18:	6961      	ldr	r1, [r4, #20]
 8005e1a:	6028      	str	r0, [r5, #0]
 8005e1c:	0635      	lsls	r5, r6, #24
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	d501      	bpl.n	8005e26 <_printf_i+0x1ce>
 8005e22:	6019      	str	r1, [r3, #0]
 8005e24:	e002      	b.n	8005e2c <_printf_i+0x1d4>
 8005e26:	0670      	lsls	r0, r6, #25
 8005e28:	d5fb      	bpl.n	8005e22 <_printf_i+0x1ca>
 8005e2a:	8019      	strh	r1, [r3, #0]
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	4615      	mov	r5, r2
 8005e30:	6123      	str	r3, [r4, #16]
 8005e32:	e7ba      	b.n	8005daa <_printf_i+0x152>
 8005e34:	682b      	ldr	r3, [r5, #0]
 8005e36:	2100      	movs	r1, #0
 8005e38:	1d1a      	adds	r2, r3, #4
 8005e3a:	602a      	str	r2, [r5, #0]
 8005e3c:	681d      	ldr	r5, [r3, #0]
 8005e3e:	6862      	ldr	r2, [r4, #4]
 8005e40:	4628      	mov	r0, r5
 8005e42:	f000 fed7 	bl	8006bf4 <memchr>
 8005e46:	b108      	cbz	r0, 8005e4c <_printf_i+0x1f4>
 8005e48:	1b40      	subs	r0, r0, r5
 8005e4a:	6060      	str	r0, [r4, #4]
 8005e4c:	6863      	ldr	r3, [r4, #4]
 8005e4e:	6123      	str	r3, [r4, #16]
 8005e50:	2300      	movs	r3, #0
 8005e52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e56:	e7a8      	b.n	8005daa <_printf_i+0x152>
 8005e58:	462a      	mov	r2, r5
 8005e5a:	4649      	mov	r1, r9
 8005e5c:	4640      	mov	r0, r8
 8005e5e:	6923      	ldr	r3, [r4, #16]
 8005e60:	47d0      	blx	sl
 8005e62:	3001      	adds	r0, #1
 8005e64:	d0ab      	beq.n	8005dbe <_printf_i+0x166>
 8005e66:	6823      	ldr	r3, [r4, #0]
 8005e68:	079b      	lsls	r3, r3, #30
 8005e6a:	d413      	bmi.n	8005e94 <_printf_i+0x23c>
 8005e6c:	68e0      	ldr	r0, [r4, #12]
 8005e6e:	9b03      	ldr	r3, [sp, #12]
 8005e70:	4298      	cmp	r0, r3
 8005e72:	bfb8      	it	lt
 8005e74:	4618      	movlt	r0, r3
 8005e76:	e7a4      	b.n	8005dc2 <_printf_i+0x16a>
 8005e78:	2301      	movs	r3, #1
 8005e7a:	4632      	mov	r2, r6
 8005e7c:	4649      	mov	r1, r9
 8005e7e:	4640      	mov	r0, r8
 8005e80:	47d0      	blx	sl
 8005e82:	3001      	adds	r0, #1
 8005e84:	d09b      	beq.n	8005dbe <_printf_i+0x166>
 8005e86:	3501      	adds	r5, #1
 8005e88:	68e3      	ldr	r3, [r4, #12]
 8005e8a:	9903      	ldr	r1, [sp, #12]
 8005e8c:	1a5b      	subs	r3, r3, r1
 8005e8e:	42ab      	cmp	r3, r5
 8005e90:	dcf2      	bgt.n	8005e78 <_printf_i+0x220>
 8005e92:	e7eb      	b.n	8005e6c <_printf_i+0x214>
 8005e94:	2500      	movs	r5, #0
 8005e96:	f104 0619 	add.w	r6, r4, #25
 8005e9a:	e7f5      	b.n	8005e88 <_printf_i+0x230>
 8005e9c:	08009f0a 	.word	0x08009f0a
 8005ea0:	08009f1b 	.word	0x08009f1b

08005ea4 <siprintf>:
 8005ea4:	b40e      	push	{r1, r2, r3}
 8005ea6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005eaa:	b500      	push	{lr}
 8005eac:	b09c      	sub	sp, #112	; 0x70
 8005eae:	ab1d      	add	r3, sp, #116	; 0x74
 8005eb0:	9002      	str	r0, [sp, #8]
 8005eb2:	9006      	str	r0, [sp, #24]
 8005eb4:	9107      	str	r1, [sp, #28]
 8005eb6:	9104      	str	r1, [sp, #16]
 8005eb8:	4808      	ldr	r0, [pc, #32]	; (8005edc <siprintf+0x38>)
 8005eba:	4909      	ldr	r1, [pc, #36]	; (8005ee0 <siprintf+0x3c>)
 8005ebc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ec0:	9105      	str	r1, [sp, #20]
 8005ec2:	6800      	ldr	r0, [r0, #0]
 8005ec4:	a902      	add	r1, sp, #8
 8005ec6:	9301      	str	r3, [sp, #4]
 8005ec8:	f001 fb7e 	bl	80075c8 <_svfiprintf_r>
 8005ecc:	2200      	movs	r2, #0
 8005ece:	9b02      	ldr	r3, [sp, #8]
 8005ed0:	701a      	strb	r2, [r3, #0]
 8005ed2:	b01c      	add	sp, #112	; 0x70
 8005ed4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ed8:	b003      	add	sp, #12
 8005eda:	4770      	bx	lr
 8005edc:	2000001c 	.word	0x2000001c
 8005ee0:	ffff0208 	.word	0xffff0208

08005ee4 <quorem>:
 8005ee4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ee8:	6903      	ldr	r3, [r0, #16]
 8005eea:	690c      	ldr	r4, [r1, #16]
 8005eec:	4607      	mov	r7, r0
 8005eee:	42a3      	cmp	r3, r4
 8005ef0:	f2c0 8082 	blt.w	8005ff8 <quorem+0x114>
 8005ef4:	3c01      	subs	r4, #1
 8005ef6:	f100 0514 	add.w	r5, r0, #20
 8005efa:	f101 0814 	add.w	r8, r1, #20
 8005efe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f02:	9301      	str	r3, [sp, #4]
 8005f04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005f08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	fbb2 f6f3 	udiv	r6, r2, r3
 8005f14:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005f18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005f1c:	d331      	bcc.n	8005f82 <quorem+0x9e>
 8005f1e:	f04f 0e00 	mov.w	lr, #0
 8005f22:	4640      	mov	r0, r8
 8005f24:	46ac      	mov	ip, r5
 8005f26:	46f2      	mov	sl, lr
 8005f28:	f850 2b04 	ldr.w	r2, [r0], #4
 8005f2c:	b293      	uxth	r3, r2
 8005f2e:	fb06 e303 	mla	r3, r6, r3, lr
 8005f32:	0c12      	lsrs	r2, r2, #16
 8005f34:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	fb06 e202 	mla	r2, r6, r2, lr
 8005f3e:	ebaa 0303 	sub.w	r3, sl, r3
 8005f42:	f8dc a000 	ldr.w	sl, [ip]
 8005f46:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005f4a:	fa1f fa8a 	uxth.w	sl, sl
 8005f4e:	4453      	add	r3, sl
 8005f50:	f8dc a000 	ldr.w	sl, [ip]
 8005f54:	b292      	uxth	r2, r2
 8005f56:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005f5a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f64:	4581      	cmp	r9, r0
 8005f66:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005f6a:	f84c 3b04 	str.w	r3, [ip], #4
 8005f6e:	d2db      	bcs.n	8005f28 <quorem+0x44>
 8005f70:	f855 300b 	ldr.w	r3, [r5, fp]
 8005f74:	b92b      	cbnz	r3, 8005f82 <quorem+0x9e>
 8005f76:	9b01      	ldr	r3, [sp, #4]
 8005f78:	3b04      	subs	r3, #4
 8005f7a:	429d      	cmp	r5, r3
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	d32f      	bcc.n	8005fe0 <quorem+0xfc>
 8005f80:	613c      	str	r4, [r7, #16]
 8005f82:	4638      	mov	r0, r7
 8005f84:	f001 f8d0 	bl	8007128 <__mcmp>
 8005f88:	2800      	cmp	r0, #0
 8005f8a:	db25      	blt.n	8005fd8 <quorem+0xf4>
 8005f8c:	4628      	mov	r0, r5
 8005f8e:	f04f 0c00 	mov.w	ip, #0
 8005f92:	3601      	adds	r6, #1
 8005f94:	f858 1b04 	ldr.w	r1, [r8], #4
 8005f98:	f8d0 e000 	ldr.w	lr, [r0]
 8005f9c:	b28b      	uxth	r3, r1
 8005f9e:	ebac 0303 	sub.w	r3, ip, r3
 8005fa2:	fa1f f28e 	uxth.w	r2, lr
 8005fa6:	4413      	add	r3, r2
 8005fa8:	0c0a      	lsrs	r2, r1, #16
 8005faa:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005fae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fb8:	45c1      	cmp	r9, r8
 8005fba:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005fbe:	f840 3b04 	str.w	r3, [r0], #4
 8005fc2:	d2e7      	bcs.n	8005f94 <quorem+0xb0>
 8005fc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005fc8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005fcc:	b922      	cbnz	r2, 8005fd8 <quorem+0xf4>
 8005fce:	3b04      	subs	r3, #4
 8005fd0:	429d      	cmp	r5, r3
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	d30a      	bcc.n	8005fec <quorem+0x108>
 8005fd6:	613c      	str	r4, [r7, #16]
 8005fd8:	4630      	mov	r0, r6
 8005fda:	b003      	add	sp, #12
 8005fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fe0:	6812      	ldr	r2, [r2, #0]
 8005fe2:	3b04      	subs	r3, #4
 8005fe4:	2a00      	cmp	r2, #0
 8005fe6:	d1cb      	bne.n	8005f80 <quorem+0x9c>
 8005fe8:	3c01      	subs	r4, #1
 8005fea:	e7c6      	b.n	8005f7a <quorem+0x96>
 8005fec:	6812      	ldr	r2, [r2, #0]
 8005fee:	3b04      	subs	r3, #4
 8005ff0:	2a00      	cmp	r2, #0
 8005ff2:	d1f0      	bne.n	8005fd6 <quorem+0xf2>
 8005ff4:	3c01      	subs	r4, #1
 8005ff6:	e7eb      	b.n	8005fd0 <quorem+0xec>
 8005ff8:	2000      	movs	r0, #0
 8005ffa:	e7ee      	b.n	8005fda <quorem+0xf6>
 8005ffc:	0000      	movs	r0, r0
	...

08006000 <_dtoa_r>:
 8006000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006004:	4616      	mov	r6, r2
 8006006:	461f      	mov	r7, r3
 8006008:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800600a:	b099      	sub	sp, #100	; 0x64
 800600c:	4605      	mov	r5, r0
 800600e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006012:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006016:	b974      	cbnz	r4, 8006036 <_dtoa_r+0x36>
 8006018:	2010      	movs	r0, #16
 800601a:	f000 fde3 	bl	8006be4 <malloc>
 800601e:	4602      	mov	r2, r0
 8006020:	6268      	str	r0, [r5, #36]	; 0x24
 8006022:	b920      	cbnz	r0, 800602e <_dtoa_r+0x2e>
 8006024:	21ea      	movs	r1, #234	; 0xea
 8006026:	4ba8      	ldr	r3, [pc, #672]	; (80062c8 <_dtoa_r+0x2c8>)
 8006028:	48a8      	ldr	r0, [pc, #672]	; (80062cc <_dtoa_r+0x2cc>)
 800602a:	f001 fbdd 	bl	80077e8 <__assert_func>
 800602e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006032:	6004      	str	r4, [r0, #0]
 8006034:	60c4      	str	r4, [r0, #12]
 8006036:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006038:	6819      	ldr	r1, [r3, #0]
 800603a:	b151      	cbz	r1, 8006052 <_dtoa_r+0x52>
 800603c:	685a      	ldr	r2, [r3, #4]
 800603e:	2301      	movs	r3, #1
 8006040:	4093      	lsls	r3, r2
 8006042:	604a      	str	r2, [r1, #4]
 8006044:	608b      	str	r3, [r1, #8]
 8006046:	4628      	mov	r0, r5
 8006048:	f000 fe30 	bl	8006cac <_Bfree>
 800604c:	2200      	movs	r2, #0
 800604e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006050:	601a      	str	r2, [r3, #0]
 8006052:	1e3b      	subs	r3, r7, #0
 8006054:	bfaf      	iteee	ge
 8006056:	2300      	movge	r3, #0
 8006058:	2201      	movlt	r2, #1
 800605a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800605e:	9305      	strlt	r3, [sp, #20]
 8006060:	bfa8      	it	ge
 8006062:	f8c8 3000 	strge.w	r3, [r8]
 8006066:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800606a:	4b99      	ldr	r3, [pc, #612]	; (80062d0 <_dtoa_r+0x2d0>)
 800606c:	bfb8      	it	lt
 800606e:	f8c8 2000 	strlt.w	r2, [r8]
 8006072:	ea33 0309 	bics.w	r3, r3, r9
 8006076:	d119      	bne.n	80060ac <_dtoa_r+0xac>
 8006078:	f242 730f 	movw	r3, #9999	; 0x270f
 800607c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800607e:	6013      	str	r3, [r2, #0]
 8006080:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006084:	4333      	orrs	r3, r6
 8006086:	f000 857f 	beq.w	8006b88 <_dtoa_r+0xb88>
 800608a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800608c:	b953      	cbnz	r3, 80060a4 <_dtoa_r+0xa4>
 800608e:	4b91      	ldr	r3, [pc, #580]	; (80062d4 <_dtoa_r+0x2d4>)
 8006090:	e022      	b.n	80060d8 <_dtoa_r+0xd8>
 8006092:	4b91      	ldr	r3, [pc, #580]	; (80062d8 <_dtoa_r+0x2d8>)
 8006094:	9303      	str	r3, [sp, #12]
 8006096:	3308      	adds	r3, #8
 8006098:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800609a:	6013      	str	r3, [r2, #0]
 800609c:	9803      	ldr	r0, [sp, #12]
 800609e:	b019      	add	sp, #100	; 0x64
 80060a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060a4:	4b8b      	ldr	r3, [pc, #556]	; (80062d4 <_dtoa_r+0x2d4>)
 80060a6:	9303      	str	r3, [sp, #12]
 80060a8:	3303      	adds	r3, #3
 80060aa:	e7f5      	b.n	8006098 <_dtoa_r+0x98>
 80060ac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80060b0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80060b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80060b8:	2200      	movs	r2, #0
 80060ba:	2300      	movs	r3, #0
 80060bc:	f7fa fc74 	bl	80009a8 <__aeabi_dcmpeq>
 80060c0:	4680      	mov	r8, r0
 80060c2:	b158      	cbz	r0, 80060dc <_dtoa_r+0xdc>
 80060c4:	2301      	movs	r3, #1
 80060c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80060c8:	6013      	str	r3, [r2, #0]
 80060ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f000 8558 	beq.w	8006b82 <_dtoa_r+0xb82>
 80060d2:	4882      	ldr	r0, [pc, #520]	; (80062dc <_dtoa_r+0x2dc>)
 80060d4:	6018      	str	r0, [r3, #0]
 80060d6:	1e43      	subs	r3, r0, #1
 80060d8:	9303      	str	r3, [sp, #12]
 80060da:	e7df      	b.n	800609c <_dtoa_r+0x9c>
 80060dc:	ab16      	add	r3, sp, #88	; 0x58
 80060de:	9301      	str	r3, [sp, #4]
 80060e0:	ab17      	add	r3, sp, #92	; 0x5c
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	4628      	mov	r0, r5
 80060e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80060ea:	f001 f8c5 	bl	8007278 <__d2b>
 80060ee:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80060f2:	4683      	mov	fp, r0
 80060f4:	2c00      	cmp	r4, #0
 80060f6:	d07f      	beq.n	80061f8 <_dtoa_r+0x1f8>
 80060f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80060fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060fe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006102:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006106:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800610a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800610e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006112:	2200      	movs	r2, #0
 8006114:	4b72      	ldr	r3, [pc, #456]	; (80062e0 <_dtoa_r+0x2e0>)
 8006116:	f7fa f827 	bl	8000168 <__aeabi_dsub>
 800611a:	a365      	add	r3, pc, #404	; (adr r3, 80062b0 <_dtoa_r+0x2b0>)
 800611c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006120:	f7fa f9da 	bl	80004d8 <__aeabi_dmul>
 8006124:	a364      	add	r3, pc, #400	; (adr r3, 80062b8 <_dtoa_r+0x2b8>)
 8006126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612a:	f7fa f81f 	bl	800016c <__adddf3>
 800612e:	4606      	mov	r6, r0
 8006130:	4620      	mov	r0, r4
 8006132:	460f      	mov	r7, r1
 8006134:	f7fa f966 	bl	8000404 <__aeabi_i2d>
 8006138:	a361      	add	r3, pc, #388	; (adr r3, 80062c0 <_dtoa_r+0x2c0>)
 800613a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613e:	f7fa f9cb 	bl	80004d8 <__aeabi_dmul>
 8006142:	4602      	mov	r2, r0
 8006144:	460b      	mov	r3, r1
 8006146:	4630      	mov	r0, r6
 8006148:	4639      	mov	r1, r7
 800614a:	f7fa f80f 	bl	800016c <__adddf3>
 800614e:	4606      	mov	r6, r0
 8006150:	460f      	mov	r7, r1
 8006152:	f7fa fc71 	bl	8000a38 <__aeabi_d2iz>
 8006156:	2200      	movs	r2, #0
 8006158:	4682      	mov	sl, r0
 800615a:	2300      	movs	r3, #0
 800615c:	4630      	mov	r0, r6
 800615e:	4639      	mov	r1, r7
 8006160:	f7fa fc2c 	bl	80009bc <__aeabi_dcmplt>
 8006164:	b148      	cbz	r0, 800617a <_dtoa_r+0x17a>
 8006166:	4650      	mov	r0, sl
 8006168:	f7fa f94c 	bl	8000404 <__aeabi_i2d>
 800616c:	4632      	mov	r2, r6
 800616e:	463b      	mov	r3, r7
 8006170:	f7fa fc1a 	bl	80009a8 <__aeabi_dcmpeq>
 8006174:	b908      	cbnz	r0, 800617a <_dtoa_r+0x17a>
 8006176:	f10a 3aff 	add.w	sl, sl, #4294967295
 800617a:	f1ba 0f16 	cmp.w	sl, #22
 800617e:	d858      	bhi.n	8006232 <_dtoa_r+0x232>
 8006180:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006184:	4b57      	ldr	r3, [pc, #348]	; (80062e4 <_dtoa_r+0x2e4>)
 8006186:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800618a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618e:	f7fa fc15 	bl	80009bc <__aeabi_dcmplt>
 8006192:	2800      	cmp	r0, #0
 8006194:	d04f      	beq.n	8006236 <_dtoa_r+0x236>
 8006196:	2300      	movs	r3, #0
 8006198:	f10a 3aff 	add.w	sl, sl, #4294967295
 800619c:	930f      	str	r3, [sp, #60]	; 0x3c
 800619e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80061a0:	1b1c      	subs	r4, r3, r4
 80061a2:	1e63      	subs	r3, r4, #1
 80061a4:	9309      	str	r3, [sp, #36]	; 0x24
 80061a6:	bf49      	itett	mi
 80061a8:	f1c4 0301 	rsbmi	r3, r4, #1
 80061ac:	2300      	movpl	r3, #0
 80061ae:	9306      	strmi	r3, [sp, #24]
 80061b0:	2300      	movmi	r3, #0
 80061b2:	bf54      	ite	pl
 80061b4:	9306      	strpl	r3, [sp, #24]
 80061b6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80061b8:	f1ba 0f00 	cmp.w	sl, #0
 80061bc:	db3d      	blt.n	800623a <_dtoa_r+0x23a>
 80061be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061c0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80061c4:	4453      	add	r3, sl
 80061c6:	9309      	str	r3, [sp, #36]	; 0x24
 80061c8:	2300      	movs	r3, #0
 80061ca:	930a      	str	r3, [sp, #40]	; 0x28
 80061cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061ce:	2b09      	cmp	r3, #9
 80061d0:	f200 808c 	bhi.w	80062ec <_dtoa_r+0x2ec>
 80061d4:	2b05      	cmp	r3, #5
 80061d6:	bfc4      	itt	gt
 80061d8:	3b04      	subgt	r3, #4
 80061da:	9322      	strgt	r3, [sp, #136]	; 0x88
 80061dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061de:	bfc8      	it	gt
 80061e0:	2400      	movgt	r4, #0
 80061e2:	f1a3 0302 	sub.w	r3, r3, #2
 80061e6:	bfd8      	it	le
 80061e8:	2401      	movle	r4, #1
 80061ea:	2b03      	cmp	r3, #3
 80061ec:	f200 808a 	bhi.w	8006304 <_dtoa_r+0x304>
 80061f0:	e8df f003 	tbb	[pc, r3]
 80061f4:	5b4d4f2d 	.word	0x5b4d4f2d
 80061f8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80061fc:	441c      	add	r4, r3
 80061fe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006202:	2b20      	cmp	r3, #32
 8006204:	bfc3      	ittte	gt
 8006206:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800620a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800620e:	fa09 f303 	lslgt.w	r3, r9, r3
 8006212:	f1c3 0320 	rsble	r3, r3, #32
 8006216:	bfc6      	itte	gt
 8006218:	fa26 f000 	lsrgt.w	r0, r6, r0
 800621c:	4318      	orrgt	r0, r3
 800621e:	fa06 f003 	lslle.w	r0, r6, r3
 8006222:	f7fa f8df 	bl	80003e4 <__aeabi_ui2d>
 8006226:	2301      	movs	r3, #1
 8006228:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800622c:	3c01      	subs	r4, #1
 800622e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006230:	e76f      	b.n	8006112 <_dtoa_r+0x112>
 8006232:	2301      	movs	r3, #1
 8006234:	e7b2      	b.n	800619c <_dtoa_r+0x19c>
 8006236:	900f      	str	r0, [sp, #60]	; 0x3c
 8006238:	e7b1      	b.n	800619e <_dtoa_r+0x19e>
 800623a:	9b06      	ldr	r3, [sp, #24]
 800623c:	eba3 030a 	sub.w	r3, r3, sl
 8006240:	9306      	str	r3, [sp, #24]
 8006242:	f1ca 0300 	rsb	r3, sl, #0
 8006246:	930a      	str	r3, [sp, #40]	; 0x28
 8006248:	2300      	movs	r3, #0
 800624a:	930e      	str	r3, [sp, #56]	; 0x38
 800624c:	e7be      	b.n	80061cc <_dtoa_r+0x1cc>
 800624e:	2300      	movs	r3, #0
 8006250:	930b      	str	r3, [sp, #44]	; 0x2c
 8006252:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006254:	2b00      	cmp	r3, #0
 8006256:	dc58      	bgt.n	800630a <_dtoa_r+0x30a>
 8006258:	f04f 0901 	mov.w	r9, #1
 800625c:	464b      	mov	r3, r9
 800625e:	f8cd 9020 	str.w	r9, [sp, #32]
 8006262:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006266:	2200      	movs	r2, #0
 8006268:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800626a:	6042      	str	r2, [r0, #4]
 800626c:	2204      	movs	r2, #4
 800626e:	f102 0614 	add.w	r6, r2, #20
 8006272:	429e      	cmp	r6, r3
 8006274:	6841      	ldr	r1, [r0, #4]
 8006276:	d94e      	bls.n	8006316 <_dtoa_r+0x316>
 8006278:	4628      	mov	r0, r5
 800627a:	f000 fcd7 	bl	8006c2c <_Balloc>
 800627e:	9003      	str	r0, [sp, #12]
 8006280:	2800      	cmp	r0, #0
 8006282:	d14c      	bne.n	800631e <_dtoa_r+0x31e>
 8006284:	4602      	mov	r2, r0
 8006286:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800628a:	4b17      	ldr	r3, [pc, #92]	; (80062e8 <_dtoa_r+0x2e8>)
 800628c:	e6cc      	b.n	8006028 <_dtoa_r+0x28>
 800628e:	2301      	movs	r3, #1
 8006290:	e7de      	b.n	8006250 <_dtoa_r+0x250>
 8006292:	2300      	movs	r3, #0
 8006294:	930b      	str	r3, [sp, #44]	; 0x2c
 8006296:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006298:	eb0a 0903 	add.w	r9, sl, r3
 800629c:	f109 0301 	add.w	r3, r9, #1
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	9308      	str	r3, [sp, #32]
 80062a4:	bfb8      	it	lt
 80062a6:	2301      	movlt	r3, #1
 80062a8:	e7dd      	b.n	8006266 <_dtoa_r+0x266>
 80062aa:	2301      	movs	r3, #1
 80062ac:	e7f2      	b.n	8006294 <_dtoa_r+0x294>
 80062ae:	bf00      	nop
 80062b0:	636f4361 	.word	0x636f4361
 80062b4:	3fd287a7 	.word	0x3fd287a7
 80062b8:	8b60c8b3 	.word	0x8b60c8b3
 80062bc:	3fc68a28 	.word	0x3fc68a28
 80062c0:	509f79fb 	.word	0x509f79fb
 80062c4:	3fd34413 	.word	0x3fd34413
 80062c8:	08009f39 	.word	0x08009f39
 80062cc:	08009f50 	.word	0x08009f50
 80062d0:	7ff00000 	.word	0x7ff00000
 80062d4:	08009f35 	.word	0x08009f35
 80062d8:	08009f2c 	.word	0x08009f2c
 80062dc:	08009f09 	.word	0x08009f09
 80062e0:	3ff80000 	.word	0x3ff80000
 80062e4:	0800a040 	.word	0x0800a040
 80062e8:	08009fab 	.word	0x08009fab
 80062ec:	2401      	movs	r4, #1
 80062ee:	2300      	movs	r3, #0
 80062f0:	940b      	str	r4, [sp, #44]	; 0x2c
 80062f2:	9322      	str	r3, [sp, #136]	; 0x88
 80062f4:	f04f 39ff 	mov.w	r9, #4294967295
 80062f8:	2200      	movs	r2, #0
 80062fa:	2312      	movs	r3, #18
 80062fc:	f8cd 9020 	str.w	r9, [sp, #32]
 8006300:	9223      	str	r2, [sp, #140]	; 0x8c
 8006302:	e7b0      	b.n	8006266 <_dtoa_r+0x266>
 8006304:	2301      	movs	r3, #1
 8006306:	930b      	str	r3, [sp, #44]	; 0x2c
 8006308:	e7f4      	b.n	80062f4 <_dtoa_r+0x2f4>
 800630a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800630e:	464b      	mov	r3, r9
 8006310:	f8cd 9020 	str.w	r9, [sp, #32]
 8006314:	e7a7      	b.n	8006266 <_dtoa_r+0x266>
 8006316:	3101      	adds	r1, #1
 8006318:	6041      	str	r1, [r0, #4]
 800631a:	0052      	lsls	r2, r2, #1
 800631c:	e7a7      	b.n	800626e <_dtoa_r+0x26e>
 800631e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006320:	9a03      	ldr	r2, [sp, #12]
 8006322:	601a      	str	r2, [r3, #0]
 8006324:	9b08      	ldr	r3, [sp, #32]
 8006326:	2b0e      	cmp	r3, #14
 8006328:	f200 80a8 	bhi.w	800647c <_dtoa_r+0x47c>
 800632c:	2c00      	cmp	r4, #0
 800632e:	f000 80a5 	beq.w	800647c <_dtoa_r+0x47c>
 8006332:	f1ba 0f00 	cmp.w	sl, #0
 8006336:	dd34      	ble.n	80063a2 <_dtoa_r+0x3a2>
 8006338:	4a9a      	ldr	r2, [pc, #616]	; (80065a4 <_dtoa_r+0x5a4>)
 800633a:	f00a 030f 	and.w	r3, sl, #15
 800633e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006342:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006346:	e9d3 3400 	ldrd	r3, r4, [r3]
 800634a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800634e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006352:	d016      	beq.n	8006382 <_dtoa_r+0x382>
 8006354:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006358:	4b93      	ldr	r3, [pc, #588]	; (80065a8 <_dtoa_r+0x5a8>)
 800635a:	2703      	movs	r7, #3
 800635c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006360:	f7fa f9e4 	bl	800072c <__aeabi_ddiv>
 8006364:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006368:	f004 040f 	and.w	r4, r4, #15
 800636c:	4e8e      	ldr	r6, [pc, #568]	; (80065a8 <_dtoa_r+0x5a8>)
 800636e:	b954      	cbnz	r4, 8006386 <_dtoa_r+0x386>
 8006370:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006374:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006378:	f7fa f9d8 	bl	800072c <__aeabi_ddiv>
 800637c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006380:	e029      	b.n	80063d6 <_dtoa_r+0x3d6>
 8006382:	2702      	movs	r7, #2
 8006384:	e7f2      	b.n	800636c <_dtoa_r+0x36c>
 8006386:	07e1      	lsls	r1, r4, #31
 8006388:	d508      	bpl.n	800639c <_dtoa_r+0x39c>
 800638a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800638e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006392:	f7fa f8a1 	bl	80004d8 <__aeabi_dmul>
 8006396:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800639a:	3701      	adds	r7, #1
 800639c:	1064      	asrs	r4, r4, #1
 800639e:	3608      	adds	r6, #8
 80063a0:	e7e5      	b.n	800636e <_dtoa_r+0x36e>
 80063a2:	f000 80a5 	beq.w	80064f0 <_dtoa_r+0x4f0>
 80063a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80063aa:	f1ca 0400 	rsb	r4, sl, #0
 80063ae:	4b7d      	ldr	r3, [pc, #500]	; (80065a4 <_dtoa_r+0x5a4>)
 80063b0:	f004 020f 	and.w	r2, r4, #15
 80063b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063bc:	f7fa f88c 	bl	80004d8 <__aeabi_dmul>
 80063c0:	2702      	movs	r7, #2
 80063c2:	2300      	movs	r3, #0
 80063c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80063c8:	4e77      	ldr	r6, [pc, #476]	; (80065a8 <_dtoa_r+0x5a8>)
 80063ca:	1124      	asrs	r4, r4, #4
 80063cc:	2c00      	cmp	r4, #0
 80063ce:	f040 8084 	bne.w	80064da <_dtoa_r+0x4da>
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1d2      	bne.n	800637c <_dtoa_r+0x37c>
 80063d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 808b 	beq.w	80064f4 <_dtoa_r+0x4f4>
 80063de:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80063e2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80063e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80063ea:	2200      	movs	r2, #0
 80063ec:	4b6f      	ldr	r3, [pc, #444]	; (80065ac <_dtoa_r+0x5ac>)
 80063ee:	f7fa fae5 	bl	80009bc <__aeabi_dcmplt>
 80063f2:	2800      	cmp	r0, #0
 80063f4:	d07e      	beq.n	80064f4 <_dtoa_r+0x4f4>
 80063f6:	9b08      	ldr	r3, [sp, #32]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d07b      	beq.n	80064f4 <_dtoa_r+0x4f4>
 80063fc:	f1b9 0f00 	cmp.w	r9, #0
 8006400:	dd38      	ble.n	8006474 <_dtoa_r+0x474>
 8006402:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006406:	2200      	movs	r2, #0
 8006408:	4b69      	ldr	r3, [pc, #420]	; (80065b0 <_dtoa_r+0x5b0>)
 800640a:	f7fa f865 	bl	80004d8 <__aeabi_dmul>
 800640e:	464c      	mov	r4, r9
 8006410:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006414:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006418:	3701      	adds	r7, #1
 800641a:	4638      	mov	r0, r7
 800641c:	f7f9 fff2 	bl	8000404 <__aeabi_i2d>
 8006420:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006424:	f7fa f858 	bl	80004d8 <__aeabi_dmul>
 8006428:	2200      	movs	r2, #0
 800642a:	4b62      	ldr	r3, [pc, #392]	; (80065b4 <_dtoa_r+0x5b4>)
 800642c:	f7f9 fe9e 	bl	800016c <__adddf3>
 8006430:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006434:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006438:	9611      	str	r6, [sp, #68]	; 0x44
 800643a:	2c00      	cmp	r4, #0
 800643c:	d15d      	bne.n	80064fa <_dtoa_r+0x4fa>
 800643e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006442:	2200      	movs	r2, #0
 8006444:	4b5c      	ldr	r3, [pc, #368]	; (80065b8 <_dtoa_r+0x5b8>)
 8006446:	f7f9 fe8f 	bl	8000168 <__aeabi_dsub>
 800644a:	4602      	mov	r2, r0
 800644c:	460b      	mov	r3, r1
 800644e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006452:	4633      	mov	r3, r6
 8006454:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006456:	f7fa facf 	bl	80009f8 <__aeabi_dcmpgt>
 800645a:	2800      	cmp	r0, #0
 800645c:	f040 829c 	bne.w	8006998 <_dtoa_r+0x998>
 8006460:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006464:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006466:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800646a:	f7fa faa7 	bl	80009bc <__aeabi_dcmplt>
 800646e:	2800      	cmp	r0, #0
 8006470:	f040 8290 	bne.w	8006994 <_dtoa_r+0x994>
 8006474:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006478:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800647c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800647e:	2b00      	cmp	r3, #0
 8006480:	f2c0 8152 	blt.w	8006728 <_dtoa_r+0x728>
 8006484:	f1ba 0f0e 	cmp.w	sl, #14
 8006488:	f300 814e 	bgt.w	8006728 <_dtoa_r+0x728>
 800648c:	4b45      	ldr	r3, [pc, #276]	; (80065a4 <_dtoa_r+0x5a4>)
 800648e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006492:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006496:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800649a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800649c:	2b00      	cmp	r3, #0
 800649e:	f280 80db 	bge.w	8006658 <_dtoa_r+0x658>
 80064a2:	9b08      	ldr	r3, [sp, #32]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	f300 80d7 	bgt.w	8006658 <_dtoa_r+0x658>
 80064aa:	f040 8272 	bne.w	8006992 <_dtoa_r+0x992>
 80064ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064b2:	2200      	movs	r2, #0
 80064b4:	4b40      	ldr	r3, [pc, #256]	; (80065b8 <_dtoa_r+0x5b8>)
 80064b6:	f7fa f80f 	bl	80004d8 <__aeabi_dmul>
 80064ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064be:	f7fa fa91 	bl	80009e4 <__aeabi_dcmpge>
 80064c2:	9c08      	ldr	r4, [sp, #32]
 80064c4:	4626      	mov	r6, r4
 80064c6:	2800      	cmp	r0, #0
 80064c8:	f040 8248 	bne.w	800695c <_dtoa_r+0x95c>
 80064cc:	2331      	movs	r3, #49	; 0x31
 80064ce:	9f03      	ldr	r7, [sp, #12]
 80064d0:	f10a 0a01 	add.w	sl, sl, #1
 80064d4:	f807 3b01 	strb.w	r3, [r7], #1
 80064d8:	e244      	b.n	8006964 <_dtoa_r+0x964>
 80064da:	07e2      	lsls	r2, r4, #31
 80064dc:	d505      	bpl.n	80064ea <_dtoa_r+0x4ea>
 80064de:	e9d6 2300 	ldrd	r2, r3, [r6]
 80064e2:	f7f9 fff9 	bl	80004d8 <__aeabi_dmul>
 80064e6:	2301      	movs	r3, #1
 80064e8:	3701      	adds	r7, #1
 80064ea:	1064      	asrs	r4, r4, #1
 80064ec:	3608      	adds	r6, #8
 80064ee:	e76d      	b.n	80063cc <_dtoa_r+0x3cc>
 80064f0:	2702      	movs	r7, #2
 80064f2:	e770      	b.n	80063d6 <_dtoa_r+0x3d6>
 80064f4:	46d0      	mov	r8, sl
 80064f6:	9c08      	ldr	r4, [sp, #32]
 80064f8:	e78f      	b.n	800641a <_dtoa_r+0x41a>
 80064fa:	9903      	ldr	r1, [sp, #12]
 80064fc:	4b29      	ldr	r3, [pc, #164]	; (80065a4 <_dtoa_r+0x5a4>)
 80064fe:	4421      	add	r1, r4
 8006500:	9112      	str	r1, [sp, #72]	; 0x48
 8006502:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006504:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006508:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800650c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006510:	2900      	cmp	r1, #0
 8006512:	d055      	beq.n	80065c0 <_dtoa_r+0x5c0>
 8006514:	2000      	movs	r0, #0
 8006516:	4929      	ldr	r1, [pc, #164]	; (80065bc <_dtoa_r+0x5bc>)
 8006518:	f7fa f908 	bl	800072c <__aeabi_ddiv>
 800651c:	463b      	mov	r3, r7
 800651e:	4632      	mov	r2, r6
 8006520:	f7f9 fe22 	bl	8000168 <__aeabi_dsub>
 8006524:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006528:	9f03      	ldr	r7, [sp, #12]
 800652a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800652e:	f7fa fa83 	bl	8000a38 <__aeabi_d2iz>
 8006532:	4604      	mov	r4, r0
 8006534:	f7f9 ff66 	bl	8000404 <__aeabi_i2d>
 8006538:	4602      	mov	r2, r0
 800653a:	460b      	mov	r3, r1
 800653c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006540:	f7f9 fe12 	bl	8000168 <__aeabi_dsub>
 8006544:	4602      	mov	r2, r0
 8006546:	460b      	mov	r3, r1
 8006548:	3430      	adds	r4, #48	; 0x30
 800654a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800654e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006552:	f807 4b01 	strb.w	r4, [r7], #1
 8006556:	f7fa fa31 	bl	80009bc <__aeabi_dcmplt>
 800655a:	2800      	cmp	r0, #0
 800655c:	d174      	bne.n	8006648 <_dtoa_r+0x648>
 800655e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006562:	2000      	movs	r0, #0
 8006564:	4911      	ldr	r1, [pc, #68]	; (80065ac <_dtoa_r+0x5ac>)
 8006566:	f7f9 fdff 	bl	8000168 <__aeabi_dsub>
 800656a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800656e:	f7fa fa25 	bl	80009bc <__aeabi_dcmplt>
 8006572:	2800      	cmp	r0, #0
 8006574:	f040 80b7 	bne.w	80066e6 <_dtoa_r+0x6e6>
 8006578:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800657a:	429f      	cmp	r7, r3
 800657c:	f43f af7a 	beq.w	8006474 <_dtoa_r+0x474>
 8006580:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006584:	2200      	movs	r2, #0
 8006586:	4b0a      	ldr	r3, [pc, #40]	; (80065b0 <_dtoa_r+0x5b0>)
 8006588:	f7f9 ffa6 	bl	80004d8 <__aeabi_dmul>
 800658c:	2200      	movs	r2, #0
 800658e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006592:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006596:	4b06      	ldr	r3, [pc, #24]	; (80065b0 <_dtoa_r+0x5b0>)
 8006598:	f7f9 ff9e 	bl	80004d8 <__aeabi_dmul>
 800659c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065a0:	e7c3      	b.n	800652a <_dtoa_r+0x52a>
 80065a2:	bf00      	nop
 80065a4:	0800a040 	.word	0x0800a040
 80065a8:	0800a018 	.word	0x0800a018
 80065ac:	3ff00000 	.word	0x3ff00000
 80065b0:	40240000 	.word	0x40240000
 80065b4:	401c0000 	.word	0x401c0000
 80065b8:	40140000 	.word	0x40140000
 80065bc:	3fe00000 	.word	0x3fe00000
 80065c0:	4630      	mov	r0, r6
 80065c2:	4639      	mov	r1, r7
 80065c4:	f7f9 ff88 	bl	80004d8 <__aeabi_dmul>
 80065c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80065ce:	9c03      	ldr	r4, [sp, #12]
 80065d0:	9314      	str	r3, [sp, #80]	; 0x50
 80065d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065d6:	f7fa fa2f 	bl	8000a38 <__aeabi_d2iz>
 80065da:	9015      	str	r0, [sp, #84]	; 0x54
 80065dc:	f7f9 ff12 	bl	8000404 <__aeabi_i2d>
 80065e0:	4602      	mov	r2, r0
 80065e2:	460b      	mov	r3, r1
 80065e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065e8:	f7f9 fdbe 	bl	8000168 <__aeabi_dsub>
 80065ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80065ee:	4606      	mov	r6, r0
 80065f0:	3330      	adds	r3, #48	; 0x30
 80065f2:	f804 3b01 	strb.w	r3, [r4], #1
 80065f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065f8:	460f      	mov	r7, r1
 80065fa:	429c      	cmp	r4, r3
 80065fc:	f04f 0200 	mov.w	r2, #0
 8006600:	d124      	bne.n	800664c <_dtoa_r+0x64c>
 8006602:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006606:	4bb0      	ldr	r3, [pc, #704]	; (80068c8 <_dtoa_r+0x8c8>)
 8006608:	f7f9 fdb0 	bl	800016c <__adddf3>
 800660c:	4602      	mov	r2, r0
 800660e:	460b      	mov	r3, r1
 8006610:	4630      	mov	r0, r6
 8006612:	4639      	mov	r1, r7
 8006614:	f7fa f9f0 	bl	80009f8 <__aeabi_dcmpgt>
 8006618:	2800      	cmp	r0, #0
 800661a:	d163      	bne.n	80066e4 <_dtoa_r+0x6e4>
 800661c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006620:	2000      	movs	r0, #0
 8006622:	49a9      	ldr	r1, [pc, #676]	; (80068c8 <_dtoa_r+0x8c8>)
 8006624:	f7f9 fda0 	bl	8000168 <__aeabi_dsub>
 8006628:	4602      	mov	r2, r0
 800662a:	460b      	mov	r3, r1
 800662c:	4630      	mov	r0, r6
 800662e:	4639      	mov	r1, r7
 8006630:	f7fa f9c4 	bl	80009bc <__aeabi_dcmplt>
 8006634:	2800      	cmp	r0, #0
 8006636:	f43f af1d 	beq.w	8006474 <_dtoa_r+0x474>
 800663a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800663c:	1e7b      	subs	r3, r7, #1
 800663e:	9314      	str	r3, [sp, #80]	; 0x50
 8006640:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006644:	2b30      	cmp	r3, #48	; 0x30
 8006646:	d0f8      	beq.n	800663a <_dtoa_r+0x63a>
 8006648:	46c2      	mov	sl, r8
 800664a:	e03b      	b.n	80066c4 <_dtoa_r+0x6c4>
 800664c:	4b9f      	ldr	r3, [pc, #636]	; (80068cc <_dtoa_r+0x8cc>)
 800664e:	f7f9 ff43 	bl	80004d8 <__aeabi_dmul>
 8006652:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006656:	e7bc      	b.n	80065d2 <_dtoa_r+0x5d2>
 8006658:	9f03      	ldr	r7, [sp, #12]
 800665a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800665e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006662:	4640      	mov	r0, r8
 8006664:	4649      	mov	r1, r9
 8006666:	f7fa f861 	bl	800072c <__aeabi_ddiv>
 800666a:	f7fa f9e5 	bl	8000a38 <__aeabi_d2iz>
 800666e:	4604      	mov	r4, r0
 8006670:	f7f9 fec8 	bl	8000404 <__aeabi_i2d>
 8006674:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006678:	f7f9 ff2e 	bl	80004d8 <__aeabi_dmul>
 800667c:	4602      	mov	r2, r0
 800667e:	460b      	mov	r3, r1
 8006680:	4640      	mov	r0, r8
 8006682:	4649      	mov	r1, r9
 8006684:	f7f9 fd70 	bl	8000168 <__aeabi_dsub>
 8006688:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800668c:	f807 6b01 	strb.w	r6, [r7], #1
 8006690:	9e03      	ldr	r6, [sp, #12]
 8006692:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006696:	1bbe      	subs	r6, r7, r6
 8006698:	45b4      	cmp	ip, r6
 800669a:	4602      	mov	r2, r0
 800669c:	460b      	mov	r3, r1
 800669e:	d136      	bne.n	800670e <_dtoa_r+0x70e>
 80066a0:	f7f9 fd64 	bl	800016c <__adddf3>
 80066a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066a8:	4680      	mov	r8, r0
 80066aa:	4689      	mov	r9, r1
 80066ac:	f7fa f9a4 	bl	80009f8 <__aeabi_dcmpgt>
 80066b0:	bb58      	cbnz	r0, 800670a <_dtoa_r+0x70a>
 80066b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066b6:	4640      	mov	r0, r8
 80066b8:	4649      	mov	r1, r9
 80066ba:	f7fa f975 	bl	80009a8 <__aeabi_dcmpeq>
 80066be:	b108      	cbz	r0, 80066c4 <_dtoa_r+0x6c4>
 80066c0:	07e1      	lsls	r1, r4, #31
 80066c2:	d422      	bmi.n	800670a <_dtoa_r+0x70a>
 80066c4:	4628      	mov	r0, r5
 80066c6:	4659      	mov	r1, fp
 80066c8:	f000 faf0 	bl	8006cac <_Bfree>
 80066cc:	2300      	movs	r3, #0
 80066ce:	703b      	strb	r3, [r7, #0]
 80066d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80066d2:	f10a 0001 	add.w	r0, sl, #1
 80066d6:	6018      	str	r0, [r3, #0]
 80066d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80066da:	2b00      	cmp	r3, #0
 80066dc:	f43f acde 	beq.w	800609c <_dtoa_r+0x9c>
 80066e0:	601f      	str	r7, [r3, #0]
 80066e2:	e4db      	b.n	800609c <_dtoa_r+0x9c>
 80066e4:	4627      	mov	r7, r4
 80066e6:	463b      	mov	r3, r7
 80066e8:	461f      	mov	r7, r3
 80066ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066ee:	2a39      	cmp	r2, #57	; 0x39
 80066f0:	d107      	bne.n	8006702 <_dtoa_r+0x702>
 80066f2:	9a03      	ldr	r2, [sp, #12]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d1f7      	bne.n	80066e8 <_dtoa_r+0x6e8>
 80066f8:	2230      	movs	r2, #48	; 0x30
 80066fa:	9903      	ldr	r1, [sp, #12]
 80066fc:	f108 0801 	add.w	r8, r8, #1
 8006700:	700a      	strb	r2, [r1, #0]
 8006702:	781a      	ldrb	r2, [r3, #0]
 8006704:	3201      	adds	r2, #1
 8006706:	701a      	strb	r2, [r3, #0]
 8006708:	e79e      	b.n	8006648 <_dtoa_r+0x648>
 800670a:	46d0      	mov	r8, sl
 800670c:	e7eb      	b.n	80066e6 <_dtoa_r+0x6e6>
 800670e:	2200      	movs	r2, #0
 8006710:	4b6e      	ldr	r3, [pc, #440]	; (80068cc <_dtoa_r+0x8cc>)
 8006712:	f7f9 fee1 	bl	80004d8 <__aeabi_dmul>
 8006716:	2200      	movs	r2, #0
 8006718:	2300      	movs	r3, #0
 800671a:	4680      	mov	r8, r0
 800671c:	4689      	mov	r9, r1
 800671e:	f7fa f943 	bl	80009a8 <__aeabi_dcmpeq>
 8006722:	2800      	cmp	r0, #0
 8006724:	d09b      	beq.n	800665e <_dtoa_r+0x65e>
 8006726:	e7cd      	b.n	80066c4 <_dtoa_r+0x6c4>
 8006728:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800672a:	2a00      	cmp	r2, #0
 800672c:	f000 80d0 	beq.w	80068d0 <_dtoa_r+0x8d0>
 8006730:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006732:	2a01      	cmp	r2, #1
 8006734:	f300 80ae 	bgt.w	8006894 <_dtoa_r+0x894>
 8006738:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800673a:	2a00      	cmp	r2, #0
 800673c:	f000 80a6 	beq.w	800688c <_dtoa_r+0x88c>
 8006740:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006744:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006746:	9f06      	ldr	r7, [sp, #24]
 8006748:	9a06      	ldr	r2, [sp, #24]
 800674a:	2101      	movs	r1, #1
 800674c:	441a      	add	r2, r3
 800674e:	9206      	str	r2, [sp, #24]
 8006750:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006752:	4628      	mov	r0, r5
 8006754:	441a      	add	r2, r3
 8006756:	9209      	str	r2, [sp, #36]	; 0x24
 8006758:	f000 fb5e 	bl	8006e18 <__i2b>
 800675c:	4606      	mov	r6, r0
 800675e:	2f00      	cmp	r7, #0
 8006760:	dd0c      	ble.n	800677c <_dtoa_r+0x77c>
 8006762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006764:	2b00      	cmp	r3, #0
 8006766:	dd09      	ble.n	800677c <_dtoa_r+0x77c>
 8006768:	42bb      	cmp	r3, r7
 800676a:	bfa8      	it	ge
 800676c:	463b      	movge	r3, r7
 800676e:	9a06      	ldr	r2, [sp, #24]
 8006770:	1aff      	subs	r7, r7, r3
 8006772:	1ad2      	subs	r2, r2, r3
 8006774:	9206      	str	r2, [sp, #24]
 8006776:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	9309      	str	r3, [sp, #36]	; 0x24
 800677c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800677e:	b1f3      	cbz	r3, 80067be <_dtoa_r+0x7be>
 8006780:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006782:	2b00      	cmp	r3, #0
 8006784:	f000 80a8 	beq.w	80068d8 <_dtoa_r+0x8d8>
 8006788:	2c00      	cmp	r4, #0
 800678a:	dd10      	ble.n	80067ae <_dtoa_r+0x7ae>
 800678c:	4631      	mov	r1, r6
 800678e:	4622      	mov	r2, r4
 8006790:	4628      	mov	r0, r5
 8006792:	f000 fbff 	bl	8006f94 <__pow5mult>
 8006796:	465a      	mov	r2, fp
 8006798:	4601      	mov	r1, r0
 800679a:	4606      	mov	r6, r0
 800679c:	4628      	mov	r0, r5
 800679e:	f000 fb51 	bl	8006e44 <__multiply>
 80067a2:	4680      	mov	r8, r0
 80067a4:	4659      	mov	r1, fp
 80067a6:	4628      	mov	r0, r5
 80067a8:	f000 fa80 	bl	8006cac <_Bfree>
 80067ac:	46c3      	mov	fp, r8
 80067ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067b0:	1b1a      	subs	r2, r3, r4
 80067b2:	d004      	beq.n	80067be <_dtoa_r+0x7be>
 80067b4:	4659      	mov	r1, fp
 80067b6:	4628      	mov	r0, r5
 80067b8:	f000 fbec 	bl	8006f94 <__pow5mult>
 80067bc:	4683      	mov	fp, r0
 80067be:	2101      	movs	r1, #1
 80067c0:	4628      	mov	r0, r5
 80067c2:	f000 fb29 	bl	8006e18 <__i2b>
 80067c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067c8:	4604      	mov	r4, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f340 8086 	ble.w	80068dc <_dtoa_r+0x8dc>
 80067d0:	461a      	mov	r2, r3
 80067d2:	4601      	mov	r1, r0
 80067d4:	4628      	mov	r0, r5
 80067d6:	f000 fbdd 	bl	8006f94 <__pow5mult>
 80067da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067dc:	4604      	mov	r4, r0
 80067de:	2b01      	cmp	r3, #1
 80067e0:	dd7f      	ble.n	80068e2 <_dtoa_r+0x8e2>
 80067e2:	f04f 0800 	mov.w	r8, #0
 80067e6:	6923      	ldr	r3, [r4, #16]
 80067e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80067ec:	6918      	ldr	r0, [r3, #16]
 80067ee:	f000 fac5 	bl	8006d7c <__hi0bits>
 80067f2:	f1c0 0020 	rsb	r0, r0, #32
 80067f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067f8:	4418      	add	r0, r3
 80067fa:	f010 001f 	ands.w	r0, r0, #31
 80067fe:	f000 8092 	beq.w	8006926 <_dtoa_r+0x926>
 8006802:	f1c0 0320 	rsb	r3, r0, #32
 8006806:	2b04      	cmp	r3, #4
 8006808:	f340 808a 	ble.w	8006920 <_dtoa_r+0x920>
 800680c:	f1c0 001c 	rsb	r0, r0, #28
 8006810:	9b06      	ldr	r3, [sp, #24]
 8006812:	4407      	add	r7, r0
 8006814:	4403      	add	r3, r0
 8006816:	9306      	str	r3, [sp, #24]
 8006818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800681a:	4403      	add	r3, r0
 800681c:	9309      	str	r3, [sp, #36]	; 0x24
 800681e:	9b06      	ldr	r3, [sp, #24]
 8006820:	2b00      	cmp	r3, #0
 8006822:	dd05      	ble.n	8006830 <_dtoa_r+0x830>
 8006824:	4659      	mov	r1, fp
 8006826:	461a      	mov	r2, r3
 8006828:	4628      	mov	r0, r5
 800682a:	f000 fc0d 	bl	8007048 <__lshift>
 800682e:	4683      	mov	fp, r0
 8006830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006832:	2b00      	cmp	r3, #0
 8006834:	dd05      	ble.n	8006842 <_dtoa_r+0x842>
 8006836:	4621      	mov	r1, r4
 8006838:	461a      	mov	r2, r3
 800683a:	4628      	mov	r0, r5
 800683c:	f000 fc04 	bl	8007048 <__lshift>
 8006840:	4604      	mov	r4, r0
 8006842:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006844:	2b00      	cmp	r3, #0
 8006846:	d070      	beq.n	800692a <_dtoa_r+0x92a>
 8006848:	4621      	mov	r1, r4
 800684a:	4658      	mov	r0, fp
 800684c:	f000 fc6c 	bl	8007128 <__mcmp>
 8006850:	2800      	cmp	r0, #0
 8006852:	da6a      	bge.n	800692a <_dtoa_r+0x92a>
 8006854:	2300      	movs	r3, #0
 8006856:	4659      	mov	r1, fp
 8006858:	220a      	movs	r2, #10
 800685a:	4628      	mov	r0, r5
 800685c:	f000 fa48 	bl	8006cf0 <__multadd>
 8006860:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006862:	4683      	mov	fp, r0
 8006864:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006868:	2b00      	cmp	r3, #0
 800686a:	f000 8194 	beq.w	8006b96 <_dtoa_r+0xb96>
 800686e:	4631      	mov	r1, r6
 8006870:	2300      	movs	r3, #0
 8006872:	220a      	movs	r2, #10
 8006874:	4628      	mov	r0, r5
 8006876:	f000 fa3b 	bl	8006cf0 <__multadd>
 800687a:	f1b9 0f00 	cmp.w	r9, #0
 800687e:	4606      	mov	r6, r0
 8006880:	f300 8093 	bgt.w	80069aa <_dtoa_r+0x9aa>
 8006884:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006886:	2b02      	cmp	r3, #2
 8006888:	dc57      	bgt.n	800693a <_dtoa_r+0x93a>
 800688a:	e08e      	b.n	80069aa <_dtoa_r+0x9aa>
 800688c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800688e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006892:	e757      	b.n	8006744 <_dtoa_r+0x744>
 8006894:	9b08      	ldr	r3, [sp, #32]
 8006896:	1e5c      	subs	r4, r3, #1
 8006898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800689a:	42a3      	cmp	r3, r4
 800689c:	bfb7      	itett	lt
 800689e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80068a0:	1b1c      	subge	r4, r3, r4
 80068a2:	1ae2      	sublt	r2, r4, r3
 80068a4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80068a6:	bfbe      	ittt	lt
 80068a8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80068aa:	189b      	addlt	r3, r3, r2
 80068ac:	930e      	strlt	r3, [sp, #56]	; 0x38
 80068ae:	9b08      	ldr	r3, [sp, #32]
 80068b0:	bfb8      	it	lt
 80068b2:	2400      	movlt	r4, #0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	bfbb      	ittet	lt
 80068b8:	9b06      	ldrlt	r3, [sp, #24]
 80068ba:	9a08      	ldrlt	r2, [sp, #32]
 80068bc:	9f06      	ldrge	r7, [sp, #24]
 80068be:	1a9f      	sublt	r7, r3, r2
 80068c0:	bfac      	ite	ge
 80068c2:	9b08      	ldrge	r3, [sp, #32]
 80068c4:	2300      	movlt	r3, #0
 80068c6:	e73f      	b.n	8006748 <_dtoa_r+0x748>
 80068c8:	3fe00000 	.word	0x3fe00000
 80068cc:	40240000 	.word	0x40240000
 80068d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80068d2:	9f06      	ldr	r7, [sp, #24]
 80068d4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80068d6:	e742      	b.n	800675e <_dtoa_r+0x75e>
 80068d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068da:	e76b      	b.n	80067b4 <_dtoa_r+0x7b4>
 80068dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068de:	2b01      	cmp	r3, #1
 80068e0:	dc19      	bgt.n	8006916 <_dtoa_r+0x916>
 80068e2:	9b04      	ldr	r3, [sp, #16]
 80068e4:	b9bb      	cbnz	r3, 8006916 <_dtoa_r+0x916>
 80068e6:	9b05      	ldr	r3, [sp, #20]
 80068e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068ec:	b99b      	cbnz	r3, 8006916 <_dtoa_r+0x916>
 80068ee:	9b05      	ldr	r3, [sp, #20]
 80068f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068f4:	0d1b      	lsrs	r3, r3, #20
 80068f6:	051b      	lsls	r3, r3, #20
 80068f8:	b183      	cbz	r3, 800691c <_dtoa_r+0x91c>
 80068fa:	f04f 0801 	mov.w	r8, #1
 80068fe:	9b06      	ldr	r3, [sp, #24]
 8006900:	3301      	adds	r3, #1
 8006902:	9306      	str	r3, [sp, #24]
 8006904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006906:	3301      	adds	r3, #1
 8006908:	9309      	str	r3, [sp, #36]	; 0x24
 800690a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800690c:	2b00      	cmp	r3, #0
 800690e:	f47f af6a 	bne.w	80067e6 <_dtoa_r+0x7e6>
 8006912:	2001      	movs	r0, #1
 8006914:	e76f      	b.n	80067f6 <_dtoa_r+0x7f6>
 8006916:	f04f 0800 	mov.w	r8, #0
 800691a:	e7f6      	b.n	800690a <_dtoa_r+0x90a>
 800691c:	4698      	mov	r8, r3
 800691e:	e7f4      	b.n	800690a <_dtoa_r+0x90a>
 8006920:	f43f af7d 	beq.w	800681e <_dtoa_r+0x81e>
 8006924:	4618      	mov	r0, r3
 8006926:	301c      	adds	r0, #28
 8006928:	e772      	b.n	8006810 <_dtoa_r+0x810>
 800692a:	9b08      	ldr	r3, [sp, #32]
 800692c:	2b00      	cmp	r3, #0
 800692e:	dc36      	bgt.n	800699e <_dtoa_r+0x99e>
 8006930:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006932:	2b02      	cmp	r3, #2
 8006934:	dd33      	ble.n	800699e <_dtoa_r+0x99e>
 8006936:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800693a:	f1b9 0f00 	cmp.w	r9, #0
 800693e:	d10d      	bne.n	800695c <_dtoa_r+0x95c>
 8006940:	4621      	mov	r1, r4
 8006942:	464b      	mov	r3, r9
 8006944:	2205      	movs	r2, #5
 8006946:	4628      	mov	r0, r5
 8006948:	f000 f9d2 	bl	8006cf0 <__multadd>
 800694c:	4601      	mov	r1, r0
 800694e:	4604      	mov	r4, r0
 8006950:	4658      	mov	r0, fp
 8006952:	f000 fbe9 	bl	8007128 <__mcmp>
 8006956:	2800      	cmp	r0, #0
 8006958:	f73f adb8 	bgt.w	80064cc <_dtoa_r+0x4cc>
 800695c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800695e:	9f03      	ldr	r7, [sp, #12]
 8006960:	ea6f 0a03 	mvn.w	sl, r3
 8006964:	f04f 0800 	mov.w	r8, #0
 8006968:	4621      	mov	r1, r4
 800696a:	4628      	mov	r0, r5
 800696c:	f000 f99e 	bl	8006cac <_Bfree>
 8006970:	2e00      	cmp	r6, #0
 8006972:	f43f aea7 	beq.w	80066c4 <_dtoa_r+0x6c4>
 8006976:	f1b8 0f00 	cmp.w	r8, #0
 800697a:	d005      	beq.n	8006988 <_dtoa_r+0x988>
 800697c:	45b0      	cmp	r8, r6
 800697e:	d003      	beq.n	8006988 <_dtoa_r+0x988>
 8006980:	4641      	mov	r1, r8
 8006982:	4628      	mov	r0, r5
 8006984:	f000 f992 	bl	8006cac <_Bfree>
 8006988:	4631      	mov	r1, r6
 800698a:	4628      	mov	r0, r5
 800698c:	f000 f98e 	bl	8006cac <_Bfree>
 8006990:	e698      	b.n	80066c4 <_dtoa_r+0x6c4>
 8006992:	2400      	movs	r4, #0
 8006994:	4626      	mov	r6, r4
 8006996:	e7e1      	b.n	800695c <_dtoa_r+0x95c>
 8006998:	46c2      	mov	sl, r8
 800699a:	4626      	mov	r6, r4
 800699c:	e596      	b.n	80064cc <_dtoa_r+0x4cc>
 800699e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f000 80fd 	beq.w	8006ba4 <_dtoa_r+0xba4>
 80069aa:	2f00      	cmp	r7, #0
 80069ac:	dd05      	ble.n	80069ba <_dtoa_r+0x9ba>
 80069ae:	4631      	mov	r1, r6
 80069b0:	463a      	mov	r2, r7
 80069b2:	4628      	mov	r0, r5
 80069b4:	f000 fb48 	bl	8007048 <__lshift>
 80069b8:	4606      	mov	r6, r0
 80069ba:	f1b8 0f00 	cmp.w	r8, #0
 80069be:	d05c      	beq.n	8006a7a <_dtoa_r+0xa7a>
 80069c0:	4628      	mov	r0, r5
 80069c2:	6871      	ldr	r1, [r6, #4]
 80069c4:	f000 f932 	bl	8006c2c <_Balloc>
 80069c8:	4607      	mov	r7, r0
 80069ca:	b928      	cbnz	r0, 80069d8 <_dtoa_r+0x9d8>
 80069cc:	4602      	mov	r2, r0
 80069ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80069d2:	4b7f      	ldr	r3, [pc, #508]	; (8006bd0 <_dtoa_r+0xbd0>)
 80069d4:	f7ff bb28 	b.w	8006028 <_dtoa_r+0x28>
 80069d8:	6932      	ldr	r2, [r6, #16]
 80069da:	f106 010c 	add.w	r1, r6, #12
 80069de:	3202      	adds	r2, #2
 80069e0:	0092      	lsls	r2, r2, #2
 80069e2:	300c      	adds	r0, #12
 80069e4:	f000 f914 	bl	8006c10 <memcpy>
 80069e8:	2201      	movs	r2, #1
 80069ea:	4639      	mov	r1, r7
 80069ec:	4628      	mov	r0, r5
 80069ee:	f000 fb2b 	bl	8007048 <__lshift>
 80069f2:	46b0      	mov	r8, r6
 80069f4:	4606      	mov	r6, r0
 80069f6:	9b03      	ldr	r3, [sp, #12]
 80069f8:	3301      	adds	r3, #1
 80069fa:	9308      	str	r3, [sp, #32]
 80069fc:	9b03      	ldr	r3, [sp, #12]
 80069fe:	444b      	add	r3, r9
 8006a00:	930a      	str	r3, [sp, #40]	; 0x28
 8006a02:	9b04      	ldr	r3, [sp, #16]
 8006a04:	f003 0301 	and.w	r3, r3, #1
 8006a08:	9309      	str	r3, [sp, #36]	; 0x24
 8006a0a:	9b08      	ldr	r3, [sp, #32]
 8006a0c:	4621      	mov	r1, r4
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	4658      	mov	r0, fp
 8006a12:	9304      	str	r3, [sp, #16]
 8006a14:	f7ff fa66 	bl	8005ee4 <quorem>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	4641      	mov	r1, r8
 8006a1c:	3330      	adds	r3, #48	; 0x30
 8006a1e:	9006      	str	r0, [sp, #24]
 8006a20:	4658      	mov	r0, fp
 8006a22:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a24:	f000 fb80 	bl	8007128 <__mcmp>
 8006a28:	4632      	mov	r2, r6
 8006a2a:	4681      	mov	r9, r0
 8006a2c:	4621      	mov	r1, r4
 8006a2e:	4628      	mov	r0, r5
 8006a30:	f000 fb96 	bl	8007160 <__mdiff>
 8006a34:	68c2      	ldr	r2, [r0, #12]
 8006a36:	4607      	mov	r7, r0
 8006a38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a3a:	bb02      	cbnz	r2, 8006a7e <_dtoa_r+0xa7e>
 8006a3c:	4601      	mov	r1, r0
 8006a3e:	4658      	mov	r0, fp
 8006a40:	f000 fb72 	bl	8007128 <__mcmp>
 8006a44:	4602      	mov	r2, r0
 8006a46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a48:	4639      	mov	r1, r7
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006a50:	f000 f92c 	bl	8006cac <_Bfree>
 8006a54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a58:	9f08      	ldr	r7, [sp, #32]
 8006a5a:	ea43 0102 	orr.w	r1, r3, r2
 8006a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a60:	430b      	orrs	r3, r1
 8006a62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a64:	d10d      	bne.n	8006a82 <_dtoa_r+0xa82>
 8006a66:	2b39      	cmp	r3, #57	; 0x39
 8006a68:	d029      	beq.n	8006abe <_dtoa_r+0xabe>
 8006a6a:	f1b9 0f00 	cmp.w	r9, #0
 8006a6e:	dd01      	ble.n	8006a74 <_dtoa_r+0xa74>
 8006a70:	9b06      	ldr	r3, [sp, #24]
 8006a72:	3331      	adds	r3, #49	; 0x31
 8006a74:	9a04      	ldr	r2, [sp, #16]
 8006a76:	7013      	strb	r3, [r2, #0]
 8006a78:	e776      	b.n	8006968 <_dtoa_r+0x968>
 8006a7a:	4630      	mov	r0, r6
 8006a7c:	e7b9      	b.n	80069f2 <_dtoa_r+0x9f2>
 8006a7e:	2201      	movs	r2, #1
 8006a80:	e7e2      	b.n	8006a48 <_dtoa_r+0xa48>
 8006a82:	f1b9 0f00 	cmp.w	r9, #0
 8006a86:	db06      	blt.n	8006a96 <_dtoa_r+0xa96>
 8006a88:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006a8a:	ea41 0909 	orr.w	r9, r1, r9
 8006a8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a90:	ea59 0101 	orrs.w	r1, r9, r1
 8006a94:	d120      	bne.n	8006ad8 <_dtoa_r+0xad8>
 8006a96:	2a00      	cmp	r2, #0
 8006a98:	ddec      	ble.n	8006a74 <_dtoa_r+0xa74>
 8006a9a:	4659      	mov	r1, fp
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	9308      	str	r3, [sp, #32]
 8006aa2:	f000 fad1 	bl	8007048 <__lshift>
 8006aa6:	4621      	mov	r1, r4
 8006aa8:	4683      	mov	fp, r0
 8006aaa:	f000 fb3d 	bl	8007128 <__mcmp>
 8006aae:	2800      	cmp	r0, #0
 8006ab0:	9b08      	ldr	r3, [sp, #32]
 8006ab2:	dc02      	bgt.n	8006aba <_dtoa_r+0xaba>
 8006ab4:	d1de      	bne.n	8006a74 <_dtoa_r+0xa74>
 8006ab6:	07da      	lsls	r2, r3, #31
 8006ab8:	d5dc      	bpl.n	8006a74 <_dtoa_r+0xa74>
 8006aba:	2b39      	cmp	r3, #57	; 0x39
 8006abc:	d1d8      	bne.n	8006a70 <_dtoa_r+0xa70>
 8006abe:	2339      	movs	r3, #57	; 0x39
 8006ac0:	9a04      	ldr	r2, [sp, #16]
 8006ac2:	7013      	strb	r3, [r2, #0]
 8006ac4:	463b      	mov	r3, r7
 8006ac6:	461f      	mov	r7, r3
 8006ac8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006acc:	3b01      	subs	r3, #1
 8006ace:	2a39      	cmp	r2, #57	; 0x39
 8006ad0:	d050      	beq.n	8006b74 <_dtoa_r+0xb74>
 8006ad2:	3201      	adds	r2, #1
 8006ad4:	701a      	strb	r2, [r3, #0]
 8006ad6:	e747      	b.n	8006968 <_dtoa_r+0x968>
 8006ad8:	2a00      	cmp	r2, #0
 8006ada:	dd03      	ble.n	8006ae4 <_dtoa_r+0xae4>
 8006adc:	2b39      	cmp	r3, #57	; 0x39
 8006ade:	d0ee      	beq.n	8006abe <_dtoa_r+0xabe>
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	e7c7      	b.n	8006a74 <_dtoa_r+0xa74>
 8006ae4:	9a08      	ldr	r2, [sp, #32]
 8006ae6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006ae8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006aec:	428a      	cmp	r2, r1
 8006aee:	d02a      	beq.n	8006b46 <_dtoa_r+0xb46>
 8006af0:	4659      	mov	r1, fp
 8006af2:	2300      	movs	r3, #0
 8006af4:	220a      	movs	r2, #10
 8006af6:	4628      	mov	r0, r5
 8006af8:	f000 f8fa 	bl	8006cf0 <__multadd>
 8006afc:	45b0      	cmp	r8, r6
 8006afe:	4683      	mov	fp, r0
 8006b00:	f04f 0300 	mov.w	r3, #0
 8006b04:	f04f 020a 	mov.w	r2, #10
 8006b08:	4641      	mov	r1, r8
 8006b0a:	4628      	mov	r0, r5
 8006b0c:	d107      	bne.n	8006b1e <_dtoa_r+0xb1e>
 8006b0e:	f000 f8ef 	bl	8006cf0 <__multadd>
 8006b12:	4680      	mov	r8, r0
 8006b14:	4606      	mov	r6, r0
 8006b16:	9b08      	ldr	r3, [sp, #32]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	9308      	str	r3, [sp, #32]
 8006b1c:	e775      	b.n	8006a0a <_dtoa_r+0xa0a>
 8006b1e:	f000 f8e7 	bl	8006cf0 <__multadd>
 8006b22:	4631      	mov	r1, r6
 8006b24:	4680      	mov	r8, r0
 8006b26:	2300      	movs	r3, #0
 8006b28:	220a      	movs	r2, #10
 8006b2a:	4628      	mov	r0, r5
 8006b2c:	f000 f8e0 	bl	8006cf0 <__multadd>
 8006b30:	4606      	mov	r6, r0
 8006b32:	e7f0      	b.n	8006b16 <_dtoa_r+0xb16>
 8006b34:	f1b9 0f00 	cmp.w	r9, #0
 8006b38:	bfcc      	ite	gt
 8006b3a:	464f      	movgt	r7, r9
 8006b3c:	2701      	movle	r7, #1
 8006b3e:	f04f 0800 	mov.w	r8, #0
 8006b42:	9a03      	ldr	r2, [sp, #12]
 8006b44:	4417      	add	r7, r2
 8006b46:	4659      	mov	r1, fp
 8006b48:	2201      	movs	r2, #1
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	9308      	str	r3, [sp, #32]
 8006b4e:	f000 fa7b 	bl	8007048 <__lshift>
 8006b52:	4621      	mov	r1, r4
 8006b54:	4683      	mov	fp, r0
 8006b56:	f000 fae7 	bl	8007128 <__mcmp>
 8006b5a:	2800      	cmp	r0, #0
 8006b5c:	dcb2      	bgt.n	8006ac4 <_dtoa_r+0xac4>
 8006b5e:	d102      	bne.n	8006b66 <_dtoa_r+0xb66>
 8006b60:	9b08      	ldr	r3, [sp, #32]
 8006b62:	07db      	lsls	r3, r3, #31
 8006b64:	d4ae      	bmi.n	8006ac4 <_dtoa_r+0xac4>
 8006b66:	463b      	mov	r3, r7
 8006b68:	461f      	mov	r7, r3
 8006b6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b6e:	2a30      	cmp	r2, #48	; 0x30
 8006b70:	d0fa      	beq.n	8006b68 <_dtoa_r+0xb68>
 8006b72:	e6f9      	b.n	8006968 <_dtoa_r+0x968>
 8006b74:	9a03      	ldr	r2, [sp, #12]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d1a5      	bne.n	8006ac6 <_dtoa_r+0xac6>
 8006b7a:	2331      	movs	r3, #49	; 0x31
 8006b7c:	f10a 0a01 	add.w	sl, sl, #1
 8006b80:	e779      	b.n	8006a76 <_dtoa_r+0xa76>
 8006b82:	4b14      	ldr	r3, [pc, #80]	; (8006bd4 <_dtoa_r+0xbd4>)
 8006b84:	f7ff baa8 	b.w	80060d8 <_dtoa_r+0xd8>
 8006b88:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	f47f aa81 	bne.w	8006092 <_dtoa_r+0x92>
 8006b90:	4b11      	ldr	r3, [pc, #68]	; (8006bd8 <_dtoa_r+0xbd8>)
 8006b92:	f7ff baa1 	b.w	80060d8 <_dtoa_r+0xd8>
 8006b96:	f1b9 0f00 	cmp.w	r9, #0
 8006b9a:	dc03      	bgt.n	8006ba4 <_dtoa_r+0xba4>
 8006b9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	f73f aecb 	bgt.w	800693a <_dtoa_r+0x93a>
 8006ba4:	9f03      	ldr	r7, [sp, #12]
 8006ba6:	4621      	mov	r1, r4
 8006ba8:	4658      	mov	r0, fp
 8006baa:	f7ff f99b 	bl	8005ee4 <quorem>
 8006bae:	9a03      	ldr	r2, [sp, #12]
 8006bb0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006bb4:	f807 3b01 	strb.w	r3, [r7], #1
 8006bb8:	1aba      	subs	r2, r7, r2
 8006bba:	4591      	cmp	r9, r2
 8006bbc:	ddba      	ble.n	8006b34 <_dtoa_r+0xb34>
 8006bbe:	4659      	mov	r1, fp
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	220a      	movs	r2, #10
 8006bc4:	4628      	mov	r0, r5
 8006bc6:	f000 f893 	bl	8006cf0 <__multadd>
 8006bca:	4683      	mov	fp, r0
 8006bcc:	e7eb      	b.n	8006ba6 <_dtoa_r+0xba6>
 8006bce:	bf00      	nop
 8006bd0:	08009fab 	.word	0x08009fab
 8006bd4:	08009f08 	.word	0x08009f08
 8006bd8:	08009f2c 	.word	0x08009f2c

08006bdc <_localeconv_r>:
 8006bdc:	4800      	ldr	r0, [pc, #0]	; (8006be0 <_localeconv_r+0x4>)
 8006bde:	4770      	bx	lr
 8006be0:	20000170 	.word	0x20000170

08006be4 <malloc>:
 8006be4:	4b02      	ldr	r3, [pc, #8]	; (8006bf0 <malloc+0xc>)
 8006be6:	4601      	mov	r1, r0
 8006be8:	6818      	ldr	r0, [r3, #0]
 8006bea:	f000 bc1d 	b.w	8007428 <_malloc_r>
 8006bee:	bf00      	nop
 8006bf0:	2000001c 	.word	0x2000001c

08006bf4 <memchr>:
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	b510      	push	{r4, lr}
 8006bf8:	b2c9      	uxtb	r1, r1
 8006bfa:	4402      	add	r2, r0
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	4618      	mov	r0, r3
 8006c00:	d101      	bne.n	8006c06 <memchr+0x12>
 8006c02:	2000      	movs	r0, #0
 8006c04:	e003      	b.n	8006c0e <memchr+0x1a>
 8006c06:	7804      	ldrb	r4, [r0, #0]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	428c      	cmp	r4, r1
 8006c0c:	d1f6      	bne.n	8006bfc <memchr+0x8>
 8006c0e:	bd10      	pop	{r4, pc}

08006c10 <memcpy>:
 8006c10:	440a      	add	r2, r1
 8006c12:	4291      	cmp	r1, r2
 8006c14:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c18:	d100      	bne.n	8006c1c <memcpy+0xc>
 8006c1a:	4770      	bx	lr
 8006c1c:	b510      	push	{r4, lr}
 8006c1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c22:	4291      	cmp	r1, r2
 8006c24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c28:	d1f9      	bne.n	8006c1e <memcpy+0xe>
 8006c2a:	bd10      	pop	{r4, pc}

08006c2c <_Balloc>:
 8006c2c:	b570      	push	{r4, r5, r6, lr}
 8006c2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006c30:	4604      	mov	r4, r0
 8006c32:	460d      	mov	r5, r1
 8006c34:	b976      	cbnz	r6, 8006c54 <_Balloc+0x28>
 8006c36:	2010      	movs	r0, #16
 8006c38:	f7ff ffd4 	bl	8006be4 <malloc>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	6260      	str	r0, [r4, #36]	; 0x24
 8006c40:	b920      	cbnz	r0, 8006c4c <_Balloc+0x20>
 8006c42:	2166      	movs	r1, #102	; 0x66
 8006c44:	4b17      	ldr	r3, [pc, #92]	; (8006ca4 <_Balloc+0x78>)
 8006c46:	4818      	ldr	r0, [pc, #96]	; (8006ca8 <_Balloc+0x7c>)
 8006c48:	f000 fdce 	bl	80077e8 <__assert_func>
 8006c4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c50:	6006      	str	r6, [r0, #0]
 8006c52:	60c6      	str	r6, [r0, #12]
 8006c54:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006c56:	68f3      	ldr	r3, [r6, #12]
 8006c58:	b183      	cbz	r3, 8006c7c <_Balloc+0x50>
 8006c5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c62:	b9b8      	cbnz	r0, 8006c94 <_Balloc+0x68>
 8006c64:	2101      	movs	r1, #1
 8006c66:	fa01 f605 	lsl.w	r6, r1, r5
 8006c6a:	1d72      	adds	r2, r6, #5
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	0092      	lsls	r2, r2, #2
 8006c70:	f000 fb5e 	bl	8007330 <_calloc_r>
 8006c74:	b160      	cbz	r0, 8006c90 <_Balloc+0x64>
 8006c76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006c7a:	e00e      	b.n	8006c9a <_Balloc+0x6e>
 8006c7c:	2221      	movs	r2, #33	; 0x21
 8006c7e:	2104      	movs	r1, #4
 8006c80:	4620      	mov	r0, r4
 8006c82:	f000 fb55 	bl	8007330 <_calloc_r>
 8006c86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c88:	60f0      	str	r0, [r6, #12]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d1e4      	bne.n	8006c5a <_Balloc+0x2e>
 8006c90:	2000      	movs	r0, #0
 8006c92:	bd70      	pop	{r4, r5, r6, pc}
 8006c94:	6802      	ldr	r2, [r0, #0]
 8006c96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ca0:	e7f7      	b.n	8006c92 <_Balloc+0x66>
 8006ca2:	bf00      	nop
 8006ca4:	08009f39 	.word	0x08009f39
 8006ca8:	08009fbc 	.word	0x08009fbc

08006cac <_Bfree>:
 8006cac:	b570      	push	{r4, r5, r6, lr}
 8006cae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006cb0:	4605      	mov	r5, r0
 8006cb2:	460c      	mov	r4, r1
 8006cb4:	b976      	cbnz	r6, 8006cd4 <_Bfree+0x28>
 8006cb6:	2010      	movs	r0, #16
 8006cb8:	f7ff ff94 	bl	8006be4 <malloc>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	6268      	str	r0, [r5, #36]	; 0x24
 8006cc0:	b920      	cbnz	r0, 8006ccc <_Bfree+0x20>
 8006cc2:	218a      	movs	r1, #138	; 0x8a
 8006cc4:	4b08      	ldr	r3, [pc, #32]	; (8006ce8 <_Bfree+0x3c>)
 8006cc6:	4809      	ldr	r0, [pc, #36]	; (8006cec <_Bfree+0x40>)
 8006cc8:	f000 fd8e 	bl	80077e8 <__assert_func>
 8006ccc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006cd0:	6006      	str	r6, [r0, #0]
 8006cd2:	60c6      	str	r6, [r0, #12]
 8006cd4:	b13c      	cbz	r4, 8006ce6 <_Bfree+0x3a>
 8006cd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006cd8:	6862      	ldr	r2, [r4, #4]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ce0:	6021      	str	r1, [r4, #0]
 8006ce2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006ce6:	bd70      	pop	{r4, r5, r6, pc}
 8006ce8:	08009f39 	.word	0x08009f39
 8006cec:	08009fbc 	.word	0x08009fbc

08006cf0 <__multadd>:
 8006cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cf4:	4607      	mov	r7, r0
 8006cf6:	460c      	mov	r4, r1
 8006cf8:	461e      	mov	r6, r3
 8006cfa:	2000      	movs	r0, #0
 8006cfc:	690d      	ldr	r5, [r1, #16]
 8006cfe:	f101 0c14 	add.w	ip, r1, #20
 8006d02:	f8dc 3000 	ldr.w	r3, [ip]
 8006d06:	3001      	adds	r0, #1
 8006d08:	b299      	uxth	r1, r3
 8006d0a:	fb02 6101 	mla	r1, r2, r1, r6
 8006d0e:	0c1e      	lsrs	r6, r3, #16
 8006d10:	0c0b      	lsrs	r3, r1, #16
 8006d12:	fb02 3306 	mla	r3, r2, r6, r3
 8006d16:	b289      	uxth	r1, r1
 8006d18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006d1c:	4285      	cmp	r5, r0
 8006d1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006d22:	f84c 1b04 	str.w	r1, [ip], #4
 8006d26:	dcec      	bgt.n	8006d02 <__multadd+0x12>
 8006d28:	b30e      	cbz	r6, 8006d6e <__multadd+0x7e>
 8006d2a:	68a3      	ldr	r3, [r4, #8]
 8006d2c:	42ab      	cmp	r3, r5
 8006d2e:	dc19      	bgt.n	8006d64 <__multadd+0x74>
 8006d30:	6861      	ldr	r1, [r4, #4]
 8006d32:	4638      	mov	r0, r7
 8006d34:	3101      	adds	r1, #1
 8006d36:	f7ff ff79 	bl	8006c2c <_Balloc>
 8006d3a:	4680      	mov	r8, r0
 8006d3c:	b928      	cbnz	r0, 8006d4a <__multadd+0x5a>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	21b5      	movs	r1, #181	; 0xb5
 8006d42:	4b0c      	ldr	r3, [pc, #48]	; (8006d74 <__multadd+0x84>)
 8006d44:	480c      	ldr	r0, [pc, #48]	; (8006d78 <__multadd+0x88>)
 8006d46:	f000 fd4f 	bl	80077e8 <__assert_func>
 8006d4a:	6922      	ldr	r2, [r4, #16]
 8006d4c:	f104 010c 	add.w	r1, r4, #12
 8006d50:	3202      	adds	r2, #2
 8006d52:	0092      	lsls	r2, r2, #2
 8006d54:	300c      	adds	r0, #12
 8006d56:	f7ff ff5b 	bl	8006c10 <memcpy>
 8006d5a:	4621      	mov	r1, r4
 8006d5c:	4638      	mov	r0, r7
 8006d5e:	f7ff ffa5 	bl	8006cac <_Bfree>
 8006d62:	4644      	mov	r4, r8
 8006d64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d68:	3501      	adds	r5, #1
 8006d6a:	615e      	str	r6, [r3, #20]
 8006d6c:	6125      	str	r5, [r4, #16]
 8006d6e:	4620      	mov	r0, r4
 8006d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d74:	08009fab 	.word	0x08009fab
 8006d78:	08009fbc 	.word	0x08009fbc

08006d7c <__hi0bits>:
 8006d7c:	0c02      	lsrs	r2, r0, #16
 8006d7e:	0412      	lsls	r2, r2, #16
 8006d80:	4603      	mov	r3, r0
 8006d82:	b9ca      	cbnz	r2, 8006db8 <__hi0bits+0x3c>
 8006d84:	0403      	lsls	r3, r0, #16
 8006d86:	2010      	movs	r0, #16
 8006d88:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006d8c:	bf04      	itt	eq
 8006d8e:	021b      	lsleq	r3, r3, #8
 8006d90:	3008      	addeq	r0, #8
 8006d92:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006d96:	bf04      	itt	eq
 8006d98:	011b      	lsleq	r3, r3, #4
 8006d9a:	3004      	addeq	r0, #4
 8006d9c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006da0:	bf04      	itt	eq
 8006da2:	009b      	lsleq	r3, r3, #2
 8006da4:	3002      	addeq	r0, #2
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	db05      	blt.n	8006db6 <__hi0bits+0x3a>
 8006daa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006dae:	f100 0001 	add.w	r0, r0, #1
 8006db2:	bf08      	it	eq
 8006db4:	2020      	moveq	r0, #32
 8006db6:	4770      	bx	lr
 8006db8:	2000      	movs	r0, #0
 8006dba:	e7e5      	b.n	8006d88 <__hi0bits+0xc>

08006dbc <__lo0bits>:
 8006dbc:	6803      	ldr	r3, [r0, #0]
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	f013 0007 	ands.w	r0, r3, #7
 8006dc4:	d00b      	beq.n	8006dde <__lo0bits+0x22>
 8006dc6:	07d9      	lsls	r1, r3, #31
 8006dc8:	d421      	bmi.n	8006e0e <__lo0bits+0x52>
 8006dca:	0798      	lsls	r0, r3, #30
 8006dcc:	bf49      	itett	mi
 8006dce:	085b      	lsrmi	r3, r3, #1
 8006dd0:	089b      	lsrpl	r3, r3, #2
 8006dd2:	2001      	movmi	r0, #1
 8006dd4:	6013      	strmi	r3, [r2, #0]
 8006dd6:	bf5c      	itt	pl
 8006dd8:	2002      	movpl	r0, #2
 8006dda:	6013      	strpl	r3, [r2, #0]
 8006ddc:	4770      	bx	lr
 8006dde:	b299      	uxth	r1, r3
 8006de0:	b909      	cbnz	r1, 8006de6 <__lo0bits+0x2a>
 8006de2:	2010      	movs	r0, #16
 8006de4:	0c1b      	lsrs	r3, r3, #16
 8006de6:	b2d9      	uxtb	r1, r3
 8006de8:	b909      	cbnz	r1, 8006dee <__lo0bits+0x32>
 8006dea:	3008      	adds	r0, #8
 8006dec:	0a1b      	lsrs	r3, r3, #8
 8006dee:	0719      	lsls	r1, r3, #28
 8006df0:	bf04      	itt	eq
 8006df2:	091b      	lsreq	r3, r3, #4
 8006df4:	3004      	addeq	r0, #4
 8006df6:	0799      	lsls	r1, r3, #30
 8006df8:	bf04      	itt	eq
 8006dfa:	089b      	lsreq	r3, r3, #2
 8006dfc:	3002      	addeq	r0, #2
 8006dfe:	07d9      	lsls	r1, r3, #31
 8006e00:	d403      	bmi.n	8006e0a <__lo0bits+0x4e>
 8006e02:	085b      	lsrs	r3, r3, #1
 8006e04:	f100 0001 	add.w	r0, r0, #1
 8006e08:	d003      	beq.n	8006e12 <__lo0bits+0x56>
 8006e0a:	6013      	str	r3, [r2, #0]
 8006e0c:	4770      	bx	lr
 8006e0e:	2000      	movs	r0, #0
 8006e10:	4770      	bx	lr
 8006e12:	2020      	movs	r0, #32
 8006e14:	4770      	bx	lr
	...

08006e18 <__i2b>:
 8006e18:	b510      	push	{r4, lr}
 8006e1a:	460c      	mov	r4, r1
 8006e1c:	2101      	movs	r1, #1
 8006e1e:	f7ff ff05 	bl	8006c2c <_Balloc>
 8006e22:	4602      	mov	r2, r0
 8006e24:	b928      	cbnz	r0, 8006e32 <__i2b+0x1a>
 8006e26:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006e2a:	4b04      	ldr	r3, [pc, #16]	; (8006e3c <__i2b+0x24>)
 8006e2c:	4804      	ldr	r0, [pc, #16]	; (8006e40 <__i2b+0x28>)
 8006e2e:	f000 fcdb 	bl	80077e8 <__assert_func>
 8006e32:	2301      	movs	r3, #1
 8006e34:	6144      	str	r4, [r0, #20]
 8006e36:	6103      	str	r3, [r0, #16]
 8006e38:	bd10      	pop	{r4, pc}
 8006e3a:	bf00      	nop
 8006e3c:	08009fab 	.word	0x08009fab
 8006e40:	08009fbc 	.word	0x08009fbc

08006e44 <__multiply>:
 8006e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e48:	4691      	mov	r9, r2
 8006e4a:	690a      	ldr	r2, [r1, #16]
 8006e4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006e50:	460c      	mov	r4, r1
 8006e52:	429a      	cmp	r2, r3
 8006e54:	bfbe      	ittt	lt
 8006e56:	460b      	movlt	r3, r1
 8006e58:	464c      	movlt	r4, r9
 8006e5a:	4699      	movlt	r9, r3
 8006e5c:	6927      	ldr	r7, [r4, #16]
 8006e5e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006e62:	68a3      	ldr	r3, [r4, #8]
 8006e64:	6861      	ldr	r1, [r4, #4]
 8006e66:	eb07 060a 	add.w	r6, r7, sl
 8006e6a:	42b3      	cmp	r3, r6
 8006e6c:	b085      	sub	sp, #20
 8006e6e:	bfb8      	it	lt
 8006e70:	3101      	addlt	r1, #1
 8006e72:	f7ff fedb 	bl	8006c2c <_Balloc>
 8006e76:	b930      	cbnz	r0, 8006e86 <__multiply+0x42>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	f240 115d 	movw	r1, #349	; 0x15d
 8006e7e:	4b43      	ldr	r3, [pc, #268]	; (8006f8c <__multiply+0x148>)
 8006e80:	4843      	ldr	r0, [pc, #268]	; (8006f90 <__multiply+0x14c>)
 8006e82:	f000 fcb1 	bl	80077e8 <__assert_func>
 8006e86:	f100 0514 	add.w	r5, r0, #20
 8006e8a:	462b      	mov	r3, r5
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006e92:	4543      	cmp	r3, r8
 8006e94:	d321      	bcc.n	8006eda <__multiply+0x96>
 8006e96:	f104 0314 	add.w	r3, r4, #20
 8006e9a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006e9e:	f109 0314 	add.w	r3, r9, #20
 8006ea2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006ea6:	9202      	str	r2, [sp, #8]
 8006ea8:	1b3a      	subs	r2, r7, r4
 8006eaa:	3a15      	subs	r2, #21
 8006eac:	f022 0203 	bic.w	r2, r2, #3
 8006eb0:	3204      	adds	r2, #4
 8006eb2:	f104 0115 	add.w	r1, r4, #21
 8006eb6:	428f      	cmp	r7, r1
 8006eb8:	bf38      	it	cc
 8006eba:	2204      	movcc	r2, #4
 8006ebc:	9201      	str	r2, [sp, #4]
 8006ebe:	9a02      	ldr	r2, [sp, #8]
 8006ec0:	9303      	str	r3, [sp, #12]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d80c      	bhi.n	8006ee0 <__multiply+0x9c>
 8006ec6:	2e00      	cmp	r6, #0
 8006ec8:	dd03      	ble.n	8006ed2 <__multiply+0x8e>
 8006eca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d059      	beq.n	8006f86 <__multiply+0x142>
 8006ed2:	6106      	str	r6, [r0, #16]
 8006ed4:	b005      	add	sp, #20
 8006ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eda:	f843 2b04 	str.w	r2, [r3], #4
 8006ede:	e7d8      	b.n	8006e92 <__multiply+0x4e>
 8006ee0:	f8b3 a000 	ldrh.w	sl, [r3]
 8006ee4:	f1ba 0f00 	cmp.w	sl, #0
 8006ee8:	d023      	beq.n	8006f32 <__multiply+0xee>
 8006eea:	46a9      	mov	r9, r5
 8006eec:	f04f 0c00 	mov.w	ip, #0
 8006ef0:	f104 0e14 	add.w	lr, r4, #20
 8006ef4:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006ef8:	f8d9 1000 	ldr.w	r1, [r9]
 8006efc:	fa1f fb82 	uxth.w	fp, r2
 8006f00:	b289      	uxth	r1, r1
 8006f02:	fb0a 110b 	mla	r1, sl, fp, r1
 8006f06:	4461      	add	r1, ip
 8006f08:	f8d9 c000 	ldr.w	ip, [r9]
 8006f0c:	0c12      	lsrs	r2, r2, #16
 8006f0e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006f12:	fb0a c202 	mla	r2, sl, r2, ip
 8006f16:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006f1a:	b289      	uxth	r1, r1
 8006f1c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006f20:	4577      	cmp	r7, lr
 8006f22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006f26:	f849 1b04 	str.w	r1, [r9], #4
 8006f2a:	d8e3      	bhi.n	8006ef4 <__multiply+0xb0>
 8006f2c:	9a01      	ldr	r2, [sp, #4]
 8006f2e:	f845 c002 	str.w	ip, [r5, r2]
 8006f32:	9a03      	ldr	r2, [sp, #12]
 8006f34:	3304      	adds	r3, #4
 8006f36:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006f3a:	f1b9 0f00 	cmp.w	r9, #0
 8006f3e:	d020      	beq.n	8006f82 <__multiply+0x13e>
 8006f40:	46ae      	mov	lr, r5
 8006f42:	f04f 0a00 	mov.w	sl, #0
 8006f46:	6829      	ldr	r1, [r5, #0]
 8006f48:	f104 0c14 	add.w	ip, r4, #20
 8006f4c:	f8bc b000 	ldrh.w	fp, [ip]
 8006f50:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006f54:	b289      	uxth	r1, r1
 8006f56:	fb09 220b 	mla	r2, r9, fp, r2
 8006f5a:	4492      	add	sl, r2
 8006f5c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006f60:	f84e 1b04 	str.w	r1, [lr], #4
 8006f64:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006f68:	f8be 1000 	ldrh.w	r1, [lr]
 8006f6c:	0c12      	lsrs	r2, r2, #16
 8006f6e:	fb09 1102 	mla	r1, r9, r2, r1
 8006f72:	4567      	cmp	r7, ip
 8006f74:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006f78:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006f7c:	d8e6      	bhi.n	8006f4c <__multiply+0x108>
 8006f7e:	9a01      	ldr	r2, [sp, #4]
 8006f80:	50a9      	str	r1, [r5, r2]
 8006f82:	3504      	adds	r5, #4
 8006f84:	e79b      	b.n	8006ebe <__multiply+0x7a>
 8006f86:	3e01      	subs	r6, #1
 8006f88:	e79d      	b.n	8006ec6 <__multiply+0x82>
 8006f8a:	bf00      	nop
 8006f8c:	08009fab 	.word	0x08009fab
 8006f90:	08009fbc 	.word	0x08009fbc

08006f94 <__pow5mult>:
 8006f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f98:	4615      	mov	r5, r2
 8006f9a:	f012 0203 	ands.w	r2, r2, #3
 8006f9e:	4606      	mov	r6, r0
 8006fa0:	460f      	mov	r7, r1
 8006fa2:	d007      	beq.n	8006fb4 <__pow5mult+0x20>
 8006fa4:	4c25      	ldr	r4, [pc, #148]	; (800703c <__pow5mult+0xa8>)
 8006fa6:	3a01      	subs	r2, #1
 8006fa8:	2300      	movs	r3, #0
 8006faa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006fae:	f7ff fe9f 	bl	8006cf0 <__multadd>
 8006fb2:	4607      	mov	r7, r0
 8006fb4:	10ad      	asrs	r5, r5, #2
 8006fb6:	d03d      	beq.n	8007034 <__pow5mult+0xa0>
 8006fb8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006fba:	b97c      	cbnz	r4, 8006fdc <__pow5mult+0x48>
 8006fbc:	2010      	movs	r0, #16
 8006fbe:	f7ff fe11 	bl	8006be4 <malloc>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	6270      	str	r0, [r6, #36]	; 0x24
 8006fc6:	b928      	cbnz	r0, 8006fd4 <__pow5mult+0x40>
 8006fc8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006fcc:	4b1c      	ldr	r3, [pc, #112]	; (8007040 <__pow5mult+0xac>)
 8006fce:	481d      	ldr	r0, [pc, #116]	; (8007044 <__pow5mult+0xb0>)
 8006fd0:	f000 fc0a 	bl	80077e8 <__assert_func>
 8006fd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006fd8:	6004      	str	r4, [r0, #0]
 8006fda:	60c4      	str	r4, [r0, #12]
 8006fdc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006fe0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006fe4:	b94c      	cbnz	r4, 8006ffa <__pow5mult+0x66>
 8006fe6:	f240 2171 	movw	r1, #625	; 0x271
 8006fea:	4630      	mov	r0, r6
 8006fec:	f7ff ff14 	bl	8006e18 <__i2b>
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	4604      	mov	r4, r0
 8006ff4:	f8c8 0008 	str.w	r0, [r8, #8]
 8006ff8:	6003      	str	r3, [r0, #0]
 8006ffa:	f04f 0900 	mov.w	r9, #0
 8006ffe:	07eb      	lsls	r3, r5, #31
 8007000:	d50a      	bpl.n	8007018 <__pow5mult+0x84>
 8007002:	4639      	mov	r1, r7
 8007004:	4622      	mov	r2, r4
 8007006:	4630      	mov	r0, r6
 8007008:	f7ff ff1c 	bl	8006e44 <__multiply>
 800700c:	4680      	mov	r8, r0
 800700e:	4639      	mov	r1, r7
 8007010:	4630      	mov	r0, r6
 8007012:	f7ff fe4b 	bl	8006cac <_Bfree>
 8007016:	4647      	mov	r7, r8
 8007018:	106d      	asrs	r5, r5, #1
 800701a:	d00b      	beq.n	8007034 <__pow5mult+0xa0>
 800701c:	6820      	ldr	r0, [r4, #0]
 800701e:	b938      	cbnz	r0, 8007030 <__pow5mult+0x9c>
 8007020:	4622      	mov	r2, r4
 8007022:	4621      	mov	r1, r4
 8007024:	4630      	mov	r0, r6
 8007026:	f7ff ff0d 	bl	8006e44 <__multiply>
 800702a:	6020      	str	r0, [r4, #0]
 800702c:	f8c0 9000 	str.w	r9, [r0]
 8007030:	4604      	mov	r4, r0
 8007032:	e7e4      	b.n	8006ffe <__pow5mult+0x6a>
 8007034:	4638      	mov	r0, r7
 8007036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800703a:	bf00      	nop
 800703c:	0800a108 	.word	0x0800a108
 8007040:	08009f39 	.word	0x08009f39
 8007044:	08009fbc 	.word	0x08009fbc

08007048 <__lshift>:
 8007048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800704c:	460c      	mov	r4, r1
 800704e:	4607      	mov	r7, r0
 8007050:	4691      	mov	r9, r2
 8007052:	6923      	ldr	r3, [r4, #16]
 8007054:	6849      	ldr	r1, [r1, #4]
 8007056:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800705a:	68a3      	ldr	r3, [r4, #8]
 800705c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007060:	f108 0601 	add.w	r6, r8, #1
 8007064:	42b3      	cmp	r3, r6
 8007066:	db0b      	blt.n	8007080 <__lshift+0x38>
 8007068:	4638      	mov	r0, r7
 800706a:	f7ff fddf 	bl	8006c2c <_Balloc>
 800706e:	4605      	mov	r5, r0
 8007070:	b948      	cbnz	r0, 8007086 <__lshift+0x3e>
 8007072:	4602      	mov	r2, r0
 8007074:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007078:	4b29      	ldr	r3, [pc, #164]	; (8007120 <__lshift+0xd8>)
 800707a:	482a      	ldr	r0, [pc, #168]	; (8007124 <__lshift+0xdc>)
 800707c:	f000 fbb4 	bl	80077e8 <__assert_func>
 8007080:	3101      	adds	r1, #1
 8007082:	005b      	lsls	r3, r3, #1
 8007084:	e7ee      	b.n	8007064 <__lshift+0x1c>
 8007086:	2300      	movs	r3, #0
 8007088:	f100 0114 	add.w	r1, r0, #20
 800708c:	f100 0210 	add.w	r2, r0, #16
 8007090:	4618      	mov	r0, r3
 8007092:	4553      	cmp	r3, sl
 8007094:	db37      	blt.n	8007106 <__lshift+0xbe>
 8007096:	6920      	ldr	r0, [r4, #16]
 8007098:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800709c:	f104 0314 	add.w	r3, r4, #20
 80070a0:	f019 091f 	ands.w	r9, r9, #31
 80070a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80070a8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80070ac:	d02f      	beq.n	800710e <__lshift+0xc6>
 80070ae:	468a      	mov	sl, r1
 80070b0:	f04f 0c00 	mov.w	ip, #0
 80070b4:	f1c9 0e20 	rsb	lr, r9, #32
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	fa02 f209 	lsl.w	r2, r2, r9
 80070be:	ea42 020c 	orr.w	r2, r2, ip
 80070c2:	f84a 2b04 	str.w	r2, [sl], #4
 80070c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80070ca:	4298      	cmp	r0, r3
 80070cc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80070d0:	d8f2      	bhi.n	80070b8 <__lshift+0x70>
 80070d2:	1b03      	subs	r3, r0, r4
 80070d4:	3b15      	subs	r3, #21
 80070d6:	f023 0303 	bic.w	r3, r3, #3
 80070da:	3304      	adds	r3, #4
 80070dc:	f104 0215 	add.w	r2, r4, #21
 80070e0:	4290      	cmp	r0, r2
 80070e2:	bf38      	it	cc
 80070e4:	2304      	movcc	r3, #4
 80070e6:	f841 c003 	str.w	ip, [r1, r3]
 80070ea:	f1bc 0f00 	cmp.w	ip, #0
 80070ee:	d001      	beq.n	80070f4 <__lshift+0xac>
 80070f0:	f108 0602 	add.w	r6, r8, #2
 80070f4:	3e01      	subs	r6, #1
 80070f6:	4638      	mov	r0, r7
 80070f8:	4621      	mov	r1, r4
 80070fa:	612e      	str	r6, [r5, #16]
 80070fc:	f7ff fdd6 	bl	8006cac <_Bfree>
 8007100:	4628      	mov	r0, r5
 8007102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007106:	f842 0f04 	str.w	r0, [r2, #4]!
 800710a:	3301      	adds	r3, #1
 800710c:	e7c1      	b.n	8007092 <__lshift+0x4a>
 800710e:	3904      	subs	r1, #4
 8007110:	f853 2b04 	ldr.w	r2, [r3], #4
 8007114:	4298      	cmp	r0, r3
 8007116:	f841 2f04 	str.w	r2, [r1, #4]!
 800711a:	d8f9      	bhi.n	8007110 <__lshift+0xc8>
 800711c:	e7ea      	b.n	80070f4 <__lshift+0xac>
 800711e:	bf00      	nop
 8007120:	08009fab 	.word	0x08009fab
 8007124:	08009fbc 	.word	0x08009fbc

08007128 <__mcmp>:
 8007128:	4603      	mov	r3, r0
 800712a:	690a      	ldr	r2, [r1, #16]
 800712c:	6900      	ldr	r0, [r0, #16]
 800712e:	b530      	push	{r4, r5, lr}
 8007130:	1a80      	subs	r0, r0, r2
 8007132:	d10d      	bne.n	8007150 <__mcmp+0x28>
 8007134:	3314      	adds	r3, #20
 8007136:	3114      	adds	r1, #20
 8007138:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800713c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007140:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007144:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007148:	4295      	cmp	r5, r2
 800714a:	d002      	beq.n	8007152 <__mcmp+0x2a>
 800714c:	d304      	bcc.n	8007158 <__mcmp+0x30>
 800714e:	2001      	movs	r0, #1
 8007150:	bd30      	pop	{r4, r5, pc}
 8007152:	42a3      	cmp	r3, r4
 8007154:	d3f4      	bcc.n	8007140 <__mcmp+0x18>
 8007156:	e7fb      	b.n	8007150 <__mcmp+0x28>
 8007158:	f04f 30ff 	mov.w	r0, #4294967295
 800715c:	e7f8      	b.n	8007150 <__mcmp+0x28>
	...

08007160 <__mdiff>:
 8007160:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007164:	460d      	mov	r5, r1
 8007166:	4607      	mov	r7, r0
 8007168:	4611      	mov	r1, r2
 800716a:	4628      	mov	r0, r5
 800716c:	4614      	mov	r4, r2
 800716e:	f7ff ffdb 	bl	8007128 <__mcmp>
 8007172:	1e06      	subs	r6, r0, #0
 8007174:	d111      	bne.n	800719a <__mdiff+0x3a>
 8007176:	4631      	mov	r1, r6
 8007178:	4638      	mov	r0, r7
 800717a:	f7ff fd57 	bl	8006c2c <_Balloc>
 800717e:	4602      	mov	r2, r0
 8007180:	b928      	cbnz	r0, 800718e <__mdiff+0x2e>
 8007182:	f240 2132 	movw	r1, #562	; 0x232
 8007186:	4b3a      	ldr	r3, [pc, #232]	; (8007270 <__mdiff+0x110>)
 8007188:	483a      	ldr	r0, [pc, #232]	; (8007274 <__mdiff+0x114>)
 800718a:	f000 fb2d 	bl	80077e8 <__assert_func>
 800718e:	2301      	movs	r3, #1
 8007190:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007194:	4610      	mov	r0, r2
 8007196:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800719a:	bfa4      	itt	ge
 800719c:	4623      	movge	r3, r4
 800719e:	462c      	movge	r4, r5
 80071a0:	4638      	mov	r0, r7
 80071a2:	6861      	ldr	r1, [r4, #4]
 80071a4:	bfa6      	itte	ge
 80071a6:	461d      	movge	r5, r3
 80071a8:	2600      	movge	r6, #0
 80071aa:	2601      	movlt	r6, #1
 80071ac:	f7ff fd3e 	bl	8006c2c <_Balloc>
 80071b0:	4602      	mov	r2, r0
 80071b2:	b918      	cbnz	r0, 80071bc <__mdiff+0x5c>
 80071b4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80071b8:	4b2d      	ldr	r3, [pc, #180]	; (8007270 <__mdiff+0x110>)
 80071ba:	e7e5      	b.n	8007188 <__mdiff+0x28>
 80071bc:	f102 0814 	add.w	r8, r2, #20
 80071c0:	46c2      	mov	sl, r8
 80071c2:	f04f 0c00 	mov.w	ip, #0
 80071c6:	6927      	ldr	r7, [r4, #16]
 80071c8:	60c6      	str	r6, [r0, #12]
 80071ca:	692e      	ldr	r6, [r5, #16]
 80071cc:	f104 0014 	add.w	r0, r4, #20
 80071d0:	f105 0914 	add.w	r9, r5, #20
 80071d4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80071d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80071dc:	3410      	adds	r4, #16
 80071de:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80071e2:	f859 3b04 	ldr.w	r3, [r9], #4
 80071e6:	fa1f f18b 	uxth.w	r1, fp
 80071ea:	448c      	add	ip, r1
 80071ec:	b299      	uxth	r1, r3
 80071ee:	0c1b      	lsrs	r3, r3, #16
 80071f0:	ebac 0101 	sub.w	r1, ip, r1
 80071f4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80071f8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80071fc:	b289      	uxth	r1, r1
 80071fe:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007202:	454e      	cmp	r6, r9
 8007204:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007208:	f84a 3b04 	str.w	r3, [sl], #4
 800720c:	d8e7      	bhi.n	80071de <__mdiff+0x7e>
 800720e:	1b73      	subs	r3, r6, r5
 8007210:	3b15      	subs	r3, #21
 8007212:	f023 0303 	bic.w	r3, r3, #3
 8007216:	3515      	adds	r5, #21
 8007218:	3304      	adds	r3, #4
 800721a:	42ae      	cmp	r6, r5
 800721c:	bf38      	it	cc
 800721e:	2304      	movcc	r3, #4
 8007220:	4418      	add	r0, r3
 8007222:	4443      	add	r3, r8
 8007224:	461e      	mov	r6, r3
 8007226:	4605      	mov	r5, r0
 8007228:	4575      	cmp	r5, lr
 800722a:	d30e      	bcc.n	800724a <__mdiff+0xea>
 800722c:	f10e 0103 	add.w	r1, lr, #3
 8007230:	1a09      	subs	r1, r1, r0
 8007232:	f021 0103 	bic.w	r1, r1, #3
 8007236:	3803      	subs	r0, #3
 8007238:	4586      	cmp	lr, r0
 800723a:	bf38      	it	cc
 800723c:	2100      	movcc	r1, #0
 800723e:	4419      	add	r1, r3
 8007240:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007244:	b18b      	cbz	r3, 800726a <__mdiff+0x10a>
 8007246:	6117      	str	r7, [r2, #16]
 8007248:	e7a4      	b.n	8007194 <__mdiff+0x34>
 800724a:	f855 8b04 	ldr.w	r8, [r5], #4
 800724e:	fa1f f188 	uxth.w	r1, r8
 8007252:	4461      	add	r1, ip
 8007254:	140c      	asrs	r4, r1, #16
 8007256:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800725a:	b289      	uxth	r1, r1
 800725c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007260:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007264:	f846 1b04 	str.w	r1, [r6], #4
 8007268:	e7de      	b.n	8007228 <__mdiff+0xc8>
 800726a:	3f01      	subs	r7, #1
 800726c:	e7e8      	b.n	8007240 <__mdiff+0xe0>
 800726e:	bf00      	nop
 8007270:	08009fab 	.word	0x08009fab
 8007274:	08009fbc 	.word	0x08009fbc

08007278 <__d2b>:
 8007278:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800727c:	2101      	movs	r1, #1
 800727e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007282:	4690      	mov	r8, r2
 8007284:	461d      	mov	r5, r3
 8007286:	f7ff fcd1 	bl	8006c2c <_Balloc>
 800728a:	4604      	mov	r4, r0
 800728c:	b930      	cbnz	r0, 800729c <__d2b+0x24>
 800728e:	4602      	mov	r2, r0
 8007290:	f240 310a 	movw	r1, #778	; 0x30a
 8007294:	4b24      	ldr	r3, [pc, #144]	; (8007328 <__d2b+0xb0>)
 8007296:	4825      	ldr	r0, [pc, #148]	; (800732c <__d2b+0xb4>)
 8007298:	f000 faa6 	bl	80077e8 <__assert_func>
 800729c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80072a0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80072a4:	bb2d      	cbnz	r5, 80072f2 <__d2b+0x7a>
 80072a6:	9301      	str	r3, [sp, #4]
 80072a8:	f1b8 0300 	subs.w	r3, r8, #0
 80072ac:	d026      	beq.n	80072fc <__d2b+0x84>
 80072ae:	4668      	mov	r0, sp
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	f7ff fd83 	bl	8006dbc <__lo0bits>
 80072b6:	9900      	ldr	r1, [sp, #0]
 80072b8:	b1f0      	cbz	r0, 80072f8 <__d2b+0x80>
 80072ba:	9a01      	ldr	r2, [sp, #4]
 80072bc:	f1c0 0320 	rsb	r3, r0, #32
 80072c0:	fa02 f303 	lsl.w	r3, r2, r3
 80072c4:	430b      	orrs	r3, r1
 80072c6:	40c2      	lsrs	r2, r0
 80072c8:	6163      	str	r3, [r4, #20]
 80072ca:	9201      	str	r2, [sp, #4]
 80072cc:	9b01      	ldr	r3, [sp, #4]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	bf14      	ite	ne
 80072d2:	2102      	movne	r1, #2
 80072d4:	2101      	moveq	r1, #1
 80072d6:	61a3      	str	r3, [r4, #24]
 80072d8:	6121      	str	r1, [r4, #16]
 80072da:	b1c5      	cbz	r5, 800730e <__d2b+0x96>
 80072dc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80072e0:	4405      	add	r5, r0
 80072e2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80072e6:	603d      	str	r5, [r7, #0]
 80072e8:	6030      	str	r0, [r6, #0]
 80072ea:	4620      	mov	r0, r4
 80072ec:	b002      	add	sp, #8
 80072ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072f6:	e7d6      	b.n	80072a6 <__d2b+0x2e>
 80072f8:	6161      	str	r1, [r4, #20]
 80072fa:	e7e7      	b.n	80072cc <__d2b+0x54>
 80072fc:	a801      	add	r0, sp, #4
 80072fe:	f7ff fd5d 	bl	8006dbc <__lo0bits>
 8007302:	2101      	movs	r1, #1
 8007304:	9b01      	ldr	r3, [sp, #4]
 8007306:	6121      	str	r1, [r4, #16]
 8007308:	6163      	str	r3, [r4, #20]
 800730a:	3020      	adds	r0, #32
 800730c:	e7e5      	b.n	80072da <__d2b+0x62>
 800730e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007312:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007316:	6038      	str	r0, [r7, #0]
 8007318:	6918      	ldr	r0, [r3, #16]
 800731a:	f7ff fd2f 	bl	8006d7c <__hi0bits>
 800731e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007322:	6031      	str	r1, [r6, #0]
 8007324:	e7e1      	b.n	80072ea <__d2b+0x72>
 8007326:	bf00      	nop
 8007328:	08009fab 	.word	0x08009fab
 800732c:	08009fbc 	.word	0x08009fbc

08007330 <_calloc_r>:
 8007330:	b570      	push	{r4, r5, r6, lr}
 8007332:	fba1 5402 	umull	r5, r4, r1, r2
 8007336:	b934      	cbnz	r4, 8007346 <_calloc_r+0x16>
 8007338:	4629      	mov	r1, r5
 800733a:	f000 f875 	bl	8007428 <_malloc_r>
 800733e:	4606      	mov	r6, r0
 8007340:	b928      	cbnz	r0, 800734e <_calloc_r+0x1e>
 8007342:	4630      	mov	r0, r6
 8007344:	bd70      	pop	{r4, r5, r6, pc}
 8007346:	220c      	movs	r2, #12
 8007348:	2600      	movs	r6, #0
 800734a:	6002      	str	r2, [r0, #0]
 800734c:	e7f9      	b.n	8007342 <_calloc_r+0x12>
 800734e:	462a      	mov	r2, r5
 8007350:	4621      	mov	r1, r4
 8007352:	f7fe f93f 	bl	80055d4 <memset>
 8007356:	e7f4      	b.n	8007342 <_calloc_r+0x12>

08007358 <_free_r>:
 8007358:	b538      	push	{r3, r4, r5, lr}
 800735a:	4605      	mov	r5, r0
 800735c:	2900      	cmp	r1, #0
 800735e:	d040      	beq.n	80073e2 <_free_r+0x8a>
 8007360:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007364:	1f0c      	subs	r4, r1, #4
 8007366:	2b00      	cmp	r3, #0
 8007368:	bfb8      	it	lt
 800736a:	18e4      	addlt	r4, r4, r3
 800736c:	f000 fa98 	bl	80078a0 <__malloc_lock>
 8007370:	4a1c      	ldr	r2, [pc, #112]	; (80073e4 <_free_r+0x8c>)
 8007372:	6813      	ldr	r3, [r2, #0]
 8007374:	b933      	cbnz	r3, 8007384 <_free_r+0x2c>
 8007376:	6063      	str	r3, [r4, #4]
 8007378:	6014      	str	r4, [r2, #0]
 800737a:	4628      	mov	r0, r5
 800737c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007380:	f000 ba94 	b.w	80078ac <__malloc_unlock>
 8007384:	42a3      	cmp	r3, r4
 8007386:	d908      	bls.n	800739a <_free_r+0x42>
 8007388:	6820      	ldr	r0, [r4, #0]
 800738a:	1821      	adds	r1, r4, r0
 800738c:	428b      	cmp	r3, r1
 800738e:	bf01      	itttt	eq
 8007390:	6819      	ldreq	r1, [r3, #0]
 8007392:	685b      	ldreq	r3, [r3, #4]
 8007394:	1809      	addeq	r1, r1, r0
 8007396:	6021      	streq	r1, [r4, #0]
 8007398:	e7ed      	b.n	8007376 <_free_r+0x1e>
 800739a:	461a      	mov	r2, r3
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	b10b      	cbz	r3, 80073a4 <_free_r+0x4c>
 80073a0:	42a3      	cmp	r3, r4
 80073a2:	d9fa      	bls.n	800739a <_free_r+0x42>
 80073a4:	6811      	ldr	r1, [r2, #0]
 80073a6:	1850      	adds	r0, r2, r1
 80073a8:	42a0      	cmp	r0, r4
 80073aa:	d10b      	bne.n	80073c4 <_free_r+0x6c>
 80073ac:	6820      	ldr	r0, [r4, #0]
 80073ae:	4401      	add	r1, r0
 80073b0:	1850      	adds	r0, r2, r1
 80073b2:	4283      	cmp	r3, r0
 80073b4:	6011      	str	r1, [r2, #0]
 80073b6:	d1e0      	bne.n	800737a <_free_r+0x22>
 80073b8:	6818      	ldr	r0, [r3, #0]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	4401      	add	r1, r0
 80073be:	6011      	str	r1, [r2, #0]
 80073c0:	6053      	str	r3, [r2, #4]
 80073c2:	e7da      	b.n	800737a <_free_r+0x22>
 80073c4:	d902      	bls.n	80073cc <_free_r+0x74>
 80073c6:	230c      	movs	r3, #12
 80073c8:	602b      	str	r3, [r5, #0]
 80073ca:	e7d6      	b.n	800737a <_free_r+0x22>
 80073cc:	6820      	ldr	r0, [r4, #0]
 80073ce:	1821      	adds	r1, r4, r0
 80073d0:	428b      	cmp	r3, r1
 80073d2:	bf01      	itttt	eq
 80073d4:	6819      	ldreq	r1, [r3, #0]
 80073d6:	685b      	ldreq	r3, [r3, #4]
 80073d8:	1809      	addeq	r1, r1, r0
 80073da:	6021      	streq	r1, [r4, #0]
 80073dc:	6063      	str	r3, [r4, #4]
 80073de:	6054      	str	r4, [r2, #4]
 80073e0:	e7cb      	b.n	800737a <_free_r+0x22>
 80073e2:	bd38      	pop	{r3, r4, r5, pc}
 80073e4:	200007bc 	.word	0x200007bc

080073e8 <sbrk_aligned>:
 80073e8:	b570      	push	{r4, r5, r6, lr}
 80073ea:	4e0e      	ldr	r6, [pc, #56]	; (8007424 <sbrk_aligned+0x3c>)
 80073ec:	460c      	mov	r4, r1
 80073ee:	6831      	ldr	r1, [r6, #0]
 80073f0:	4605      	mov	r5, r0
 80073f2:	b911      	cbnz	r1, 80073fa <sbrk_aligned+0x12>
 80073f4:	f000 f9e8 	bl	80077c8 <_sbrk_r>
 80073f8:	6030      	str	r0, [r6, #0]
 80073fa:	4621      	mov	r1, r4
 80073fc:	4628      	mov	r0, r5
 80073fe:	f000 f9e3 	bl	80077c8 <_sbrk_r>
 8007402:	1c43      	adds	r3, r0, #1
 8007404:	d00a      	beq.n	800741c <sbrk_aligned+0x34>
 8007406:	1cc4      	adds	r4, r0, #3
 8007408:	f024 0403 	bic.w	r4, r4, #3
 800740c:	42a0      	cmp	r0, r4
 800740e:	d007      	beq.n	8007420 <sbrk_aligned+0x38>
 8007410:	1a21      	subs	r1, r4, r0
 8007412:	4628      	mov	r0, r5
 8007414:	f000 f9d8 	bl	80077c8 <_sbrk_r>
 8007418:	3001      	adds	r0, #1
 800741a:	d101      	bne.n	8007420 <sbrk_aligned+0x38>
 800741c:	f04f 34ff 	mov.w	r4, #4294967295
 8007420:	4620      	mov	r0, r4
 8007422:	bd70      	pop	{r4, r5, r6, pc}
 8007424:	200007c0 	.word	0x200007c0

08007428 <_malloc_r>:
 8007428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800742c:	1ccd      	adds	r5, r1, #3
 800742e:	f025 0503 	bic.w	r5, r5, #3
 8007432:	3508      	adds	r5, #8
 8007434:	2d0c      	cmp	r5, #12
 8007436:	bf38      	it	cc
 8007438:	250c      	movcc	r5, #12
 800743a:	2d00      	cmp	r5, #0
 800743c:	4607      	mov	r7, r0
 800743e:	db01      	blt.n	8007444 <_malloc_r+0x1c>
 8007440:	42a9      	cmp	r1, r5
 8007442:	d905      	bls.n	8007450 <_malloc_r+0x28>
 8007444:	230c      	movs	r3, #12
 8007446:	2600      	movs	r6, #0
 8007448:	603b      	str	r3, [r7, #0]
 800744a:	4630      	mov	r0, r6
 800744c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007450:	4e2e      	ldr	r6, [pc, #184]	; (800750c <_malloc_r+0xe4>)
 8007452:	f000 fa25 	bl	80078a0 <__malloc_lock>
 8007456:	6833      	ldr	r3, [r6, #0]
 8007458:	461c      	mov	r4, r3
 800745a:	bb34      	cbnz	r4, 80074aa <_malloc_r+0x82>
 800745c:	4629      	mov	r1, r5
 800745e:	4638      	mov	r0, r7
 8007460:	f7ff ffc2 	bl	80073e8 <sbrk_aligned>
 8007464:	1c43      	adds	r3, r0, #1
 8007466:	4604      	mov	r4, r0
 8007468:	d14d      	bne.n	8007506 <_malloc_r+0xde>
 800746a:	6834      	ldr	r4, [r6, #0]
 800746c:	4626      	mov	r6, r4
 800746e:	2e00      	cmp	r6, #0
 8007470:	d140      	bne.n	80074f4 <_malloc_r+0xcc>
 8007472:	6823      	ldr	r3, [r4, #0]
 8007474:	4631      	mov	r1, r6
 8007476:	4638      	mov	r0, r7
 8007478:	eb04 0803 	add.w	r8, r4, r3
 800747c:	f000 f9a4 	bl	80077c8 <_sbrk_r>
 8007480:	4580      	cmp	r8, r0
 8007482:	d13a      	bne.n	80074fa <_malloc_r+0xd2>
 8007484:	6821      	ldr	r1, [r4, #0]
 8007486:	3503      	adds	r5, #3
 8007488:	1a6d      	subs	r5, r5, r1
 800748a:	f025 0503 	bic.w	r5, r5, #3
 800748e:	3508      	adds	r5, #8
 8007490:	2d0c      	cmp	r5, #12
 8007492:	bf38      	it	cc
 8007494:	250c      	movcc	r5, #12
 8007496:	4638      	mov	r0, r7
 8007498:	4629      	mov	r1, r5
 800749a:	f7ff ffa5 	bl	80073e8 <sbrk_aligned>
 800749e:	3001      	adds	r0, #1
 80074a0:	d02b      	beq.n	80074fa <_malloc_r+0xd2>
 80074a2:	6823      	ldr	r3, [r4, #0]
 80074a4:	442b      	add	r3, r5
 80074a6:	6023      	str	r3, [r4, #0]
 80074a8:	e00e      	b.n	80074c8 <_malloc_r+0xa0>
 80074aa:	6822      	ldr	r2, [r4, #0]
 80074ac:	1b52      	subs	r2, r2, r5
 80074ae:	d41e      	bmi.n	80074ee <_malloc_r+0xc6>
 80074b0:	2a0b      	cmp	r2, #11
 80074b2:	d916      	bls.n	80074e2 <_malloc_r+0xba>
 80074b4:	1961      	adds	r1, r4, r5
 80074b6:	42a3      	cmp	r3, r4
 80074b8:	6025      	str	r5, [r4, #0]
 80074ba:	bf18      	it	ne
 80074bc:	6059      	strne	r1, [r3, #4]
 80074be:	6863      	ldr	r3, [r4, #4]
 80074c0:	bf08      	it	eq
 80074c2:	6031      	streq	r1, [r6, #0]
 80074c4:	5162      	str	r2, [r4, r5]
 80074c6:	604b      	str	r3, [r1, #4]
 80074c8:	4638      	mov	r0, r7
 80074ca:	f104 060b 	add.w	r6, r4, #11
 80074ce:	f000 f9ed 	bl	80078ac <__malloc_unlock>
 80074d2:	f026 0607 	bic.w	r6, r6, #7
 80074d6:	1d23      	adds	r3, r4, #4
 80074d8:	1af2      	subs	r2, r6, r3
 80074da:	d0b6      	beq.n	800744a <_malloc_r+0x22>
 80074dc:	1b9b      	subs	r3, r3, r6
 80074de:	50a3      	str	r3, [r4, r2]
 80074e0:	e7b3      	b.n	800744a <_malloc_r+0x22>
 80074e2:	6862      	ldr	r2, [r4, #4]
 80074e4:	42a3      	cmp	r3, r4
 80074e6:	bf0c      	ite	eq
 80074e8:	6032      	streq	r2, [r6, #0]
 80074ea:	605a      	strne	r2, [r3, #4]
 80074ec:	e7ec      	b.n	80074c8 <_malloc_r+0xa0>
 80074ee:	4623      	mov	r3, r4
 80074f0:	6864      	ldr	r4, [r4, #4]
 80074f2:	e7b2      	b.n	800745a <_malloc_r+0x32>
 80074f4:	4634      	mov	r4, r6
 80074f6:	6876      	ldr	r6, [r6, #4]
 80074f8:	e7b9      	b.n	800746e <_malloc_r+0x46>
 80074fa:	230c      	movs	r3, #12
 80074fc:	4638      	mov	r0, r7
 80074fe:	603b      	str	r3, [r7, #0]
 8007500:	f000 f9d4 	bl	80078ac <__malloc_unlock>
 8007504:	e7a1      	b.n	800744a <_malloc_r+0x22>
 8007506:	6025      	str	r5, [r4, #0]
 8007508:	e7de      	b.n	80074c8 <_malloc_r+0xa0>
 800750a:	bf00      	nop
 800750c:	200007bc 	.word	0x200007bc

08007510 <__ssputs_r>:
 8007510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007514:	688e      	ldr	r6, [r1, #8]
 8007516:	4682      	mov	sl, r0
 8007518:	429e      	cmp	r6, r3
 800751a:	460c      	mov	r4, r1
 800751c:	4690      	mov	r8, r2
 800751e:	461f      	mov	r7, r3
 8007520:	d838      	bhi.n	8007594 <__ssputs_r+0x84>
 8007522:	898a      	ldrh	r2, [r1, #12]
 8007524:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007528:	d032      	beq.n	8007590 <__ssputs_r+0x80>
 800752a:	6825      	ldr	r5, [r4, #0]
 800752c:	6909      	ldr	r1, [r1, #16]
 800752e:	3301      	adds	r3, #1
 8007530:	eba5 0901 	sub.w	r9, r5, r1
 8007534:	6965      	ldr	r5, [r4, #20]
 8007536:	444b      	add	r3, r9
 8007538:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800753c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007540:	106d      	asrs	r5, r5, #1
 8007542:	429d      	cmp	r5, r3
 8007544:	bf38      	it	cc
 8007546:	461d      	movcc	r5, r3
 8007548:	0553      	lsls	r3, r2, #21
 800754a:	d531      	bpl.n	80075b0 <__ssputs_r+0xa0>
 800754c:	4629      	mov	r1, r5
 800754e:	f7ff ff6b 	bl	8007428 <_malloc_r>
 8007552:	4606      	mov	r6, r0
 8007554:	b950      	cbnz	r0, 800756c <__ssputs_r+0x5c>
 8007556:	230c      	movs	r3, #12
 8007558:	f04f 30ff 	mov.w	r0, #4294967295
 800755c:	f8ca 3000 	str.w	r3, [sl]
 8007560:	89a3      	ldrh	r3, [r4, #12]
 8007562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007566:	81a3      	strh	r3, [r4, #12]
 8007568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800756c:	464a      	mov	r2, r9
 800756e:	6921      	ldr	r1, [r4, #16]
 8007570:	f7ff fb4e 	bl	8006c10 <memcpy>
 8007574:	89a3      	ldrh	r3, [r4, #12]
 8007576:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800757a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800757e:	81a3      	strh	r3, [r4, #12]
 8007580:	6126      	str	r6, [r4, #16]
 8007582:	444e      	add	r6, r9
 8007584:	6026      	str	r6, [r4, #0]
 8007586:	463e      	mov	r6, r7
 8007588:	6165      	str	r5, [r4, #20]
 800758a:	eba5 0509 	sub.w	r5, r5, r9
 800758e:	60a5      	str	r5, [r4, #8]
 8007590:	42be      	cmp	r6, r7
 8007592:	d900      	bls.n	8007596 <__ssputs_r+0x86>
 8007594:	463e      	mov	r6, r7
 8007596:	4632      	mov	r2, r6
 8007598:	4641      	mov	r1, r8
 800759a:	6820      	ldr	r0, [r4, #0]
 800759c:	f000 f966 	bl	800786c <memmove>
 80075a0:	68a3      	ldr	r3, [r4, #8]
 80075a2:	2000      	movs	r0, #0
 80075a4:	1b9b      	subs	r3, r3, r6
 80075a6:	60a3      	str	r3, [r4, #8]
 80075a8:	6823      	ldr	r3, [r4, #0]
 80075aa:	4433      	add	r3, r6
 80075ac:	6023      	str	r3, [r4, #0]
 80075ae:	e7db      	b.n	8007568 <__ssputs_r+0x58>
 80075b0:	462a      	mov	r2, r5
 80075b2:	f000 f981 	bl	80078b8 <_realloc_r>
 80075b6:	4606      	mov	r6, r0
 80075b8:	2800      	cmp	r0, #0
 80075ba:	d1e1      	bne.n	8007580 <__ssputs_r+0x70>
 80075bc:	4650      	mov	r0, sl
 80075be:	6921      	ldr	r1, [r4, #16]
 80075c0:	f7ff feca 	bl	8007358 <_free_r>
 80075c4:	e7c7      	b.n	8007556 <__ssputs_r+0x46>
	...

080075c8 <_svfiprintf_r>:
 80075c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075cc:	4698      	mov	r8, r3
 80075ce:	898b      	ldrh	r3, [r1, #12]
 80075d0:	4607      	mov	r7, r0
 80075d2:	061b      	lsls	r3, r3, #24
 80075d4:	460d      	mov	r5, r1
 80075d6:	4614      	mov	r4, r2
 80075d8:	b09d      	sub	sp, #116	; 0x74
 80075da:	d50e      	bpl.n	80075fa <_svfiprintf_r+0x32>
 80075dc:	690b      	ldr	r3, [r1, #16]
 80075de:	b963      	cbnz	r3, 80075fa <_svfiprintf_r+0x32>
 80075e0:	2140      	movs	r1, #64	; 0x40
 80075e2:	f7ff ff21 	bl	8007428 <_malloc_r>
 80075e6:	6028      	str	r0, [r5, #0]
 80075e8:	6128      	str	r0, [r5, #16]
 80075ea:	b920      	cbnz	r0, 80075f6 <_svfiprintf_r+0x2e>
 80075ec:	230c      	movs	r3, #12
 80075ee:	603b      	str	r3, [r7, #0]
 80075f0:	f04f 30ff 	mov.w	r0, #4294967295
 80075f4:	e0d1      	b.n	800779a <_svfiprintf_r+0x1d2>
 80075f6:	2340      	movs	r3, #64	; 0x40
 80075f8:	616b      	str	r3, [r5, #20]
 80075fa:	2300      	movs	r3, #0
 80075fc:	9309      	str	r3, [sp, #36]	; 0x24
 80075fe:	2320      	movs	r3, #32
 8007600:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007604:	2330      	movs	r3, #48	; 0x30
 8007606:	f04f 0901 	mov.w	r9, #1
 800760a:	f8cd 800c 	str.w	r8, [sp, #12]
 800760e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80077b4 <_svfiprintf_r+0x1ec>
 8007612:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007616:	4623      	mov	r3, r4
 8007618:	469a      	mov	sl, r3
 800761a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800761e:	b10a      	cbz	r2, 8007624 <_svfiprintf_r+0x5c>
 8007620:	2a25      	cmp	r2, #37	; 0x25
 8007622:	d1f9      	bne.n	8007618 <_svfiprintf_r+0x50>
 8007624:	ebba 0b04 	subs.w	fp, sl, r4
 8007628:	d00b      	beq.n	8007642 <_svfiprintf_r+0x7a>
 800762a:	465b      	mov	r3, fp
 800762c:	4622      	mov	r2, r4
 800762e:	4629      	mov	r1, r5
 8007630:	4638      	mov	r0, r7
 8007632:	f7ff ff6d 	bl	8007510 <__ssputs_r>
 8007636:	3001      	adds	r0, #1
 8007638:	f000 80aa 	beq.w	8007790 <_svfiprintf_r+0x1c8>
 800763c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800763e:	445a      	add	r2, fp
 8007640:	9209      	str	r2, [sp, #36]	; 0x24
 8007642:	f89a 3000 	ldrb.w	r3, [sl]
 8007646:	2b00      	cmp	r3, #0
 8007648:	f000 80a2 	beq.w	8007790 <_svfiprintf_r+0x1c8>
 800764c:	2300      	movs	r3, #0
 800764e:	f04f 32ff 	mov.w	r2, #4294967295
 8007652:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007656:	f10a 0a01 	add.w	sl, sl, #1
 800765a:	9304      	str	r3, [sp, #16]
 800765c:	9307      	str	r3, [sp, #28]
 800765e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007662:	931a      	str	r3, [sp, #104]	; 0x68
 8007664:	4654      	mov	r4, sl
 8007666:	2205      	movs	r2, #5
 8007668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800766c:	4851      	ldr	r0, [pc, #324]	; (80077b4 <_svfiprintf_r+0x1ec>)
 800766e:	f7ff fac1 	bl	8006bf4 <memchr>
 8007672:	9a04      	ldr	r2, [sp, #16]
 8007674:	b9d8      	cbnz	r0, 80076ae <_svfiprintf_r+0xe6>
 8007676:	06d0      	lsls	r0, r2, #27
 8007678:	bf44      	itt	mi
 800767a:	2320      	movmi	r3, #32
 800767c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007680:	0711      	lsls	r1, r2, #28
 8007682:	bf44      	itt	mi
 8007684:	232b      	movmi	r3, #43	; 0x2b
 8007686:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800768a:	f89a 3000 	ldrb.w	r3, [sl]
 800768e:	2b2a      	cmp	r3, #42	; 0x2a
 8007690:	d015      	beq.n	80076be <_svfiprintf_r+0xf6>
 8007692:	4654      	mov	r4, sl
 8007694:	2000      	movs	r0, #0
 8007696:	f04f 0c0a 	mov.w	ip, #10
 800769a:	9a07      	ldr	r2, [sp, #28]
 800769c:	4621      	mov	r1, r4
 800769e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076a2:	3b30      	subs	r3, #48	; 0x30
 80076a4:	2b09      	cmp	r3, #9
 80076a6:	d94e      	bls.n	8007746 <_svfiprintf_r+0x17e>
 80076a8:	b1b0      	cbz	r0, 80076d8 <_svfiprintf_r+0x110>
 80076aa:	9207      	str	r2, [sp, #28]
 80076ac:	e014      	b.n	80076d8 <_svfiprintf_r+0x110>
 80076ae:	eba0 0308 	sub.w	r3, r0, r8
 80076b2:	fa09 f303 	lsl.w	r3, r9, r3
 80076b6:	4313      	orrs	r3, r2
 80076b8:	46a2      	mov	sl, r4
 80076ba:	9304      	str	r3, [sp, #16]
 80076bc:	e7d2      	b.n	8007664 <_svfiprintf_r+0x9c>
 80076be:	9b03      	ldr	r3, [sp, #12]
 80076c0:	1d19      	adds	r1, r3, #4
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	9103      	str	r1, [sp, #12]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	bfbb      	ittet	lt
 80076ca:	425b      	neglt	r3, r3
 80076cc:	f042 0202 	orrlt.w	r2, r2, #2
 80076d0:	9307      	strge	r3, [sp, #28]
 80076d2:	9307      	strlt	r3, [sp, #28]
 80076d4:	bfb8      	it	lt
 80076d6:	9204      	strlt	r2, [sp, #16]
 80076d8:	7823      	ldrb	r3, [r4, #0]
 80076da:	2b2e      	cmp	r3, #46	; 0x2e
 80076dc:	d10c      	bne.n	80076f8 <_svfiprintf_r+0x130>
 80076de:	7863      	ldrb	r3, [r4, #1]
 80076e0:	2b2a      	cmp	r3, #42	; 0x2a
 80076e2:	d135      	bne.n	8007750 <_svfiprintf_r+0x188>
 80076e4:	9b03      	ldr	r3, [sp, #12]
 80076e6:	3402      	adds	r4, #2
 80076e8:	1d1a      	adds	r2, r3, #4
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	9203      	str	r2, [sp, #12]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	bfb8      	it	lt
 80076f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80076f6:	9305      	str	r3, [sp, #20]
 80076f8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80077b8 <_svfiprintf_r+0x1f0>
 80076fc:	2203      	movs	r2, #3
 80076fe:	4650      	mov	r0, sl
 8007700:	7821      	ldrb	r1, [r4, #0]
 8007702:	f7ff fa77 	bl	8006bf4 <memchr>
 8007706:	b140      	cbz	r0, 800771a <_svfiprintf_r+0x152>
 8007708:	2340      	movs	r3, #64	; 0x40
 800770a:	eba0 000a 	sub.w	r0, r0, sl
 800770e:	fa03 f000 	lsl.w	r0, r3, r0
 8007712:	9b04      	ldr	r3, [sp, #16]
 8007714:	3401      	adds	r4, #1
 8007716:	4303      	orrs	r3, r0
 8007718:	9304      	str	r3, [sp, #16]
 800771a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800771e:	2206      	movs	r2, #6
 8007720:	4826      	ldr	r0, [pc, #152]	; (80077bc <_svfiprintf_r+0x1f4>)
 8007722:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007726:	f7ff fa65 	bl	8006bf4 <memchr>
 800772a:	2800      	cmp	r0, #0
 800772c:	d038      	beq.n	80077a0 <_svfiprintf_r+0x1d8>
 800772e:	4b24      	ldr	r3, [pc, #144]	; (80077c0 <_svfiprintf_r+0x1f8>)
 8007730:	bb1b      	cbnz	r3, 800777a <_svfiprintf_r+0x1b2>
 8007732:	9b03      	ldr	r3, [sp, #12]
 8007734:	3307      	adds	r3, #7
 8007736:	f023 0307 	bic.w	r3, r3, #7
 800773a:	3308      	adds	r3, #8
 800773c:	9303      	str	r3, [sp, #12]
 800773e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007740:	4433      	add	r3, r6
 8007742:	9309      	str	r3, [sp, #36]	; 0x24
 8007744:	e767      	b.n	8007616 <_svfiprintf_r+0x4e>
 8007746:	460c      	mov	r4, r1
 8007748:	2001      	movs	r0, #1
 800774a:	fb0c 3202 	mla	r2, ip, r2, r3
 800774e:	e7a5      	b.n	800769c <_svfiprintf_r+0xd4>
 8007750:	2300      	movs	r3, #0
 8007752:	f04f 0c0a 	mov.w	ip, #10
 8007756:	4619      	mov	r1, r3
 8007758:	3401      	adds	r4, #1
 800775a:	9305      	str	r3, [sp, #20]
 800775c:	4620      	mov	r0, r4
 800775e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007762:	3a30      	subs	r2, #48	; 0x30
 8007764:	2a09      	cmp	r2, #9
 8007766:	d903      	bls.n	8007770 <_svfiprintf_r+0x1a8>
 8007768:	2b00      	cmp	r3, #0
 800776a:	d0c5      	beq.n	80076f8 <_svfiprintf_r+0x130>
 800776c:	9105      	str	r1, [sp, #20]
 800776e:	e7c3      	b.n	80076f8 <_svfiprintf_r+0x130>
 8007770:	4604      	mov	r4, r0
 8007772:	2301      	movs	r3, #1
 8007774:	fb0c 2101 	mla	r1, ip, r1, r2
 8007778:	e7f0      	b.n	800775c <_svfiprintf_r+0x194>
 800777a:	ab03      	add	r3, sp, #12
 800777c:	9300      	str	r3, [sp, #0]
 800777e:	462a      	mov	r2, r5
 8007780:	4638      	mov	r0, r7
 8007782:	4b10      	ldr	r3, [pc, #64]	; (80077c4 <_svfiprintf_r+0x1fc>)
 8007784:	a904      	add	r1, sp, #16
 8007786:	f7fd ffcb 	bl	8005720 <_printf_float>
 800778a:	1c42      	adds	r2, r0, #1
 800778c:	4606      	mov	r6, r0
 800778e:	d1d6      	bne.n	800773e <_svfiprintf_r+0x176>
 8007790:	89ab      	ldrh	r3, [r5, #12]
 8007792:	065b      	lsls	r3, r3, #25
 8007794:	f53f af2c 	bmi.w	80075f0 <_svfiprintf_r+0x28>
 8007798:	9809      	ldr	r0, [sp, #36]	; 0x24
 800779a:	b01d      	add	sp, #116	; 0x74
 800779c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077a0:	ab03      	add	r3, sp, #12
 80077a2:	9300      	str	r3, [sp, #0]
 80077a4:	462a      	mov	r2, r5
 80077a6:	4638      	mov	r0, r7
 80077a8:	4b06      	ldr	r3, [pc, #24]	; (80077c4 <_svfiprintf_r+0x1fc>)
 80077aa:	a904      	add	r1, sp, #16
 80077ac:	f7fe fa54 	bl	8005c58 <_printf_i>
 80077b0:	e7eb      	b.n	800778a <_svfiprintf_r+0x1c2>
 80077b2:	bf00      	nop
 80077b4:	0800a114 	.word	0x0800a114
 80077b8:	0800a11a 	.word	0x0800a11a
 80077bc:	0800a11e 	.word	0x0800a11e
 80077c0:	08005721 	.word	0x08005721
 80077c4:	08007511 	.word	0x08007511

080077c8 <_sbrk_r>:
 80077c8:	b538      	push	{r3, r4, r5, lr}
 80077ca:	2300      	movs	r3, #0
 80077cc:	4d05      	ldr	r5, [pc, #20]	; (80077e4 <_sbrk_r+0x1c>)
 80077ce:	4604      	mov	r4, r0
 80077d0:	4608      	mov	r0, r1
 80077d2:	602b      	str	r3, [r5, #0]
 80077d4:	f7fa fdd2 	bl	800237c <_sbrk>
 80077d8:	1c43      	adds	r3, r0, #1
 80077da:	d102      	bne.n	80077e2 <_sbrk_r+0x1a>
 80077dc:	682b      	ldr	r3, [r5, #0]
 80077de:	b103      	cbz	r3, 80077e2 <_sbrk_r+0x1a>
 80077e0:	6023      	str	r3, [r4, #0]
 80077e2:	bd38      	pop	{r3, r4, r5, pc}
 80077e4:	200007c4 	.word	0x200007c4

080077e8 <__assert_func>:
 80077e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80077ea:	4614      	mov	r4, r2
 80077ec:	461a      	mov	r2, r3
 80077ee:	4b09      	ldr	r3, [pc, #36]	; (8007814 <__assert_func+0x2c>)
 80077f0:	4605      	mov	r5, r0
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68d8      	ldr	r0, [r3, #12]
 80077f6:	b14c      	cbz	r4, 800780c <__assert_func+0x24>
 80077f8:	4b07      	ldr	r3, [pc, #28]	; (8007818 <__assert_func+0x30>)
 80077fa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80077fe:	9100      	str	r1, [sp, #0]
 8007800:	462b      	mov	r3, r5
 8007802:	4906      	ldr	r1, [pc, #24]	; (800781c <__assert_func+0x34>)
 8007804:	f000 f80e 	bl	8007824 <fiprintf>
 8007808:	f000 faaa 	bl	8007d60 <abort>
 800780c:	4b04      	ldr	r3, [pc, #16]	; (8007820 <__assert_func+0x38>)
 800780e:	461c      	mov	r4, r3
 8007810:	e7f3      	b.n	80077fa <__assert_func+0x12>
 8007812:	bf00      	nop
 8007814:	2000001c 	.word	0x2000001c
 8007818:	0800a125 	.word	0x0800a125
 800781c:	0800a132 	.word	0x0800a132
 8007820:	0800a160 	.word	0x0800a160

08007824 <fiprintf>:
 8007824:	b40e      	push	{r1, r2, r3}
 8007826:	b503      	push	{r0, r1, lr}
 8007828:	4601      	mov	r1, r0
 800782a:	ab03      	add	r3, sp, #12
 800782c:	4805      	ldr	r0, [pc, #20]	; (8007844 <fiprintf+0x20>)
 800782e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007832:	6800      	ldr	r0, [r0, #0]
 8007834:	9301      	str	r3, [sp, #4]
 8007836:	f000 f895 	bl	8007964 <_vfiprintf_r>
 800783a:	b002      	add	sp, #8
 800783c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007840:	b003      	add	sp, #12
 8007842:	4770      	bx	lr
 8007844:	2000001c 	.word	0x2000001c

08007848 <__ascii_mbtowc>:
 8007848:	b082      	sub	sp, #8
 800784a:	b901      	cbnz	r1, 800784e <__ascii_mbtowc+0x6>
 800784c:	a901      	add	r1, sp, #4
 800784e:	b142      	cbz	r2, 8007862 <__ascii_mbtowc+0x1a>
 8007850:	b14b      	cbz	r3, 8007866 <__ascii_mbtowc+0x1e>
 8007852:	7813      	ldrb	r3, [r2, #0]
 8007854:	600b      	str	r3, [r1, #0]
 8007856:	7812      	ldrb	r2, [r2, #0]
 8007858:	1e10      	subs	r0, r2, #0
 800785a:	bf18      	it	ne
 800785c:	2001      	movne	r0, #1
 800785e:	b002      	add	sp, #8
 8007860:	4770      	bx	lr
 8007862:	4610      	mov	r0, r2
 8007864:	e7fb      	b.n	800785e <__ascii_mbtowc+0x16>
 8007866:	f06f 0001 	mvn.w	r0, #1
 800786a:	e7f8      	b.n	800785e <__ascii_mbtowc+0x16>

0800786c <memmove>:
 800786c:	4288      	cmp	r0, r1
 800786e:	b510      	push	{r4, lr}
 8007870:	eb01 0402 	add.w	r4, r1, r2
 8007874:	d902      	bls.n	800787c <memmove+0x10>
 8007876:	4284      	cmp	r4, r0
 8007878:	4623      	mov	r3, r4
 800787a:	d807      	bhi.n	800788c <memmove+0x20>
 800787c:	1e43      	subs	r3, r0, #1
 800787e:	42a1      	cmp	r1, r4
 8007880:	d008      	beq.n	8007894 <memmove+0x28>
 8007882:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007886:	f803 2f01 	strb.w	r2, [r3, #1]!
 800788a:	e7f8      	b.n	800787e <memmove+0x12>
 800788c:	4601      	mov	r1, r0
 800788e:	4402      	add	r2, r0
 8007890:	428a      	cmp	r2, r1
 8007892:	d100      	bne.n	8007896 <memmove+0x2a>
 8007894:	bd10      	pop	{r4, pc}
 8007896:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800789a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800789e:	e7f7      	b.n	8007890 <memmove+0x24>

080078a0 <__malloc_lock>:
 80078a0:	4801      	ldr	r0, [pc, #4]	; (80078a8 <__malloc_lock+0x8>)
 80078a2:	f000 bc19 	b.w	80080d8 <__retarget_lock_acquire_recursive>
 80078a6:	bf00      	nop
 80078a8:	200007c8 	.word	0x200007c8

080078ac <__malloc_unlock>:
 80078ac:	4801      	ldr	r0, [pc, #4]	; (80078b4 <__malloc_unlock+0x8>)
 80078ae:	f000 bc14 	b.w	80080da <__retarget_lock_release_recursive>
 80078b2:	bf00      	nop
 80078b4:	200007c8 	.word	0x200007c8

080078b8 <_realloc_r>:
 80078b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078bc:	4680      	mov	r8, r0
 80078be:	4614      	mov	r4, r2
 80078c0:	460e      	mov	r6, r1
 80078c2:	b921      	cbnz	r1, 80078ce <_realloc_r+0x16>
 80078c4:	4611      	mov	r1, r2
 80078c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078ca:	f7ff bdad 	b.w	8007428 <_malloc_r>
 80078ce:	b92a      	cbnz	r2, 80078dc <_realloc_r+0x24>
 80078d0:	f7ff fd42 	bl	8007358 <_free_r>
 80078d4:	4625      	mov	r5, r4
 80078d6:	4628      	mov	r0, r5
 80078d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078dc:	f000 fc64 	bl	80081a8 <_malloc_usable_size_r>
 80078e0:	4284      	cmp	r4, r0
 80078e2:	4607      	mov	r7, r0
 80078e4:	d802      	bhi.n	80078ec <_realloc_r+0x34>
 80078e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80078ea:	d812      	bhi.n	8007912 <_realloc_r+0x5a>
 80078ec:	4621      	mov	r1, r4
 80078ee:	4640      	mov	r0, r8
 80078f0:	f7ff fd9a 	bl	8007428 <_malloc_r>
 80078f4:	4605      	mov	r5, r0
 80078f6:	2800      	cmp	r0, #0
 80078f8:	d0ed      	beq.n	80078d6 <_realloc_r+0x1e>
 80078fa:	42bc      	cmp	r4, r7
 80078fc:	4622      	mov	r2, r4
 80078fe:	4631      	mov	r1, r6
 8007900:	bf28      	it	cs
 8007902:	463a      	movcs	r2, r7
 8007904:	f7ff f984 	bl	8006c10 <memcpy>
 8007908:	4631      	mov	r1, r6
 800790a:	4640      	mov	r0, r8
 800790c:	f7ff fd24 	bl	8007358 <_free_r>
 8007910:	e7e1      	b.n	80078d6 <_realloc_r+0x1e>
 8007912:	4635      	mov	r5, r6
 8007914:	e7df      	b.n	80078d6 <_realloc_r+0x1e>

08007916 <__sfputc_r>:
 8007916:	6893      	ldr	r3, [r2, #8]
 8007918:	b410      	push	{r4}
 800791a:	3b01      	subs	r3, #1
 800791c:	2b00      	cmp	r3, #0
 800791e:	6093      	str	r3, [r2, #8]
 8007920:	da07      	bge.n	8007932 <__sfputc_r+0x1c>
 8007922:	6994      	ldr	r4, [r2, #24]
 8007924:	42a3      	cmp	r3, r4
 8007926:	db01      	blt.n	800792c <__sfputc_r+0x16>
 8007928:	290a      	cmp	r1, #10
 800792a:	d102      	bne.n	8007932 <__sfputc_r+0x1c>
 800792c:	bc10      	pop	{r4}
 800792e:	f000 b949 	b.w	8007bc4 <__swbuf_r>
 8007932:	6813      	ldr	r3, [r2, #0]
 8007934:	1c58      	adds	r0, r3, #1
 8007936:	6010      	str	r0, [r2, #0]
 8007938:	7019      	strb	r1, [r3, #0]
 800793a:	4608      	mov	r0, r1
 800793c:	bc10      	pop	{r4}
 800793e:	4770      	bx	lr

08007940 <__sfputs_r>:
 8007940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007942:	4606      	mov	r6, r0
 8007944:	460f      	mov	r7, r1
 8007946:	4614      	mov	r4, r2
 8007948:	18d5      	adds	r5, r2, r3
 800794a:	42ac      	cmp	r4, r5
 800794c:	d101      	bne.n	8007952 <__sfputs_r+0x12>
 800794e:	2000      	movs	r0, #0
 8007950:	e007      	b.n	8007962 <__sfputs_r+0x22>
 8007952:	463a      	mov	r2, r7
 8007954:	4630      	mov	r0, r6
 8007956:	f814 1b01 	ldrb.w	r1, [r4], #1
 800795a:	f7ff ffdc 	bl	8007916 <__sfputc_r>
 800795e:	1c43      	adds	r3, r0, #1
 8007960:	d1f3      	bne.n	800794a <__sfputs_r+0xa>
 8007962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007964 <_vfiprintf_r>:
 8007964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007968:	460d      	mov	r5, r1
 800796a:	4614      	mov	r4, r2
 800796c:	4698      	mov	r8, r3
 800796e:	4606      	mov	r6, r0
 8007970:	b09d      	sub	sp, #116	; 0x74
 8007972:	b118      	cbz	r0, 800797c <_vfiprintf_r+0x18>
 8007974:	6983      	ldr	r3, [r0, #24]
 8007976:	b90b      	cbnz	r3, 800797c <_vfiprintf_r+0x18>
 8007978:	f000 fb10 	bl	8007f9c <__sinit>
 800797c:	4b89      	ldr	r3, [pc, #548]	; (8007ba4 <_vfiprintf_r+0x240>)
 800797e:	429d      	cmp	r5, r3
 8007980:	d11b      	bne.n	80079ba <_vfiprintf_r+0x56>
 8007982:	6875      	ldr	r5, [r6, #4]
 8007984:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007986:	07d9      	lsls	r1, r3, #31
 8007988:	d405      	bmi.n	8007996 <_vfiprintf_r+0x32>
 800798a:	89ab      	ldrh	r3, [r5, #12]
 800798c:	059a      	lsls	r2, r3, #22
 800798e:	d402      	bmi.n	8007996 <_vfiprintf_r+0x32>
 8007990:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007992:	f000 fba1 	bl	80080d8 <__retarget_lock_acquire_recursive>
 8007996:	89ab      	ldrh	r3, [r5, #12]
 8007998:	071b      	lsls	r3, r3, #28
 800799a:	d501      	bpl.n	80079a0 <_vfiprintf_r+0x3c>
 800799c:	692b      	ldr	r3, [r5, #16]
 800799e:	b9eb      	cbnz	r3, 80079dc <_vfiprintf_r+0x78>
 80079a0:	4629      	mov	r1, r5
 80079a2:	4630      	mov	r0, r6
 80079a4:	f000 f96e 	bl	8007c84 <__swsetup_r>
 80079a8:	b1c0      	cbz	r0, 80079dc <_vfiprintf_r+0x78>
 80079aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079ac:	07dc      	lsls	r4, r3, #31
 80079ae:	d50e      	bpl.n	80079ce <_vfiprintf_r+0x6a>
 80079b0:	f04f 30ff 	mov.w	r0, #4294967295
 80079b4:	b01d      	add	sp, #116	; 0x74
 80079b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ba:	4b7b      	ldr	r3, [pc, #492]	; (8007ba8 <_vfiprintf_r+0x244>)
 80079bc:	429d      	cmp	r5, r3
 80079be:	d101      	bne.n	80079c4 <_vfiprintf_r+0x60>
 80079c0:	68b5      	ldr	r5, [r6, #8]
 80079c2:	e7df      	b.n	8007984 <_vfiprintf_r+0x20>
 80079c4:	4b79      	ldr	r3, [pc, #484]	; (8007bac <_vfiprintf_r+0x248>)
 80079c6:	429d      	cmp	r5, r3
 80079c8:	bf08      	it	eq
 80079ca:	68f5      	ldreq	r5, [r6, #12]
 80079cc:	e7da      	b.n	8007984 <_vfiprintf_r+0x20>
 80079ce:	89ab      	ldrh	r3, [r5, #12]
 80079d0:	0598      	lsls	r0, r3, #22
 80079d2:	d4ed      	bmi.n	80079b0 <_vfiprintf_r+0x4c>
 80079d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079d6:	f000 fb80 	bl	80080da <__retarget_lock_release_recursive>
 80079da:	e7e9      	b.n	80079b0 <_vfiprintf_r+0x4c>
 80079dc:	2300      	movs	r3, #0
 80079de:	9309      	str	r3, [sp, #36]	; 0x24
 80079e0:	2320      	movs	r3, #32
 80079e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079e6:	2330      	movs	r3, #48	; 0x30
 80079e8:	f04f 0901 	mov.w	r9, #1
 80079ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80079f0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007bb0 <_vfiprintf_r+0x24c>
 80079f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079f8:	4623      	mov	r3, r4
 80079fa:	469a      	mov	sl, r3
 80079fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a00:	b10a      	cbz	r2, 8007a06 <_vfiprintf_r+0xa2>
 8007a02:	2a25      	cmp	r2, #37	; 0x25
 8007a04:	d1f9      	bne.n	80079fa <_vfiprintf_r+0x96>
 8007a06:	ebba 0b04 	subs.w	fp, sl, r4
 8007a0a:	d00b      	beq.n	8007a24 <_vfiprintf_r+0xc0>
 8007a0c:	465b      	mov	r3, fp
 8007a0e:	4622      	mov	r2, r4
 8007a10:	4629      	mov	r1, r5
 8007a12:	4630      	mov	r0, r6
 8007a14:	f7ff ff94 	bl	8007940 <__sfputs_r>
 8007a18:	3001      	adds	r0, #1
 8007a1a:	f000 80aa 	beq.w	8007b72 <_vfiprintf_r+0x20e>
 8007a1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a20:	445a      	add	r2, fp
 8007a22:	9209      	str	r2, [sp, #36]	; 0x24
 8007a24:	f89a 3000 	ldrb.w	r3, [sl]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f000 80a2 	beq.w	8007b72 <_vfiprintf_r+0x20e>
 8007a2e:	2300      	movs	r3, #0
 8007a30:	f04f 32ff 	mov.w	r2, #4294967295
 8007a34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a38:	f10a 0a01 	add.w	sl, sl, #1
 8007a3c:	9304      	str	r3, [sp, #16]
 8007a3e:	9307      	str	r3, [sp, #28]
 8007a40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a44:	931a      	str	r3, [sp, #104]	; 0x68
 8007a46:	4654      	mov	r4, sl
 8007a48:	2205      	movs	r2, #5
 8007a4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a4e:	4858      	ldr	r0, [pc, #352]	; (8007bb0 <_vfiprintf_r+0x24c>)
 8007a50:	f7ff f8d0 	bl	8006bf4 <memchr>
 8007a54:	9a04      	ldr	r2, [sp, #16]
 8007a56:	b9d8      	cbnz	r0, 8007a90 <_vfiprintf_r+0x12c>
 8007a58:	06d1      	lsls	r1, r2, #27
 8007a5a:	bf44      	itt	mi
 8007a5c:	2320      	movmi	r3, #32
 8007a5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a62:	0713      	lsls	r3, r2, #28
 8007a64:	bf44      	itt	mi
 8007a66:	232b      	movmi	r3, #43	; 0x2b
 8007a68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a6c:	f89a 3000 	ldrb.w	r3, [sl]
 8007a70:	2b2a      	cmp	r3, #42	; 0x2a
 8007a72:	d015      	beq.n	8007aa0 <_vfiprintf_r+0x13c>
 8007a74:	4654      	mov	r4, sl
 8007a76:	2000      	movs	r0, #0
 8007a78:	f04f 0c0a 	mov.w	ip, #10
 8007a7c:	9a07      	ldr	r2, [sp, #28]
 8007a7e:	4621      	mov	r1, r4
 8007a80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a84:	3b30      	subs	r3, #48	; 0x30
 8007a86:	2b09      	cmp	r3, #9
 8007a88:	d94e      	bls.n	8007b28 <_vfiprintf_r+0x1c4>
 8007a8a:	b1b0      	cbz	r0, 8007aba <_vfiprintf_r+0x156>
 8007a8c:	9207      	str	r2, [sp, #28]
 8007a8e:	e014      	b.n	8007aba <_vfiprintf_r+0x156>
 8007a90:	eba0 0308 	sub.w	r3, r0, r8
 8007a94:	fa09 f303 	lsl.w	r3, r9, r3
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	46a2      	mov	sl, r4
 8007a9c:	9304      	str	r3, [sp, #16]
 8007a9e:	e7d2      	b.n	8007a46 <_vfiprintf_r+0xe2>
 8007aa0:	9b03      	ldr	r3, [sp, #12]
 8007aa2:	1d19      	adds	r1, r3, #4
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	9103      	str	r1, [sp, #12]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	bfbb      	ittet	lt
 8007aac:	425b      	neglt	r3, r3
 8007aae:	f042 0202 	orrlt.w	r2, r2, #2
 8007ab2:	9307      	strge	r3, [sp, #28]
 8007ab4:	9307      	strlt	r3, [sp, #28]
 8007ab6:	bfb8      	it	lt
 8007ab8:	9204      	strlt	r2, [sp, #16]
 8007aba:	7823      	ldrb	r3, [r4, #0]
 8007abc:	2b2e      	cmp	r3, #46	; 0x2e
 8007abe:	d10c      	bne.n	8007ada <_vfiprintf_r+0x176>
 8007ac0:	7863      	ldrb	r3, [r4, #1]
 8007ac2:	2b2a      	cmp	r3, #42	; 0x2a
 8007ac4:	d135      	bne.n	8007b32 <_vfiprintf_r+0x1ce>
 8007ac6:	9b03      	ldr	r3, [sp, #12]
 8007ac8:	3402      	adds	r4, #2
 8007aca:	1d1a      	adds	r2, r3, #4
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	9203      	str	r2, [sp, #12]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	bfb8      	it	lt
 8007ad4:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ad8:	9305      	str	r3, [sp, #20]
 8007ada:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007bb4 <_vfiprintf_r+0x250>
 8007ade:	2203      	movs	r2, #3
 8007ae0:	4650      	mov	r0, sl
 8007ae2:	7821      	ldrb	r1, [r4, #0]
 8007ae4:	f7ff f886 	bl	8006bf4 <memchr>
 8007ae8:	b140      	cbz	r0, 8007afc <_vfiprintf_r+0x198>
 8007aea:	2340      	movs	r3, #64	; 0x40
 8007aec:	eba0 000a 	sub.w	r0, r0, sl
 8007af0:	fa03 f000 	lsl.w	r0, r3, r0
 8007af4:	9b04      	ldr	r3, [sp, #16]
 8007af6:	3401      	adds	r4, #1
 8007af8:	4303      	orrs	r3, r0
 8007afa:	9304      	str	r3, [sp, #16]
 8007afc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b00:	2206      	movs	r2, #6
 8007b02:	482d      	ldr	r0, [pc, #180]	; (8007bb8 <_vfiprintf_r+0x254>)
 8007b04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b08:	f7ff f874 	bl	8006bf4 <memchr>
 8007b0c:	2800      	cmp	r0, #0
 8007b0e:	d03f      	beq.n	8007b90 <_vfiprintf_r+0x22c>
 8007b10:	4b2a      	ldr	r3, [pc, #168]	; (8007bbc <_vfiprintf_r+0x258>)
 8007b12:	bb1b      	cbnz	r3, 8007b5c <_vfiprintf_r+0x1f8>
 8007b14:	9b03      	ldr	r3, [sp, #12]
 8007b16:	3307      	adds	r3, #7
 8007b18:	f023 0307 	bic.w	r3, r3, #7
 8007b1c:	3308      	adds	r3, #8
 8007b1e:	9303      	str	r3, [sp, #12]
 8007b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b22:	443b      	add	r3, r7
 8007b24:	9309      	str	r3, [sp, #36]	; 0x24
 8007b26:	e767      	b.n	80079f8 <_vfiprintf_r+0x94>
 8007b28:	460c      	mov	r4, r1
 8007b2a:	2001      	movs	r0, #1
 8007b2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b30:	e7a5      	b.n	8007a7e <_vfiprintf_r+0x11a>
 8007b32:	2300      	movs	r3, #0
 8007b34:	f04f 0c0a 	mov.w	ip, #10
 8007b38:	4619      	mov	r1, r3
 8007b3a:	3401      	adds	r4, #1
 8007b3c:	9305      	str	r3, [sp, #20]
 8007b3e:	4620      	mov	r0, r4
 8007b40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b44:	3a30      	subs	r2, #48	; 0x30
 8007b46:	2a09      	cmp	r2, #9
 8007b48:	d903      	bls.n	8007b52 <_vfiprintf_r+0x1ee>
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d0c5      	beq.n	8007ada <_vfiprintf_r+0x176>
 8007b4e:	9105      	str	r1, [sp, #20]
 8007b50:	e7c3      	b.n	8007ada <_vfiprintf_r+0x176>
 8007b52:	4604      	mov	r4, r0
 8007b54:	2301      	movs	r3, #1
 8007b56:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b5a:	e7f0      	b.n	8007b3e <_vfiprintf_r+0x1da>
 8007b5c:	ab03      	add	r3, sp, #12
 8007b5e:	9300      	str	r3, [sp, #0]
 8007b60:	462a      	mov	r2, r5
 8007b62:	4630      	mov	r0, r6
 8007b64:	4b16      	ldr	r3, [pc, #88]	; (8007bc0 <_vfiprintf_r+0x25c>)
 8007b66:	a904      	add	r1, sp, #16
 8007b68:	f7fd fdda 	bl	8005720 <_printf_float>
 8007b6c:	4607      	mov	r7, r0
 8007b6e:	1c78      	adds	r0, r7, #1
 8007b70:	d1d6      	bne.n	8007b20 <_vfiprintf_r+0x1bc>
 8007b72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b74:	07d9      	lsls	r1, r3, #31
 8007b76:	d405      	bmi.n	8007b84 <_vfiprintf_r+0x220>
 8007b78:	89ab      	ldrh	r3, [r5, #12]
 8007b7a:	059a      	lsls	r2, r3, #22
 8007b7c:	d402      	bmi.n	8007b84 <_vfiprintf_r+0x220>
 8007b7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b80:	f000 faab 	bl	80080da <__retarget_lock_release_recursive>
 8007b84:	89ab      	ldrh	r3, [r5, #12]
 8007b86:	065b      	lsls	r3, r3, #25
 8007b88:	f53f af12 	bmi.w	80079b0 <_vfiprintf_r+0x4c>
 8007b8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b8e:	e711      	b.n	80079b4 <_vfiprintf_r+0x50>
 8007b90:	ab03      	add	r3, sp, #12
 8007b92:	9300      	str	r3, [sp, #0]
 8007b94:	462a      	mov	r2, r5
 8007b96:	4630      	mov	r0, r6
 8007b98:	4b09      	ldr	r3, [pc, #36]	; (8007bc0 <_vfiprintf_r+0x25c>)
 8007b9a:	a904      	add	r1, sp, #16
 8007b9c:	f7fe f85c 	bl	8005c58 <_printf_i>
 8007ba0:	e7e4      	b.n	8007b6c <_vfiprintf_r+0x208>
 8007ba2:	bf00      	nop
 8007ba4:	0800a28c 	.word	0x0800a28c
 8007ba8:	0800a2ac 	.word	0x0800a2ac
 8007bac:	0800a26c 	.word	0x0800a26c
 8007bb0:	0800a114 	.word	0x0800a114
 8007bb4:	0800a11a 	.word	0x0800a11a
 8007bb8:	0800a11e 	.word	0x0800a11e
 8007bbc:	08005721 	.word	0x08005721
 8007bc0:	08007941 	.word	0x08007941

08007bc4 <__swbuf_r>:
 8007bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bc6:	460e      	mov	r6, r1
 8007bc8:	4614      	mov	r4, r2
 8007bca:	4605      	mov	r5, r0
 8007bcc:	b118      	cbz	r0, 8007bd6 <__swbuf_r+0x12>
 8007bce:	6983      	ldr	r3, [r0, #24]
 8007bd0:	b90b      	cbnz	r3, 8007bd6 <__swbuf_r+0x12>
 8007bd2:	f000 f9e3 	bl	8007f9c <__sinit>
 8007bd6:	4b21      	ldr	r3, [pc, #132]	; (8007c5c <__swbuf_r+0x98>)
 8007bd8:	429c      	cmp	r4, r3
 8007bda:	d12b      	bne.n	8007c34 <__swbuf_r+0x70>
 8007bdc:	686c      	ldr	r4, [r5, #4]
 8007bde:	69a3      	ldr	r3, [r4, #24]
 8007be0:	60a3      	str	r3, [r4, #8]
 8007be2:	89a3      	ldrh	r3, [r4, #12]
 8007be4:	071a      	lsls	r2, r3, #28
 8007be6:	d52f      	bpl.n	8007c48 <__swbuf_r+0x84>
 8007be8:	6923      	ldr	r3, [r4, #16]
 8007bea:	b36b      	cbz	r3, 8007c48 <__swbuf_r+0x84>
 8007bec:	6923      	ldr	r3, [r4, #16]
 8007bee:	6820      	ldr	r0, [r4, #0]
 8007bf0:	b2f6      	uxtb	r6, r6
 8007bf2:	1ac0      	subs	r0, r0, r3
 8007bf4:	6963      	ldr	r3, [r4, #20]
 8007bf6:	4637      	mov	r7, r6
 8007bf8:	4283      	cmp	r3, r0
 8007bfa:	dc04      	bgt.n	8007c06 <__swbuf_r+0x42>
 8007bfc:	4621      	mov	r1, r4
 8007bfe:	4628      	mov	r0, r5
 8007c00:	f000 f938 	bl	8007e74 <_fflush_r>
 8007c04:	bb30      	cbnz	r0, 8007c54 <__swbuf_r+0x90>
 8007c06:	68a3      	ldr	r3, [r4, #8]
 8007c08:	3001      	adds	r0, #1
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	60a3      	str	r3, [r4, #8]
 8007c0e:	6823      	ldr	r3, [r4, #0]
 8007c10:	1c5a      	adds	r2, r3, #1
 8007c12:	6022      	str	r2, [r4, #0]
 8007c14:	701e      	strb	r6, [r3, #0]
 8007c16:	6963      	ldr	r3, [r4, #20]
 8007c18:	4283      	cmp	r3, r0
 8007c1a:	d004      	beq.n	8007c26 <__swbuf_r+0x62>
 8007c1c:	89a3      	ldrh	r3, [r4, #12]
 8007c1e:	07db      	lsls	r3, r3, #31
 8007c20:	d506      	bpl.n	8007c30 <__swbuf_r+0x6c>
 8007c22:	2e0a      	cmp	r6, #10
 8007c24:	d104      	bne.n	8007c30 <__swbuf_r+0x6c>
 8007c26:	4621      	mov	r1, r4
 8007c28:	4628      	mov	r0, r5
 8007c2a:	f000 f923 	bl	8007e74 <_fflush_r>
 8007c2e:	b988      	cbnz	r0, 8007c54 <__swbuf_r+0x90>
 8007c30:	4638      	mov	r0, r7
 8007c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c34:	4b0a      	ldr	r3, [pc, #40]	; (8007c60 <__swbuf_r+0x9c>)
 8007c36:	429c      	cmp	r4, r3
 8007c38:	d101      	bne.n	8007c3e <__swbuf_r+0x7a>
 8007c3a:	68ac      	ldr	r4, [r5, #8]
 8007c3c:	e7cf      	b.n	8007bde <__swbuf_r+0x1a>
 8007c3e:	4b09      	ldr	r3, [pc, #36]	; (8007c64 <__swbuf_r+0xa0>)
 8007c40:	429c      	cmp	r4, r3
 8007c42:	bf08      	it	eq
 8007c44:	68ec      	ldreq	r4, [r5, #12]
 8007c46:	e7ca      	b.n	8007bde <__swbuf_r+0x1a>
 8007c48:	4621      	mov	r1, r4
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	f000 f81a 	bl	8007c84 <__swsetup_r>
 8007c50:	2800      	cmp	r0, #0
 8007c52:	d0cb      	beq.n	8007bec <__swbuf_r+0x28>
 8007c54:	f04f 37ff 	mov.w	r7, #4294967295
 8007c58:	e7ea      	b.n	8007c30 <__swbuf_r+0x6c>
 8007c5a:	bf00      	nop
 8007c5c:	0800a28c 	.word	0x0800a28c
 8007c60:	0800a2ac 	.word	0x0800a2ac
 8007c64:	0800a26c 	.word	0x0800a26c

08007c68 <__ascii_wctomb>:
 8007c68:	4603      	mov	r3, r0
 8007c6a:	4608      	mov	r0, r1
 8007c6c:	b141      	cbz	r1, 8007c80 <__ascii_wctomb+0x18>
 8007c6e:	2aff      	cmp	r2, #255	; 0xff
 8007c70:	d904      	bls.n	8007c7c <__ascii_wctomb+0x14>
 8007c72:	228a      	movs	r2, #138	; 0x8a
 8007c74:	f04f 30ff 	mov.w	r0, #4294967295
 8007c78:	601a      	str	r2, [r3, #0]
 8007c7a:	4770      	bx	lr
 8007c7c:	2001      	movs	r0, #1
 8007c7e:	700a      	strb	r2, [r1, #0]
 8007c80:	4770      	bx	lr
	...

08007c84 <__swsetup_r>:
 8007c84:	4b32      	ldr	r3, [pc, #200]	; (8007d50 <__swsetup_r+0xcc>)
 8007c86:	b570      	push	{r4, r5, r6, lr}
 8007c88:	681d      	ldr	r5, [r3, #0]
 8007c8a:	4606      	mov	r6, r0
 8007c8c:	460c      	mov	r4, r1
 8007c8e:	b125      	cbz	r5, 8007c9a <__swsetup_r+0x16>
 8007c90:	69ab      	ldr	r3, [r5, #24]
 8007c92:	b913      	cbnz	r3, 8007c9a <__swsetup_r+0x16>
 8007c94:	4628      	mov	r0, r5
 8007c96:	f000 f981 	bl	8007f9c <__sinit>
 8007c9a:	4b2e      	ldr	r3, [pc, #184]	; (8007d54 <__swsetup_r+0xd0>)
 8007c9c:	429c      	cmp	r4, r3
 8007c9e:	d10f      	bne.n	8007cc0 <__swsetup_r+0x3c>
 8007ca0:	686c      	ldr	r4, [r5, #4]
 8007ca2:	89a3      	ldrh	r3, [r4, #12]
 8007ca4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ca8:	0719      	lsls	r1, r3, #28
 8007caa:	d42c      	bmi.n	8007d06 <__swsetup_r+0x82>
 8007cac:	06dd      	lsls	r5, r3, #27
 8007cae:	d411      	bmi.n	8007cd4 <__swsetup_r+0x50>
 8007cb0:	2309      	movs	r3, #9
 8007cb2:	6033      	str	r3, [r6, #0]
 8007cb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cbc:	81a3      	strh	r3, [r4, #12]
 8007cbe:	e03e      	b.n	8007d3e <__swsetup_r+0xba>
 8007cc0:	4b25      	ldr	r3, [pc, #148]	; (8007d58 <__swsetup_r+0xd4>)
 8007cc2:	429c      	cmp	r4, r3
 8007cc4:	d101      	bne.n	8007cca <__swsetup_r+0x46>
 8007cc6:	68ac      	ldr	r4, [r5, #8]
 8007cc8:	e7eb      	b.n	8007ca2 <__swsetup_r+0x1e>
 8007cca:	4b24      	ldr	r3, [pc, #144]	; (8007d5c <__swsetup_r+0xd8>)
 8007ccc:	429c      	cmp	r4, r3
 8007cce:	bf08      	it	eq
 8007cd0:	68ec      	ldreq	r4, [r5, #12]
 8007cd2:	e7e6      	b.n	8007ca2 <__swsetup_r+0x1e>
 8007cd4:	0758      	lsls	r0, r3, #29
 8007cd6:	d512      	bpl.n	8007cfe <__swsetup_r+0x7a>
 8007cd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cda:	b141      	cbz	r1, 8007cee <__swsetup_r+0x6a>
 8007cdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ce0:	4299      	cmp	r1, r3
 8007ce2:	d002      	beq.n	8007cea <__swsetup_r+0x66>
 8007ce4:	4630      	mov	r0, r6
 8007ce6:	f7ff fb37 	bl	8007358 <_free_r>
 8007cea:	2300      	movs	r3, #0
 8007cec:	6363      	str	r3, [r4, #52]	; 0x34
 8007cee:	89a3      	ldrh	r3, [r4, #12]
 8007cf0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007cf4:	81a3      	strh	r3, [r4, #12]
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	6063      	str	r3, [r4, #4]
 8007cfa:	6923      	ldr	r3, [r4, #16]
 8007cfc:	6023      	str	r3, [r4, #0]
 8007cfe:	89a3      	ldrh	r3, [r4, #12]
 8007d00:	f043 0308 	orr.w	r3, r3, #8
 8007d04:	81a3      	strh	r3, [r4, #12]
 8007d06:	6923      	ldr	r3, [r4, #16]
 8007d08:	b94b      	cbnz	r3, 8007d1e <__swsetup_r+0x9a>
 8007d0a:	89a3      	ldrh	r3, [r4, #12]
 8007d0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d14:	d003      	beq.n	8007d1e <__swsetup_r+0x9a>
 8007d16:	4621      	mov	r1, r4
 8007d18:	4630      	mov	r0, r6
 8007d1a:	f000 fa05 	bl	8008128 <__smakebuf_r>
 8007d1e:	89a0      	ldrh	r0, [r4, #12]
 8007d20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d24:	f010 0301 	ands.w	r3, r0, #1
 8007d28:	d00a      	beq.n	8007d40 <__swsetup_r+0xbc>
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	60a3      	str	r3, [r4, #8]
 8007d2e:	6963      	ldr	r3, [r4, #20]
 8007d30:	425b      	negs	r3, r3
 8007d32:	61a3      	str	r3, [r4, #24]
 8007d34:	6923      	ldr	r3, [r4, #16]
 8007d36:	b943      	cbnz	r3, 8007d4a <__swsetup_r+0xc6>
 8007d38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007d3c:	d1ba      	bne.n	8007cb4 <__swsetup_r+0x30>
 8007d3e:	bd70      	pop	{r4, r5, r6, pc}
 8007d40:	0781      	lsls	r1, r0, #30
 8007d42:	bf58      	it	pl
 8007d44:	6963      	ldrpl	r3, [r4, #20]
 8007d46:	60a3      	str	r3, [r4, #8]
 8007d48:	e7f4      	b.n	8007d34 <__swsetup_r+0xb0>
 8007d4a:	2000      	movs	r0, #0
 8007d4c:	e7f7      	b.n	8007d3e <__swsetup_r+0xba>
 8007d4e:	bf00      	nop
 8007d50:	2000001c 	.word	0x2000001c
 8007d54:	0800a28c 	.word	0x0800a28c
 8007d58:	0800a2ac 	.word	0x0800a2ac
 8007d5c:	0800a26c 	.word	0x0800a26c

08007d60 <abort>:
 8007d60:	2006      	movs	r0, #6
 8007d62:	b508      	push	{r3, lr}
 8007d64:	f000 fa50 	bl	8008208 <raise>
 8007d68:	2001      	movs	r0, #1
 8007d6a:	f7fa fad7 	bl	800231c <_exit>
	...

08007d70 <__sflush_r>:
 8007d70:	898a      	ldrh	r2, [r1, #12]
 8007d72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d74:	4605      	mov	r5, r0
 8007d76:	0710      	lsls	r0, r2, #28
 8007d78:	460c      	mov	r4, r1
 8007d7a:	d457      	bmi.n	8007e2c <__sflush_r+0xbc>
 8007d7c:	684b      	ldr	r3, [r1, #4]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	dc04      	bgt.n	8007d8c <__sflush_r+0x1c>
 8007d82:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	dc01      	bgt.n	8007d8c <__sflush_r+0x1c>
 8007d88:	2000      	movs	r0, #0
 8007d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d8e:	2e00      	cmp	r6, #0
 8007d90:	d0fa      	beq.n	8007d88 <__sflush_r+0x18>
 8007d92:	2300      	movs	r3, #0
 8007d94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d98:	682f      	ldr	r7, [r5, #0]
 8007d9a:	602b      	str	r3, [r5, #0]
 8007d9c:	d032      	beq.n	8007e04 <__sflush_r+0x94>
 8007d9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007da0:	89a3      	ldrh	r3, [r4, #12]
 8007da2:	075a      	lsls	r2, r3, #29
 8007da4:	d505      	bpl.n	8007db2 <__sflush_r+0x42>
 8007da6:	6863      	ldr	r3, [r4, #4]
 8007da8:	1ac0      	subs	r0, r0, r3
 8007daa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007dac:	b10b      	cbz	r3, 8007db2 <__sflush_r+0x42>
 8007dae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007db0:	1ac0      	subs	r0, r0, r3
 8007db2:	2300      	movs	r3, #0
 8007db4:	4602      	mov	r2, r0
 8007db6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007db8:	4628      	mov	r0, r5
 8007dba:	6a21      	ldr	r1, [r4, #32]
 8007dbc:	47b0      	blx	r6
 8007dbe:	1c43      	adds	r3, r0, #1
 8007dc0:	89a3      	ldrh	r3, [r4, #12]
 8007dc2:	d106      	bne.n	8007dd2 <__sflush_r+0x62>
 8007dc4:	6829      	ldr	r1, [r5, #0]
 8007dc6:	291d      	cmp	r1, #29
 8007dc8:	d82c      	bhi.n	8007e24 <__sflush_r+0xb4>
 8007dca:	4a29      	ldr	r2, [pc, #164]	; (8007e70 <__sflush_r+0x100>)
 8007dcc:	40ca      	lsrs	r2, r1
 8007dce:	07d6      	lsls	r6, r2, #31
 8007dd0:	d528      	bpl.n	8007e24 <__sflush_r+0xb4>
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	6062      	str	r2, [r4, #4]
 8007dd6:	6922      	ldr	r2, [r4, #16]
 8007dd8:	04d9      	lsls	r1, r3, #19
 8007dda:	6022      	str	r2, [r4, #0]
 8007ddc:	d504      	bpl.n	8007de8 <__sflush_r+0x78>
 8007dde:	1c42      	adds	r2, r0, #1
 8007de0:	d101      	bne.n	8007de6 <__sflush_r+0x76>
 8007de2:	682b      	ldr	r3, [r5, #0]
 8007de4:	b903      	cbnz	r3, 8007de8 <__sflush_r+0x78>
 8007de6:	6560      	str	r0, [r4, #84]	; 0x54
 8007de8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dea:	602f      	str	r7, [r5, #0]
 8007dec:	2900      	cmp	r1, #0
 8007dee:	d0cb      	beq.n	8007d88 <__sflush_r+0x18>
 8007df0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007df4:	4299      	cmp	r1, r3
 8007df6:	d002      	beq.n	8007dfe <__sflush_r+0x8e>
 8007df8:	4628      	mov	r0, r5
 8007dfa:	f7ff faad 	bl	8007358 <_free_r>
 8007dfe:	2000      	movs	r0, #0
 8007e00:	6360      	str	r0, [r4, #52]	; 0x34
 8007e02:	e7c2      	b.n	8007d8a <__sflush_r+0x1a>
 8007e04:	6a21      	ldr	r1, [r4, #32]
 8007e06:	2301      	movs	r3, #1
 8007e08:	4628      	mov	r0, r5
 8007e0a:	47b0      	blx	r6
 8007e0c:	1c41      	adds	r1, r0, #1
 8007e0e:	d1c7      	bne.n	8007da0 <__sflush_r+0x30>
 8007e10:	682b      	ldr	r3, [r5, #0]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d0c4      	beq.n	8007da0 <__sflush_r+0x30>
 8007e16:	2b1d      	cmp	r3, #29
 8007e18:	d001      	beq.n	8007e1e <__sflush_r+0xae>
 8007e1a:	2b16      	cmp	r3, #22
 8007e1c:	d101      	bne.n	8007e22 <__sflush_r+0xb2>
 8007e1e:	602f      	str	r7, [r5, #0]
 8007e20:	e7b2      	b.n	8007d88 <__sflush_r+0x18>
 8007e22:	89a3      	ldrh	r3, [r4, #12]
 8007e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e28:	81a3      	strh	r3, [r4, #12]
 8007e2a:	e7ae      	b.n	8007d8a <__sflush_r+0x1a>
 8007e2c:	690f      	ldr	r7, [r1, #16]
 8007e2e:	2f00      	cmp	r7, #0
 8007e30:	d0aa      	beq.n	8007d88 <__sflush_r+0x18>
 8007e32:	0793      	lsls	r3, r2, #30
 8007e34:	bf18      	it	ne
 8007e36:	2300      	movne	r3, #0
 8007e38:	680e      	ldr	r6, [r1, #0]
 8007e3a:	bf08      	it	eq
 8007e3c:	694b      	ldreq	r3, [r1, #20]
 8007e3e:	1bf6      	subs	r6, r6, r7
 8007e40:	600f      	str	r7, [r1, #0]
 8007e42:	608b      	str	r3, [r1, #8]
 8007e44:	2e00      	cmp	r6, #0
 8007e46:	dd9f      	ble.n	8007d88 <__sflush_r+0x18>
 8007e48:	4633      	mov	r3, r6
 8007e4a:	463a      	mov	r2, r7
 8007e4c:	4628      	mov	r0, r5
 8007e4e:	6a21      	ldr	r1, [r4, #32]
 8007e50:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007e54:	47e0      	blx	ip
 8007e56:	2800      	cmp	r0, #0
 8007e58:	dc06      	bgt.n	8007e68 <__sflush_r+0xf8>
 8007e5a:	89a3      	ldrh	r3, [r4, #12]
 8007e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e64:	81a3      	strh	r3, [r4, #12]
 8007e66:	e790      	b.n	8007d8a <__sflush_r+0x1a>
 8007e68:	4407      	add	r7, r0
 8007e6a:	1a36      	subs	r6, r6, r0
 8007e6c:	e7ea      	b.n	8007e44 <__sflush_r+0xd4>
 8007e6e:	bf00      	nop
 8007e70:	20400001 	.word	0x20400001

08007e74 <_fflush_r>:
 8007e74:	b538      	push	{r3, r4, r5, lr}
 8007e76:	690b      	ldr	r3, [r1, #16]
 8007e78:	4605      	mov	r5, r0
 8007e7a:	460c      	mov	r4, r1
 8007e7c:	b913      	cbnz	r3, 8007e84 <_fflush_r+0x10>
 8007e7e:	2500      	movs	r5, #0
 8007e80:	4628      	mov	r0, r5
 8007e82:	bd38      	pop	{r3, r4, r5, pc}
 8007e84:	b118      	cbz	r0, 8007e8e <_fflush_r+0x1a>
 8007e86:	6983      	ldr	r3, [r0, #24]
 8007e88:	b90b      	cbnz	r3, 8007e8e <_fflush_r+0x1a>
 8007e8a:	f000 f887 	bl	8007f9c <__sinit>
 8007e8e:	4b14      	ldr	r3, [pc, #80]	; (8007ee0 <_fflush_r+0x6c>)
 8007e90:	429c      	cmp	r4, r3
 8007e92:	d11b      	bne.n	8007ecc <_fflush_r+0x58>
 8007e94:	686c      	ldr	r4, [r5, #4]
 8007e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d0ef      	beq.n	8007e7e <_fflush_r+0xa>
 8007e9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ea0:	07d0      	lsls	r0, r2, #31
 8007ea2:	d404      	bmi.n	8007eae <_fflush_r+0x3a>
 8007ea4:	0599      	lsls	r1, r3, #22
 8007ea6:	d402      	bmi.n	8007eae <_fflush_r+0x3a>
 8007ea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007eaa:	f000 f915 	bl	80080d8 <__retarget_lock_acquire_recursive>
 8007eae:	4628      	mov	r0, r5
 8007eb0:	4621      	mov	r1, r4
 8007eb2:	f7ff ff5d 	bl	8007d70 <__sflush_r>
 8007eb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007eb8:	4605      	mov	r5, r0
 8007eba:	07da      	lsls	r2, r3, #31
 8007ebc:	d4e0      	bmi.n	8007e80 <_fflush_r+0xc>
 8007ebe:	89a3      	ldrh	r3, [r4, #12]
 8007ec0:	059b      	lsls	r3, r3, #22
 8007ec2:	d4dd      	bmi.n	8007e80 <_fflush_r+0xc>
 8007ec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ec6:	f000 f908 	bl	80080da <__retarget_lock_release_recursive>
 8007eca:	e7d9      	b.n	8007e80 <_fflush_r+0xc>
 8007ecc:	4b05      	ldr	r3, [pc, #20]	; (8007ee4 <_fflush_r+0x70>)
 8007ece:	429c      	cmp	r4, r3
 8007ed0:	d101      	bne.n	8007ed6 <_fflush_r+0x62>
 8007ed2:	68ac      	ldr	r4, [r5, #8]
 8007ed4:	e7df      	b.n	8007e96 <_fflush_r+0x22>
 8007ed6:	4b04      	ldr	r3, [pc, #16]	; (8007ee8 <_fflush_r+0x74>)
 8007ed8:	429c      	cmp	r4, r3
 8007eda:	bf08      	it	eq
 8007edc:	68ec      	ldreq	r4, [r5, #12]
 8007ede:	e7da      	b.n	8007e96 <_fflush_r+0x22>
 8007ee0:	0800a28c 	.word	0x0800a28c
 8007ee4:	0800a2ac 	.word	0x0800a2ac
 8007ee8:	0800a26c 	.word	0x0800a26c

08007eec <std>:
 8007eec:	2300      	movs	r3, #0
 8007eee:	b510      	push	{r4, lr}
 8007ef0:	4604      	mov	r4, r0
 8007ef2:	e9c0 3300 	strd	r3, r3, [r0]
 8007ef6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007efa:	6083      	str	r3, [r0, #8]
 8007efc:	8181      	strh	r1, [r0, #12]
 8007efe:	6643      	str	r3, [r0, #100]	; 0x64
 8007f00:	81c2      	strh	r2, [r0, #14]
 8007f02:	6183      	str	r3, [r0, #24]
 8007f04:	4619      	mov	r1, r3
 8007f06:	2208      	movs	r2, #8
 8007f08:	305c      	adds	r0, #92	; 0x5c
 8007f0a:	f7fd fb63 	bl	80055d4 <memset>
 8007f0e:	4b05      	ldr	r3, [pc, #20]	; (8007f24 <std+0x38>)
 8007f10:	6224      	str	r4, [r4, #32]
 8007f12:	6263      	str	r3, [r4, #36]	; 0x24
 8007f14:	4b04      	ldr	r3, [pc, #16]	; (8007f28 <std+0x3c>)
 8007f16:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f18:	4b04      	ldr	r3, [pc, #16]	; (8007f2c <std+0x40>)
 8007f1a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f1c:	4b04      	ldr	r3, [pc, #16]	; (8007f30 <std+0x44>)
 8007f1e:	6323      	str	r3, [r4, #48]	; 0x30
 8007f20:	bd10      	pop	{r4, pc}
 8007f22:	bf00      	nop
 8007f24:	08008241 	.word	0x08008241
 8007f28:	08008263 	.word	0x08008263
 8007f2c:	0800829b 	.word	0x0800829b
 8007f30:	080082bf 	.word	0x080082bf

08007f34 <_cleanup_r>:
 8007f34:	4901      	ldr	r1, [pc, #4]	; (8007f3c <_cleanup_r+0x8>)
 8007f36:	f000 b8af 	b.w	8008098 <_fwalk_reent>
 8007f3a:	bf00      	nop
 8007f3c:	08007e75 	.word	0x08007e75

08007f40 <__sfmoreglue>:
 8007f40:	2268      	movs	r2, #104	; 0x68
 8007f42:	b570      	push	{r4, r5, r6, lr}
 8007f44:	1e4d      	subs	r5, r1, #1
 8007f46:	4355      	muls	r5, r2
 8007f48:	460e      	mov	r6, r1
 8007f4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007f4e:	f7ff fa6b 	bl	8007428 <_malloc_r>
 8007f52:	4604      	mov	r4, r0
 8007f54:	b140      	cbz	r0, 8007f68 <__sfmoreglue+0x28>
 8007f56:	2100      	movs	r1, #0
 8007f58:	e9c0 1600 	strd	r1, r6, [r0]
 8007f5c:	300c      	adds	r0, #12
 8007f5e:	60a0      	str	r0, [r4, #8]
 8007f60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007f64:	f7fd fb36 	bl	80055d4 <memset>
 8007f68:	4620      	mov	r0, r4
 8007f6a:	bd70      	pop	{r4, r5, r6, pc}

08007f6c <__sfp_lock_acquire>:
 8007f6c:	4801      	ldr	r0, [pc, #4]	; (8007f74 <__sfp_lock_acquire+0x8>)
 8007f6e:	f000 b8b3 	b.w	80080d8 <__retarget_lock_acquire_recursive>
 8007f72:	bf00      	nop
 8007f74:	200007c9 	.word	0x200007c9

08007f78 <__sfp_lock_release>:
 8007f78:	4801      	ldr	r0, [pc, #4]	; (8007f80 <__sfp_lock_release+0x8>)
 8007f7a:	f000 b8ae 	b.w	80080da <__retarget_lock_release_recursive>
 8007f7e:	bf00      	nop
 8007f80:	200007c9 	.word	0x200007c9

08007f84 <__sinit_lock_acquire>:
 8007f84:	4801      	ldr	r0, [pc, #4]	; (8007f8c <__sinit_lock_acquire+0x8>)
 8007f86:	f000 b8a7 	b.w	80080d8 <__retarget_lock_acquire_recursive>
 8007f8a:	bf00      	nop
 8007f8c:	200007ca 	.word	0x200007ca

08007f90 <__sinit_lock_release>:
 8007f90:	4801      	ldr	r0, [pc, #4]	; (8007f98 <__sinit_lock_release+0x8>)
 8007f92:	f000 b8a2 	b.w	80080da <__retarget_lock_release_recursive>
 8007f96:	bf00      	nop
 8007f98:	200007ca 	.word	0x200007ca

08007f9c <__sinit>:
 8007f9c:	b510      	push	{r4, lr}
 8007f9e:	4604      	mov	r4, r0
 8007fa0:	f7ff fff0 	bl	8007f84 <__sinit_lock_acquire>
 8007fa4:	69a3      	ldr	r3, [r4, #24]
 8007fa6:	b11b      	cbz	r3, 8007fb0 <__sinit+0x14>
 8007fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fac:	f7ff bff0 	b.w	8007f90 <__sinit_lock_release>
 8007fb0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007fb4:	6523      	str	r3, [r4, #80]	; 0x50
 8007fb6:	4b13      	ldr	r3, [pc, #76]	; (8008004 <__sinit+0x68>)
 8007fb8:	4a13      	ldr	r2, [pc, #76]	; (8008008 <__sinit+0x6c>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	62a2      	str	r2, [r4, #40]	; 0x28
 8007fbe:	42a3      	cmp	r3, r4
 8007fc0:	bf08      	it	eq
 8007fc2:	2301      	moveq	r3, #1
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	bf08      	it	eq
 8007fc8:	61a3      	streq	r3, [r4, #24]
 8007fca:	f000 f81f 	bl	800800c <__sfp>
 8007fce:	6060      	str	r0, [r4, #4]
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	f000 f81b 	bl	800800c <__sfp>
 8007fd6:	60a0      	str	r0, [r4, #8]
 8007fd8:	4620      	mov	r0, r4
 8007fda:	f000 f817 	bl	800800c <__sfp>
 8007fde:	2200      	movs	r2, #0
 8007fe0:	2104      	movs	r1, #4
 8007fe2:	60e0      	str	r0, [r4, #12]
 8007fe4:	6860      	ldr	r0, [r4, #4]
 8007fe6:	f7ff ff81 	bl	8007eec <std>
 8007fea:	2201      	movs	r2, #1
 8007fec:	2109      	movs	r1, #9
 8007fee:	68a0      	ldr	r0, [r4, #8]
 8007ff0:	f7ff ff7c 	bl	8007eec <std>
 8007ff4:	2202      	movs	r2, #2
 8007ff6:	2112      	movs	r1, #18
 8007ff8:	68e0      	ldr	r0, [r4, #12]
 8007ffa:	f7ff ff77 	bl	8007eec <std>
 8007ffe:	2301      	movs	r3, #1
 8008000:	61a3      	str	r3, [r4, #24]
 8008002:	e7d1      	b.n	8007fa8 <__sinit+0xc>
 8008004:	08009ef4 	.word	0x08009ef4
 8008008:	08007f35 	.word	0x08007f35

0800800c <__sfp>:
 800800c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800800e:	4607      	mov	r7, r0
 8008010:	f7ff ffac 	bl	8007f6c <__sfp_lock_acquire>
 8008014:	4b1e      	ldr	r3, [pc, #120]	; (8008090 <__sfp+0x84>)
 8008016:	681e      	ldr	r6, [r3, #0]
 8008018:	69b3      	ldr	r3, [r6, #24]
 800801a:	b913      	cbnz	r3, 8008022 <__sfp+0x16>
 800801c:	4630      	mov	r0, r6
 800801e:	f7ff ffbd 	bl	8007f9c <__sinit>
 8008022:	3648      	adds	r6, #72	; 0x48
 8008024:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008028:	3b01      	subs	r3, #1
 800802a:	d503      	bpl.n	8008034 <__sfp+0x28>
 800802c:	6833      	ldr	r3, [r6, #0]
 800802e:	b30b      	cbz	r3, 8008074 <__sfp+0x68>
 8008030:	6836      	ldr	r6, [r6, #0]
 8008032:	e7f7      	b.n	8008024 <__sfp+0x18>
 8008034:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008038:	b9d5      	cbnz	r5, 8008070 <__sfp+0x64>
 800803a:	4b16      	ldr	r3, [pc, #88]	; (8008094 <__sfp+0x88>)
 800803c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008040:	60e3      	str	r3, [r4, #12]
 8008042:	6665      	str	r5, [r4, #100]	; 0x64
 8008044:	f000 f847 	bl	80080d6 <__retarget_lock_init_recursive>
 8008048:	f7ff ff96 	bl	8007f78 <__sfp_lock_release>
 800804c:	2208      	movs	r2, #8
 800804e:	4629      	mov	r1, r5
 8008050:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008054:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008058:	6025      	str	r5, [r4, #0]
 800805a:	61a5      	str	r5, [r4, #24]
 800805c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008060:	f7fd fab8 	bl	80055d4 <memset>
 8008064:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008068:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800806c:	4620      	mov	r0, r4
 800806e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008070:	3468      	adds	r4, #104	; 0x68
 8008072:	e7d9      	b.n	8008028 <__sfp+0x1c>
 8008074:	2104      	movs	r1, #4
 8008076:	4638      	mov	r0, r7
 8008078:	f7ff ff62 	bl	8007f40 <__sfmoreglue>
 800807c:	4604      	mov	r4, r0
 800807e:	6030      	str	r0, [r6, #0]
 8008080:	2800      	cmp	r0, #0
 8008082:	d1d5      	bne.n	8008030 <__sfp+0x24>
 8008084:	f7ff ff78 	bl	8007f78 <__sfp_lock_release>
 8008088:	230c      	movs	r3, #12
 800808a:	603b      	str	r3, [r7, #0]
 800808c:	e7ee      	b.n	800806c <__sfp+0x60>
 800808e:	bf00      	nop
 8008090:	08009ef4 	.word	0x08009ef4
 8008094:	ffff0001 	.word	0xffff0001

08008098 <_fwalk_reent>:
 8008098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800809c:	4606      	mov	r6, r0
 800809e:	4688      	mov	r8, r1
 80080a0:	2700      	movs	r7, #0
 80080a2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80080a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080aa:	f1b9 0901 	subs.w	r9, r9, #1
 80080ae:	d505      	bpl.n	80080bc <_fwalk_reent+0x24>
 80080b0:	6824      	ldr	r4, [r4, #0]
 80080b2:	2c00      	cmp	r4, #0
 80080b4:	d1f7      	bne.n	80080a6 <_fwalk_reent+0xe>
 80080b6:	4638      	mov	r0, r7
 80080b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080bc:	89ab      	ldrh	r3, [r5, #12]
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d907      	bls.n	80080d2 <_fwalk_reent+0x3a>
 80080c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80080c6:	3301      	adds	r3, #1
 80080c8:	d003      	beq.n	80080d2 <_fwalk_reent+0x3a>
 80080ca:	4629      	mov	r1, r5
 80080cc:	4630      	mov	r0, r6
 80080ce:	47c0      	blx	r8
 80080d0:	4307      	orrs	r7, r0
 80080d2:	3568      	adds	r5, #104	; 0x68
 80080d4:	e7e9      	b.n	80080aa <_fwalk_reent+0x12>

080080d6 <__retarget_lock_init_recursive>:
 80080d6:	4770      	bx	lr

080080d8 <__retarget_lock_acquire_recursive>:
 80080d8:	4770      	bx	lr

080080da <__retarget_lock_release_recursive>:
 80080da:	4770      	bx	lr

080080dc <__swhatbuf_r>:
 80080dc:	b570      	push	{r4, r5, r6, lr}
 80080de:	460e      	mov	r6, r1
 80080e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080e4:	4614      	mov	r4, r2
 80080e6:	2900      	cmp	r1, #0
 80080e8:	461d      	mov	r5, r3
 80080ea:	b096      	sub	sp, #88	; 0x58
 80080ec:	da08      	bge.n	8008100 <__swhatbuf_r+0x24>
 80080ee:	2200      	movs	r2, #0
 80080f0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80080f4:	602a      	str	r2, [r5, #0]
 80080f6:	061a      	lsls	r2, r3, #24
 80080f8:	d410      	bmi.n	800811c <__swhatbuf_r+0x40>
 80080fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080fe:	e00e      	b.n	800811e <__swhatbuf_r+0x42>
 8008100:	466a      	mov	r2, sp
 8008102:	f000 f903 	bl	800830c <_fstat_r>
 8008106:	2800      	cmp	r0, #0
 8008108:	dbf1      	blt.n	80080ee <__swhatbuf_r+0x12>
 800810a:	9a01      	ldr	r2, [sp, #4]
 800810c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008110:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008114:	425a      	negs	r2, r3
 8008116:	415a      	adcs	r2, r3
 8008118:	602a      	str	r2, [r5, #0]
 800811a:	e7ee      	b.n	80080fa <__swhatbuf_r+0x1e>
 800811c:	2340      	movs	r3, #64	; 0x40
 800811e:	2000      	movs	r0, #0
 8008120:	6023      	str	r3, [r4, #0]
 8008122:	b016      	add	sp, #88	; 0x58
 8008124:	bd70      	pop	{r4, r5, r6, pc}
	...

08008128 <__smakebuf_r>:
 8008128:	898b      	ldrh	r3, [r1, #12]
 800812a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800812c:	079d      	lsls	r5, r3, #30
 800812e:	4606      	mov	r6, r0
 8008130:	460c      	mov	r4, r1
 8008132:	d507      	bpl.n	8008144 <__smakebuf_r+0x1c>
 8008134:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008138:	6023      	str	r3, [r4, #0]
 800813a:	6123      	str	r3, [r4, #16]
 800813c:	2301      	movs	r3, #1
 800813e:	6163      	str	r3, [r4, #20]
 8008140:	b002      	add	sp, #8
 8008142:	bd70      	pop	{r4, r5, r6, pc}
 8008144:	466a      	mov	r2, sp
 8008146:	ab01      	add	r3, sp, #4
 8008148:	f7ff ffc8 	bl	80080dc <__swhatbuf_r>
 800814c:	9900      	ldr	r1, [sp, #0]
 800814e:	4605      	mov	r5, r0
 8008150:	4630      	mov	r0, r6
 8008152:	f7ff f969 	bl	8007428 <_malloc_r>
 8008156:	b948      	cbnz	r0, 800816c <__smakebuf_r+0x44>
 8008158:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800815c:	059a      	lsls	r2, r3, #22
 800815e:	d4ef      	bmi.n	8008140 <__smakebuf_r+0x18>
 8008160:	f023 0303 	bic.w	r3, r3, #3
 8008164:	f043 0302 	orr.w	r3, r3, #2
 8008168:	81a3      	strh	r3, [r4, #12]
 800816a:	e7e3      	b.n	8008134 <__smakebuf_r+0xc>
 800816c:	4b0d      	ldr	r3, [pc, #52]	; (80081a4 <__smakebuf_r+0x7c>)
 800816e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008170:	89a3      	ldrh	r3, [r4, #12]
 8008172:	6020      	str	r0, [r4, #0]
 8008174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008178:	81a3      	strh	r3, [r4, #12]
 800817a:	9b00      	ldr	r3, [sp, #0]
 800817c:	6120      	str	r0, [r4, #16]
 800817e:	6163      	str	r3, [r4, #20]
 8008180:	9b01      	ldr	r3, [sp, #4]
 8008182:	b15b      	cbz	r3, 800819c <__smakebuf_r+0x74>
 8008184:	4630      	mov	r0, r6
 8008186:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800818a:	f000 f8d1 	bl	8008330 <_isatty_r>
 800818e:	b128      	cbz	r0, 800819c <__smakebuf_r+0x74>
 8008190:	89a3      	ldrh	r3, [r4, #12]
 8008192:	f023 0303 	bic.w	r3, r3, #3
 8008196:	f043 0301 	orr.w	r3, r3, #1
 800819a:	81a3      	strh	r3, [r4, #12]
 800819c:	89a0      	ldrh	r0, [r4, #12]
 800819e:	4305      	orrs	r5, r0
 80081a0:	81a5      	strh	r5, [r4, #12]
 80081a2:	e7cd      	b.n	8008140 <__smakebuf_r+0x18>
 80081a4:	08007f35 	.word	0x08007f35

080081a8 <_malloc_usable_size_r>:
 80081a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081ac:	1f18      	subs	r0, r3, #4
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	bfbc      	itt	lt
 80081b2:	580b      	ldrlt	r3, [r1, r0]
 80081b4:	18c0      	addlt	r0, r0, r3
 80081b6:	4770      	bx	lr

080081b8 <_raise_r>:
 80081b8:	291f      	cmp	r1, #31
 80081ba:	b538      	push	{r3, r4, r5, lr}
 80081bc:	4604      	mov	r4, r0
 80081be:	460d      	mov	r5, r1
 80081c0:	d904      	bls.n	80081cc <_raise_r+0x14>
 80081c2:	2316      	movs	r3, #22
 80081c4:	6003      	str	r3, [r0, #0]
 80081c6:	f04f 30ff 	mov.w	r0, #4294967295
 80081ca:	bd38      	pop	{r3, r4, r5, pc}
 80081cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80081ce:	b112      	cbz	r2, 80081d6 <_raise_r+0x1e>
 80081d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80081d4:	b94b      	cbnz	r3, 80081ea <_raise_r+0x32>
 80081d6:	4620      	mov	r0, r4
 80081d8:	f000 f830 	bl	800823c <_getpid_r>
 80081dc:	462a      	mov	r2, r5
 80081de:	4601      	mov	r1, r0
 80081e0:	4620      	mov	r0, r4
 80081e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081e6:	f000 b817 	b.w	8008218 <_kill_r>
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d00a      	beq.n	8008204 <_raise_r+0x4c>
 80081ee:	1c59      	adds	r1, r3, #1
 80081f0:	d103      	bne.n	80081fa <_raise_r+0x42>
 80081f2:	2316      	movs	r3, #22
 80081f4:	6003      	str	r3, [r0, #0]
 80081f6:	2001      	movs	r0, #1
 80081f8:	e7e7      	b.n	80081ca <_raise_r+0x12>
 80081fa:	2400      	movs	r4, #0
 80081fc:	4628      	mov	r0, r5
 80081fe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008202:	4798      	blx	r3
 8008204:	2000      	movs	r0, #0
 8008206:	e7e0      	b.n	80081ca <_raise_r+0x12>

08008208 <raise>:
 8008208:	4b02      	ldr	r3, [pc, #8]	; (8008214 <raise+0xc>)
 800820a:	4601      	mov	r1, r0
 800820c:	6818      	ldr	r0, [r3, #0]
 800820e:	f7ff bfd3 	b.w	80081b8 <_raise_r>
 8008212:	bf00      	nop
 8008214:	2000001c 	.word	0x2000001c

08008218 <_kill_r>:
 8008218:	b538      	push	{r3, r4, r5, lr}
 800821a:	2300      	movs	r3, #0
 800821c:	4d06      	ldr	r5, [pc, #24]	; (8008238 <_kill_r+0x20>)
 800821e:	4604      	mov	r4, r0
 8008220:	4608      	mov	r0, r1
 8008222:	4611      	mov	r1, r2
 8008224:	602b      	str	r3, [r5, #0]
 8008226:	f7fa f86f 	bl	8002308 <_kill>
 800822a:	1c43      	adds	r3, r0, #1
 800822c:	d102      	bne.n	8008234 <_kill_r+0x1c>
 800822e:	682b      	ldr	r3, [r5, #0]
 8008230:	b103      	cbz	r3, 8008234 <_kill_r+0x1c>
 8008232:	6023      	str	r3, [r4, #0]
 8008234:	bd38      	pop	{r3, r4, r5, pc}
 8008236:	bf00      	nop
 8008238:	200007c4 	.word	0x200007c4

0800823c <_getpid_r>:
 800823c:	f7fa b862 	b.w	8002304 <_getpid>

08008240 <__sread>:
 8008240:	b510      	push	{r4, lr}
 8008242:	460c      	mov	r4, r1
 8008244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008248:	f000 f894 	bl	8008374 <_read_r>
 800824c:	2800      	cmp	r0, #0
 800824e:	bfab      	itete	ge
 8008250:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008252:	89a3      	ldrhlt	r3, [r4, #12]
 8008254:	181b      	addge	r3, r3, r0
 8008256:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800825a:	bfac      	ite	ge
 800825c:	6563      	strge	r3, [r4, #84]	; 0x54
 800825e:	81a3      	strhlt	r3, [r4, #12]
 8008260:	bd10      	pop	{r4, pc}

08008262 <__swrite>:
 8008262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008266:	461f      	mov	r7, r3
 8008268:	898b      	ldrh	r3, [r1, #12]
 800826a:	4605      	mov	r5, r0
 800826c:	05db      	lsls	r3, r3, #23
 800826e:	460c      	mov	r4, r1
 8008270:	4616      	mov	r6, r2
 8008272:	d505      	bpl.n	8008280 <__swrite+0x1e>
 8008274:	2302      	movs	r3, #2
 8008276:	2200      	movs	r2, #0
 8008278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800827c:	f000 f868 	bl	8008350 <_lseek_r>
 8008280:	89a3      	ldrh	r3, [r4, #12]
 8008282:	4632      	mov	r2, r6
 8008284:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008288:	81a3      	strh	r3, [r4, #12]
 800828a:	4628      	mov	r0, r5
 800828c:	463b      	mov	r3, r7
 800828e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008296:	f000 b817 	b.w	80082c8 <_write_r>

0800829a <__sseek>:
 800829a:	b510      	push	{r4, lr}
 800829c:	460c      	mov	r4, r1
 800829e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082a2:	f000 f855 	bl	8008350 <_lseek_r>
 80082a6:	1c43      	adds	r3, r0, #1
 80082a8:	89a3      	ldrh	r3, [r4, #12]
 80082aa:	bf15      	itete	ne
 80082ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80082ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80082b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80082b6:	81a3      	strheq	r3, [r4, #12]
 80082b8:	bf18      	it	ne
 80082ba:	81a3      	strhne	r3, [r4, #12]
 80082bc:	bd10      	pop	{r4, pc}

080082be <__sclose>:
 80082be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082c2:	f000 b813 	b.w	80082ec <_close_r>
	...

080082c8 <_write_r>:
 80082c8:	b538      	push	{r3, r4, r5, lr}
 80082ca:	4604      	mov	r4, r0
 80082cc:	4608      	mov	r0, r1
 80082ce:	4611      	mov	r1, r2
 80082d0:	2200      	movs	r2, #0
 80082d2:	4d05      	ldr	r5, [pc, #20]	; (80082e8 <_write_r+0x20>)
 80082d4:	602a      	str	r2, [r5, #0]
 80082d6:	461a      	mov	r2, r3
 80082d8:	f7fa f834 	bl	8002344 <_write>
 80082dc:	1c43      	adds	r3, r0, #1
 80082de:	d102      	bne.n	80082e6 <_write_r+0x1e>
 80082e0:	682b      	ldr	r3, [r5, #0]
 80082e2:	b103      	cbz	r3, 80082e6 <_write_r+0x1e>
 80082e4:	6023      	str	r3, [r4, #0]
 80082e6:	bd38      	pop	{r3, r4, r5, pc}
 80082e8:	200007c4 	.word	0x200007c4

080082ec <_close_r>:
 80082ec:	b538      	push	{r3, r4, r5, lr}
 80082ee:	2300      	movs	r3, #0
 80082f0:	4d05      	ldr	r5, [pc, #20]	; (8008308 <_close_r+0x1c>)
 80082f2:	4604      	mov	r4, r0
 80082f4:	4608      	mov	r0, r1
 80082f6:	602b      	str	r3, [r5, #0]
 80082f8:	f7fa f832 	bl	8002360 <_close>
 80082fc:	1c43      	adds	r3, r0, #1
 80082fe:	d102      	bne.n	8008306 <_close_r+0x1a>
 8008300:	682b      	ldr	r3, [r5, #0]
 8008302:	b103      	cbz	r3, 8008306 <_close_r+0x1a>
 8008304:	6023      	str	r3, [r4, #0]
 8008306:	bd38      	pop	{r3, r4, r5, pc}
 8008308:	200007c4 	.word	0x200007c4

0800830c <_fstat_r>:
 800830c:	b538      	push	{r3, r4, r5, lr}
 800830e:	2300      	movs	r3, #0
 8008310:	4d06      	ldr	r5, [pc, #24]	; (800832c <_fstat_r+0x20>)
 8008312:	4604      	mov	r4, r0
 8008314:	4608      	mov	r0, r1
 8008316:	4611      	mov	r1, r2
 8008318:	602b      	str	r3, [r5, #0]
 800831a:	f7fa f825 	bl	8002368 <_fstat>
 800831e:	1c43      	adds	r3, r0, #1
 8008320:	d102      	bne.n	8008328 <_fstat_r+0x1c>
 8008322:	682b      	ldr	r3, [r5, #0]
 8008324:	b103      	cbz	r3, 8008328 <_fstat_r+0x1c>
 8008326:	6023      	str	r3, [r4, #0]
 8008328:	bd38      	pop	{r3, r4, r5, pc}
 800832a:	bf00      	nop
 800832c:	200007c4 	.word	0x200007c4

08008330 <_isatty_r>:
 8008330:	b538      	push	{r3, r4, r5, lr}
 8008332:	2300      	movs	r3, #0
 8008334:	4d05      	ldr	r5, [pc, #20]	; (800834c <_isatty_r+0x1c>)
 8008336:	4604      	mov	r4, r0
 8008338:	4608      	mov	r0, r1
 800833a:	602b      	str	r3, [r5, #0]
 800833c:	f7fa f81a 	bl	8002374 <_isatty>
 8008340:	1c43      	adds	r3, r0, #1
 8008342:	d102      	bne.n	800834a <_isatty_r+0x1a>
 8008344:	682b      	ldr	r3, [r5, #0]
 8008346:	b103      	cbz	r3, 800834a <_isatty_r+0x1a>
 8008348:	6023      	str	r3, [r4, #0]
 800834a:	bd38      	pop	{r3, r4, r5, pc}
 800834c:	200007c4 	.word	0x200007c4

08008350 <_lseek_r>:
 8008350:	b538      	push	{r3, r4, r5, lr}
 8008352:	4604      	mov	r4, r0
 8008354:	4608      	mov	r0, r1
 8008356:	4611      	mov	r1, r2
 8008358:	2200      	movs	r2, #0
 800835a:	4d05      	ldr	r5, [pc, #20]	; (8008370 <_lseek_r+0x20>)
 800835c:	602a      	str	r2, [r5, #0]
 800835e:	461a      	mov	r2, r3
 8008360:	f7fa f80a 	bl	8002378 <_lseek>
 8008364:	1c43      	adds	r3, r0, #1
 8008366:	d102      	bne.n	800836e <_lseek_r+0x1e>
 8008368:	682b      	ldr	r3, [r5, #0]
 800836a:	b103      	cbz	r3, 800836e <_lseek_r+0x1e>
 800836c:	6023      	str	r3, [r4, #0]
 800836e:	bd38      	pop	{r3, r4, r5, pc}
 8008370:	200007c4 	.word	0x200007c4

08008374 <_read_r>:
 8008374:	b538      	push	{r3, r4, r5, lr}
 8008376:	4604      	mov	r4, r0
 8008378:	4608      	mov	r0, r1
 800837a:	4611      	mov	r1, r2
 800837c:	2200      	movs	r2, #0
 800837e:	4d05      	ldr	r5, [pc, #20]	; (8008394 <_read_r+0x20>)
 8008380:	602a      	str	r2, [r5, #0]
 8008382:	461a      	mov	r2, r3
 8008384:	f7f9 ffd0 	bl	8002328 <_read>
 8008388:	1c43      	adds	r3, r0, #1
 800838a:	d102      	bne.n	8008392 <_read_r+0x1e>
 800838c:	682b      	ldr	r3, [r5, #0]
 800838e:	b103      	cbz	r3, 8008392 <_read_r+0x1e>
 8008390:	6023      	str	r3, [r4, #0]
 8008392:	bd38      	pop	{r3, r4, r5, pc}
 8008394:	200007c4 	.word	0x200007c4

08008398 <_init>:
 8008398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800839a:	bf00      	nop
 800839c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800839e:	bc08      	pop	{r3}
 80083a0:	469e      	mov	lr, r3
 80083a2:	4770      	bx	lr

080083a4 <_fini>:
 80083a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083a6:	bf00      	nop
 80083a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083aa:	bc08      	pop	{r3}
 80083ac:	469e      	mov	lr, r3
 80083ae:	4770      	bx	lr
